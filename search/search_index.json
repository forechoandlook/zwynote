{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u7b14\u8bb0\u76ee\u5f55","text":""},{"location":"cc/mix/","title":"Mix","text":""},{"location":"cc/mix/#mix","title":"mix","text":"<p>from : https://zhuanlan.zhihu.com/p/460825741</p> <p>\u7528\u9014\uff1a\u5c06\u82e5\u5e72\u529f\u80fd\u72ec\u7acb\u7684\u7c7b\u901a\u8fc7\u7ee7\u627f\u7684\u65b9\u5f0f\u5b9e\u73b0\u6a21\u5757\u590d\u7528\u7684C++\u6a21\u677f\u7f16\u7a0b\u6280\u5de7</p> <pre><code>template&lt;typename... Mixins&gt;\nclass MixinClass : public Mixins... {\n  public:\n    MixinClass() :  Mixins...() {}\n  // ...\n};\n</code></pre> <p><code>\u5c06\u6a21\u677f\u53c2\u6570\u4f5c\u4e3a\u6d3e\u751f\u7c7b\u7684\u57fa\u7c7b</code></p> <pre><code>template &lt;typename... Mixins&gt;\nclass Point : public Mixins... {\n public:\n  double x, y;\n  Point() : Mixins()..., x(0.0), y(0.0) {}\n  Point(double x, double y) : Mixins()..., x(x), y(y) {}\n};\n\nclass Label {\n public:\n  std::string label;\n  Label() : label(\"\") {}\n};\n\nclass Color {\n public:\n  unsigned char red = 0, green = 0, blue = 0;\n};\n\nusing MyPoint = Point&lt;Label, Color&gt;;\n</code></pre> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Number\n{\n    typedef int value_type;\n    int n;\n    void set(int v) { n = v; }\n    int get() const { return n; }\n};\n\ntemplate &lt;typename BASE, typename T = typename BASE::value_type&gt;\nstruct Undoable\n{\n    typedef T value_type;\n    BASE base;\n    T before;\n    void set(T v) { before = base.get(); base.set(v); }\n    void undo() { base.set(before); }\n    T get() const { return base.get(); }\n};\n\ntemplate &lt;typename BASE, typename T = typename BASE::value_type&gt;\nstruct Redoable\n{\n    typedef T value_type;\n    BASE base;\n    T after;\n    void set(T v) { after = v; base.set(v); }\n    void redo() { base.set(after); }\n    T get() const { return base.get(); }\n};\n\ntypedef Redoable&lt; Undoable&lt;Number&gt; &gt; ReUndoableNumber;\n\nint main()\n{\n    ReUndoableNumber mynum;\n    mynum.set(42); mynum.set(84);\n    cout &lt;&lt; mynum.get() &lt;&lt; '\\n';  // 84\n    mynum.undo();\n    cout &lt;&lt; mynum.get() &lt;&lt; '\\n';  // 42\n    mynum.redo();\n    cout &lt;&lt; mynum.get() &lt;&lt; '\\n';  // back to 84\n}\n</code></pre> <p>\u8fd8\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u5b9e\u73b0\u53ef\u8ddf\u8e2a\u7684\u5f02\u5e38,\u4f46\u662f\u6682\u65f6\u4e0dcare\u4e86</p>"}]}