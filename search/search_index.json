{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"wellcome to my blog","title":"Index"},{"location":"guide/","text":"\u4f7f\u7528\u6307\u5357 \u00b6 \u672c\u5730\u5f00\u53d1 \u00b6 \u73af\u5883\u51c6\u5907 \u00b6 \u5b89\u88c5 Python 3.x \u5b89\u88c5 MkDocs \u548c Material \u4e3b\u9898\uff1a pip install mkdocs-material \u672c\u5730\u8fd0\u884c \u00b6 \u514b\u9686\u4ed3\u5e93\uff1a git clone <repository-url> cd my-notes \u542f\u52a8\u672c\u5730\u670d\u52a1\u5668\uff1a mkdocs serve \u5728\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee http://127.0.0.1:8000 \u67e5\u770b\u6587\u6863 \u6587\u6863\u7ed3\u6784 \u00b6 docs/ \u251c\u2500\u2500 index.md # \u9996\u9875 \u251c\u2500\u2500 guide.md # \u4f7f\u7528\u6307\u5357 \u2514\u2500\u2500 cc/ # C++ \u76f8\u5173\u6587\u6863 \u2514\u2500\u2500 mix.md # Mix \u6a21\u677f\u7f16\u7a0b \u8d21\u732e\u6307\u5357 \u00b6 \u6dfb\u52a0\u65b0\u6587\u6863 \u00b6 \u5728 docs \u76ee\u5f55\u4e0b\u521b\u5efa Markdown \u6587\u4ef6 \u5728 mkdocs.yml \u7684 nav \u90e8\u5206\u6dfb\u52a0\u6587\u6863\u94fe\u63a5 \u63d0\u4ea4 Pull Request Markdown \u89c4\u8303 \u00b6 \u4f7f\u7528 ATX \u98ce\u683c\u6807\u9898\uff08 # \u53f7\uff09 \u4ee3\u7801\u5757\u6307\u5b9a\u8bed\u8a00\u7c7b\u578b \u9002\u5f53\u4f7f\u7528\u8868\u683c\u3001\u5217\u8868\u7b49 Markdown \u5143\u7d20 \u4fdd\u6301\u6587\u6863\u7ed3\u6784\u6e05\u6670 \u672c\u5730\u9884\u89c8 \u00b6 \u4fee\u6539\u6587\u6863\u540e\uff0c\u672c\u5730\u670d\u52a1\u5668\u4f1a\u81ea\u52a8\u91cd\u65b0\u52a0\u8f7d\uff0c\u5b9e\u65f6\u9884\u89c8\u66f4\u6539\u3002 \u90e8\u7f72 \u00b6 \u672c\u6587\u6863\u4f7f\u7528 GitHub Actions \u81ea\u52a8\u90e8\u7f72\u5230 GitHub Pages\u3002\u6bcf\u6b21\u63a8\u9001\u5230 main \u5206\u652f\u65f6\u4f1a\u81ea\u52a8\u89e6\u53d1\u90e8\u7f72\u6d41\u7a0b\u3002","title":"\u4f7f\u7528\u6307\u5357"},{"location":"guide/#_1","text":"","title":"\u4f7f\u7528\u6307\u5357"},{"location":"guide/#_2","text":"","title":"\u672c\u5730\u5f00\u53d1"},{"location":"guide/#_3","text":"\u5b89\u88c5 Python 3.x \u5b89\u88c5 MkDocs \u548c Material \u4e3b\u9898\uff1a pip install mkdocs-material","title":"\u73af\u5883\u51c6\u5907"},{"location":"guide/#_4","text":"\u514b\u9686\u4ed3\u5e93\uff1a git clone <repository-url> cd my-notes \u542f\u52a8\u672c\u5730\u670d\u52a1\u5668\uff1a mkdocs serve \u5728\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee http://127.0.0.1:8000 \u67e5\u770b\u6587\u6863","title":"\u672c\u5730\u8fd0\u884c"},{"location":"guide/#_5","text":"docs/ \u251c\u2500\u2500 index.md # \u9996\u9875 \u251c\u2500\u2500 guide.md # \u4f7f\u7528\u6307\u5357 \u2514\u2500\u2500 cc/ # C++ \u76f8\u5173\u6587\u6863 \u2514\u2500\u2500 mix.md # Mix \u6a21\u677f\u7f16\u7a0b","title":"\u6587\u6863\u7ed3\u6784"},{"location":"guide/#_6","text":"","title":"\u8d21\u732e\u6307\u5357"},{"location":"guide/#_7","text":"\u5728 docs \u76ee\u5f55\u4e0b\u521b\u5efa Markdown \u6587\u4ef6 \u5728 mkdocs.yml \u7684 nav \u90e8\u5206\u6dfb\u52a0\u6587\u6863\u94fe\u63a5 \u63d0\u4ea4 Pull Request","title":"\u6dfb\u52a0\u65b0\u6587\u6863"},{"location":"guide/#markdown","text":"\u4f7f\u7528 ATX \u98ce\u683c\u6807\u9898\uff08 # \u53f7\uff09 \u4ee3\u7801\u5757\u6307\u5b9a\u8bed\u8a00\u7c7b\u578b \u9002\u5f53\u4f7f\u7528\u8868\u683c\u3001\u5217\u8868\u7b49 Markdown \u5143\u7d20 \u4fdd\u6301\u6587\u6863\u7ed3\u6784\u6e05\u6670","title":"Markdown \u89c4\u8303"},{"location":"guide/#_8","text":"\u4fee\u6539\u6587\u6863\u540e\uff0c\u672c\u5730\u670d\u52a1\u5668\u4f1a\u81ea\u52a8\u91cd\u65b0\u52a0\u8f7d\uff0c\u5b9e\u65f6\u9884\u89c8\u66f4\u6539\u3002","title":"\u672c\u5730\u9884\u89c8"},{"location":"guide/#_9","text":"\u672c\u6587\u6863\u4f7f\u7528 GitHub Actions \u81ea\u52a8\u90e8\u7f72\u5230 GitHub Pages\u3002\u6bcf\u6b21\u63a8\u9001\u5230 main \u5206\u652f\u65f6\u4f1a\u81ea\u52a8\u89e6\u53d1\u90e8\u7f72\u6d41\u7a0b\u3002","title":"\u90e8\u7f72"},{"location":"bitcoin/basic/","text":"\u533a\u5757\u94fe\u7684\u5168\u6d41\u7a0b \u4e00\u3001\u533a\u5757\u94fe\u89e3\u51b3\u7684\u6838\u5fc3\u95ee\u9898 \u4e8c\u3001\u533a\u5757\u94fe\u57fa\u7840\u67b6\u6784 \u4e09\u3001\u6838\u5fc3\u7b97\u6cd5\u4e0e\u6280\u672f \u56db\u3001\u5178\u578b\u6d41\u7a0b\u793a\u4f8b\uff08\u4ee5\u6bd4\u7279\u5e01\u4e3a\u4f8b\uff09 \u4e94\u3001\u533a\u5757\u94fe\u7c7b\u578b\u5bf9\u6bd4 \u516d\u3001\u5173\u952e\u6311\u6218 \u533a\u5757\u94fe\u53ef\u80fd\u7684\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6cd5 \u4e00\u3001\u533a\u5757\u94fe\u7684\u201c\u4e0d\u53ef\u80fd\u4e09\u89d2\u201d\uff08Scalability Trilemma\uff09 \u73b0\u5b9e\u6848\u4f8b \u89e3\u51b3\u65b9\u6848\u5c1d\u8bd5 \u4e8c\u3001\u9690\u79c1\u4fdd\u62a4\u6280\u672f 1. \u57fa\u7840\u9690\u79c1\u4fdd\u62a4 2. \u9ad8\u7ea7\u5bc6\u7801\u5b66\u65b9\u6848 3. \u8054\u76df\u94fe\u9690\u79c1\u65b9\u6848 4. \u65b0\u5174\u65b9\u5411 \u4e09\u3001\u9690\u79c1\u4e0e\u76d1\u7ba1\u7684\u51b2\u7a81 \u603b\u7ed3 \u533a\u5757\u94fe\u7684\u5168\u6d41\u7a0b \u00b6 demo \u4e00\u3001\u533a\u5757\u94fe\u89e3\u51b3\u7684\u6838\u5fc3\u95ee\u9898 \u00b6 \u53bb\u4e2d\u5fc3\u5316\u4fe1\u4efb \u5728\u6ca1\u6709\u4e2d\u5fc3\u5316\u673a\u6784\uff08\u5982\u94f6\u884c\u3001\u653f\u5e9c\uff09\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7\u6570\u5b66\u548c\u5bc6\u7801\u5b66\u5b9e\u73b0\u591a\u65b9\u4e4b\u95f4\u7684\u53ef\u4fe1\u534f\u4f5c\u3002 \u9632\u7be1\u6539\u4e0e\u6570\u636e\u900f\u660e \u786e\u4fdd\u6570\u636e\u4e00\u65e6\u8bb0\u5f55\u65e0\u6cd5\u88ab\u7be1\u6539\uff0c\u6240\u6709\u53c2\u4e0e\u65b9\u53ef\u9a8c\u8bc1\u5386\u53f2\u8bb0\u5f55\u3002 \u6297\u5355\u70b9\u6545\u969c \u5206\u5e03\u5f0f\u7f51\u7edc\u907f\u514d\u4e2d\u5fc3\u5316\u7cfb\u7edf\u7684\u8106\u5f31\u6027\uff0c\u63d0\u5347\u7cfb\u7edf\u9c81\u68d2\u6027\u3002 \u4e8c\u3001\u533a\u5757\u94fe\u57fa\u7840\u67b6\u6784 \u00b6 \u7f51\u7edc\u5c42\uff08P2P\u7f51\u7edc\uff09 \u529f\u80fd \uff1a\u8282\u70b9\u95f4\u901a\u8fc7\u70b9\u5bf9\u70b9\u534f\u8bae\u901a\u4fe1\uff0c\u5e7f\u64ad\u4ea4\u6613\u548c\u533a\u5757\u3002 \u5173\u952e\u70b9 \uff1a\u65e0\u4e2d\u5fc3\u670d\u52a1\u5668\uff0c\u91c7\u7528Gossip\u534f\u8bae\u6269\u6563\u4fe1\u606f\u3002 \u6570\u636e\u5c42\uff08\u94fe\u5f0f\u7ed3\u6784\uff09 \u533a\u5757\u7ed3\u6784 \uff1a\u5305\u542b\u533a\u5757\u5934\uff08\u5143\u6570\u636e\uff09\u548c\u4ea4\u6613\u5217\u8868\u3002 \u533a\u5757\u5934\uff1a\u7248\u672c\u53f7\u3001\u65f6\u95f4\u6233\u3001\u524d\u4e00\u4e2a\u533a\u5757\u54c8\u5e0c\uff08\u5f62\u6210\u94fe\uff09\u3001Merkle\u6839\u3001Nonce\u7b49\u3002 Merkle\u6811 \uff1a\u5c06\u4ea4\u6613\u54c8\u5e0c\u9010\u5c42\u8ba1\u7b97\uff0c\u6700\u7ec8\u751f\u6210\u552f\u4e00\u6839\u54c8\u5e0c\uff0c\u7528\u4e8e\u5feb\u901f\u9a8c\u8bc1\u6570\u636e\u5b8c\u6574\u6027\u3002 \u5171\u8bc6\u5c42 \u6838\u5fc3\u7b97\u6cd5 \uff1aPoW\uff08\u5de5\u4f5c\u91cf\u8bc1\u660e\uff09\u3001PoS\uff08\u6743\u76ca\u8bc1\u660e\uff09\u3001PBFT\uff08\u62dc\u5360\u5ead\u5bb9\u9519\uff09\u7b49\uff08\u540e\u6587\u8be6\u8ff0\uff09\u3002 \u6fc0\u52b1\u5c42\uff08\u516c\u6709\u94fe\u7279\u6709\uff09 \u77ff\u5de5\u5956\u52b1 \uff1a\u901a\u8fc7\u4ee3\u5e01\u6fc0\u52b1\u8282\u70b9\u53c2\u4e0e\u5171\u8bc6\uff08\u5982\u6bd4\u7279\u5e01\u7684\u533a\u5757\u5956\u52b1+\u4ea4\u6613\u8d39\uff09\u3002 \u5408\u7ea6\u5c42\uff08\u667a\u80fd\u5408\u7ea6\uff09 \u53ef\u7f16\u7a0b\u903b\u8f91 \uff1a\u5728\u533a\u5757\u94fe\u4e0a\u81ea\u52a8\u6267\u884c\u7684\u4ee3\u7801\uff08\u5982\u4ee5\u592a\u574aSolidity\uff09\u3002 \u5e94\u7528\u5c42 DApps\uff08\u53bb\u4e2d\u5fc3\u5316\u5e94\u7528\uff09\u3001\u94b1\u5305\u3001\u6d4f\u89c8\u5668\u7b49\u3002 \u4e09\u3001\u6838\u5fc3\u7b97\u6cd5\u4e0e\u6280\u672f \u00b6 \u5bc6\u7801\u5b66\u7b97\u6cd5 \u54c8\u5e0c\u51fd\u6570 \uff08SHA-256\u3001Keccak\u7b49\uff09\uff1a\u5c06\u4efb\u610f\u6570\u636e\u6620\u5c04\u4e3a\u56fa\u5b9a\u957f\u5ea6\u5b57\u7b26\u4e32\uff0c\u5177\u5907\u5355\u5411\u6027\u548c\u6297\u78b0\u649e\u6027\u3002 \u975e\u5bf9\u79f0\u52a0\u5bc6 \uff08ECDSA\uff09\uff1a\u516c\u79c1\u94a5\u5bf9\u7528\u4e8e\u8eab\u4efd\u9a8c\u8bc1\u548c\u7b7e\u540d\u3002 Merkle\u6811 \uff1a\u9ad8\u6548\u9a8c\u8bc1\u5927\u89c4\u6a21\u6570\u636e\u5b8c\u6574\u6027\u3002 \u5171\u8bc6\u7b97\u6cd5 PoW\uff08\u5de5\u4f5c\u91cf\u8bc1\u660e\uff09 \u8282\u70b9\u901a\u8fc7\u8ba1\u7b97\u5bfb\u627e\u6ee1\u8db3\u96be\u5ea6\u7684Nonce\u503c\uff08\u5982\u6bd4\u7279\u5e01\u8981\u6c42\u54c8\u5e0c\u524d\u5bfc0\uff09\u3002 \u4ee3\u8868\uff1a\u6bd4\u7279\u5e01\u3001\u65e9\u671f\u4ee5\u592a\u574a\u3002 \u4f18\u7f3a\u70b9 \uff1a\u9ad8\u5b89\u5168\u6027\u4f46\u8017\u80fd\u5de8\u5927\u3002 PoS\uff08\u6743\u76ca\u8bc1\u660e\uff09 \u6839\u636e\u8282\u70b9\u6301\u6709\u7684\u4ee3\u5e01\u6570\u91cf\u548c\u65f6\u957f\u9009\u62e9\u51fa\u5757\u8005\u3002 \u4ee3\u8868\uff1a\u4ee5\u592a\u574a2.0\u3001Cardano\u3002 \u4f18\u5316 \uff1a\u964d\u4f4e\u80fd\u8017\uff0c\u4f46\u53ef\u80fd\u5f15\u53d1\u201c\u5bcc\u8005\u6108\u5bcc\u201d\u95ee\u9898\u3002 PBFT\uff08\u5b9e\u7528\u62dc\u5360\u5ead\u5bb9\u9519\uff09 \u8282\u70b9\u901a\u8fc7\u591a\u8f6e\u6295\u7968\u8fbe\u6210\u5171\u8bc6\uff0c\u9002\u5408\u8054\u76df\u94fe\uff08\u5982Hyperledger Fabric\uff09\u3002 \u7279\u70b9 \uff1a\u4f4e\u5ef6\u8fdf\u4f46\u8282\u70b9\u6570\u91cf\u53d7\u9650\uff08\u901a\u5e38\u2264100\uff09\u3002 \u667a\u80fd\u5408\u7ea6 \u56fe\u7075\u5b8c\u5907\u865a\u62df\u673a \uff08\u5982EVM\uff09\uff1a\u9694\u79bb\u6267\u884c\u4ee3\u7801\uff0cGas\u673a\u5236\u9632\u6b62\u65e0\u9650\u5faa\u73af\u3002 \u6269\u5c55\u6280\u672f \u5206\u7247\uff08Sharding\uff09 \uff1a\u5c06\u7f51\u7edc\u5206\u533a\u5e76\u884c\u5904\u7406\u4ea4\u6613\uff08\u4ee5\u592a\u574a2.0\uff09\u3002 Layer2 \uff1a\u94fe\u4e0b\u5904\u7406\u4ea4\u6613\uff08\u5982Rollups\u3001\u72b6\u6001\u901a\u9053\uff09\u3002 \u56db\u3001\u5178\u578b\u6d41\u7a0b\u793a\u4f8b\uff08\u4ee5\u6bd4\u7279\u5e01\u4e3a\u4f8b\uff09 \u00b6 \u4ea4\u6613\u53d1\u8d77 \u7528\u6237A\u7528\u79c1\u94a5\u7b7e\u540d\u4e00\u7b14\u8f6c\u8d26\u4ea4\u6613\uff0c\u5e7f\u64ad\u5230P2P\u7f51\u7edc\u3002 \u4ea4\u6613\u9a8c\u8bc1 \u8282\u70b9\u9a8c\u8bc1\u7b7e\u540d\u3001\u4f59\u989d\u662f\u5426\u5145\u8db3\uff0c\u4ea4\u6613\u662f\u5426\u672a\u91cd\u590d\uff08\u9632\u53cc\u82b1\uff09\u3002 \u533a\u5757\u6253\u5305 \u77ff\u5de5\u5c06\u6709\u6548\u4ea4\u6613\u6253\u5305\u6210\u533a\u5757\uff0c\u5f00\u59cbPoW\u8ba1\u7b97\u3002 \u5171\u8bc6\u8fbe\u6210 \u67d0\u77ff\u5de5\u627e\u5230Nonce\u540e\u5e7f\u64ad\u533a\u5757\uff0c\u5176\u4ed6\u8282\u70b9\u9a8c\u8bc1\u540e\u63a5\u53d7\u8be5\u533a\u5757\u3002 \u94fe\u4e0a\u786e\u8ba4 \u540e\u7eed\u533a\u5757\u7ee7\u7eed\u5ef6\u4f38\uff0c6\u6b21\u786e\u8ba4\u540e\u89c6\u4e3a\u6700\u7ec8\u786e\u8ba4\u3002 \u4e94\u3001\u533a\u5757\u94fe\u7c7b\u578b\u5bf9\u6bd4 \u00b6 \u7c7b\u578b \u516c\u6709\u94fe \u8054\u76df\u94fe \u79c1\u6709\u94fe \u53c2\u4e0e\u8005 \u4efb\u4f55\u4eba \u8bb8\u53ef\u6210\u5458\uff08\u5982\u4f01\u4e1a\uff09 \u5355\u4e00\u7ec4\u7ec7 \u5171\u8bc6\u673a\u5236 PoW/PoS\u7b49 PBFT/Raft \u4e2d\u5fc3\u5316\u5171\u8bc6 \u6027\u80fd \u4f4e\uff08\u53bb\u4e2d\u5fc3\u5316\u4ee3\u4ef7\uff09 \u4e2d-\u9ad8 \u6781\u9ad8 \u7528\u4f8b \u52a0\u5bc6\u8d27\u5e01\uff08\u6bd4\u7279\u5e01\uff09 \u4f9b\u5e94\u94fe\u91d1\u878d\uff08\u8682\u8681\u94fe\uff09 \u5185\u90e8\u5ba1\u8ba1 \u516d\u3001\u5173\u952e\u6311\u6218 \u00b6 \u4e0d\u53ef\u80fd\u4e09\u89d2 \uff1a\u53bb\u4e2d\u5fc3\u5316\u3001\u5b89\u5168\u6027\u3001\u53ef\u6269\u5c55\u6027\u96be\u4ee5\u517c\u987e\u3002 \u9690\u79c1\u4fdd\u62a4 \uff1a\u96f6\u77e5\u8bc6\u8bc1\u660e\uff08ZKP\uff09\u7b49\u65b9\u6848\u5728\u63a2\u7d22\u4e2d\u3002 \u76d1\u7ba1\u5408\u89c4 \uff1a\u5982\u4f55\u5e73\u8861\u533f\u540d\u6027\u4e0e\u53cd\u6d17\u94b1\uff08AML\uff09\u8981\u6c42\u3002 \u533a\u5757\u94fe\u53ef\u80fd\u7684\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6cd5 \u00b6 \u4e00\u3001 \u533a\u5757\u94fe\u7684\u201c\u4e0d\u53ef\u80fd\u4e09\u89d2\u201d\uff08Scalability Trilemma\uff09 \u00b6 \u533a\u5757\u94fe\u7684\u4e0d\u53ef\u80fd\u4e09\u89d2\u7531\u4ee5\u592a\u574a\u521b\u59cb\u4ebaVitalik Buterin\u63d0\u51fa\uff0c\u6307\u7cfb\u7edf\u65e0\u6cd5\u540c\u65f6\u5b8c\u7f8e\u5b9e\u73b0\u4ee5\u4e0b\u4e09\u4e2a\u7279\u6027\uff1a \u7ef4\u5ea6 \u63cf\u8ff0 \u51b2\u7a81\u70b9 \u53bb\u4e2d\u5fc3\u5316 \u8282\u70b9\u5e7f\u6cdb\u5206\u5e03\uff0c\u65e0\u5355\u4e00\u63a7\u5236\u65b9\uff08\u5982\u6bd4\u7279\u5e01\u4e0a\u4e07\u8282\u70b9\uff09\u3002 \u8282\u70b9\u8d8a\u591a\uff0c\u5171\u8bc6\u6548\u7387\u8d8a\u4f4e\uff0c\u7f51\u7edc\u5ef6\u8fdf\u8d8a\u9ad8\u3002 \u5b89\u5168\u6027 \u62b5\u6297\u653b\u51fb\uff08\u598251%\u7b97\u529b\u653b\u51fb\u3001\u53cc\u82b1\uff09\u7684\u80fd\u529b\u3002 \u9ad8\u5b89\u5168\u6027\u901a\u5e38\u9700\u8981\u727a\u7272\u6027\u80fd\uff08\u5982PoW\u7684\u7b97\u529b\u7ade\u4e89\uff09\u3002 \u53ef\u6269\u5c55\u6027 \u5904\u7406\u9ad8\u541e\u5410\u91cf\uff08TPS\uff09\u7684\u80fd\u529b\uff08\u5982Visa\u6bcf\u79d2\u5904\u74062.4\u4e07\u7b14\uff0c\u4ee5\u592a\u574a\u4ec515-30\u7b14\uff09\u3002 \u63d0\u5347TPS\u9700\u7b80\u5316\u9a8c\u8bc1\u6d41\u7a0b\uff08\u5982\u51cf\u5c11\u8282\u70b9\uff09\uff0c\u53ef\u80fd\u524a\u5f31\u53bb\u4e2d\u5fc3\u5316\u6216\u5b89\u5168\u6027\u3002 \u73b0\u5b9e\u6848\u4f8b \u00b6 \u6bd4\u7279\u5e01 \uff1a\u5f3a\u53bb\u4e2d\u5fc3\u5316+\u5f3a\u5b89\u5168\u6027\uff0c\u4f46TPS\u6781\u4f4e\uff087\u7b14/\u79d2\uff09\u3002 EOS \uff1a\u9ad8TPS\uff08\u6570\u5343\u7b14/\u79d2\uff09\uff0c\u4f46\u4ec521\u4e2a\u8d85\u7ea7\u8282\u70b9\uff0c\u4e2d\u5fc3\u5316\u4e89\u8bae\u5927\u3002 \u4ee5\u592a\u574a2.0 \uff1a\u901a\u8fc7\u5206\u7247\uff08Sharding\uff09\u548cPoS\u8bd5\u56fe\u5e73\u8861\u4e09\u8005\uff0c\u4f46\u4ecd\u9700\u59a5\u534f\u3002 \u89e3\u51b3\u65b9\u6848\u5c1d\u8bd5 \u00b6 Layer2\u6269\u5c55 \uff1a\u5c06\u4ea4\u6613\u79fb\u81f3\u94fe\u4e0b\uff08\u5982Rollups\u3001\u72b6\u6001\u901a\u9053\uff09\uff0c\u4e3b\u94fe\u4ec5\u7ed3\u7b97\u3002 \u5206\u7247\u6280\u672f \uff1a\u5c06\u7f51\u7edc\u5206\u533a\u5e76\u884c\u5904\u7406\uff08\u727a\u7272\u90e8\u5206\u5168\u5c40\u4e00\u81f4\u6027\uff09\u3002 \u6df7\u5408\u5171\u8bc6 \uff1aPoS+PBFT\u7b49\u7ec4\u5408\uff08\u5982Solana\u7684PoH\u5386\u53f2\u8bc1\u660e\uff09\u3002 \u4e8c\u3001 \u9690\u79c1\u4fdd\u62a4\u6280\u672f \u00b6 \u533a\u5757\u94fe\u7684\u900f\u660e\u6027\uff08\u5982\u6bd4\u7279\u5e01\u4ea4\u6613\u5168\u7f51\u53ef\u89c1\uff09\u4e0e\u9690\u79c1\u9700\u6c42\u77db\u76fe\uff0c\u4ee5\u4e0b\u662f\u4e3b\u6d41\u89e3\u51b3\u65b9\u6848\uff1a 1. \u57fa\u7840\u9690\u79c1\u4fdd\u62a4 \u00b6 \u4f2a\u533f\u540d\u6027 \uff1a\u5730\u5740\u4e0d\u76f4\u63a5\u5173\u8054\u771f\u5b9e\u8eab\u4efd\uff08\u4f46\u901a\u8fc7\u94fe\u4e0a\u5206\u6790\u53ef\u80fd\u8ffd\u8e2a\uff09\u3002 \u73af\u7b7e\u540d\uff08Ring Signature\uff09 \uff1a \u539f\u7406 \uff1a\u4ea4\u6613\u7b7e\u540d\u6df7\u5408\u591a\u4e2a\u7528\u6237\u7684\u516c\u94a5\uff0c\u9690\u85cf\u771f\u5b9e\u53d1\u9001\u8005\uff08\u5982\u95e8\u7f57\u5e01\uff09\u3002 \u7f3a\u70b9 \uff1a\u4ea4\u6613\u4f53\u79ef\u5927\uff0c\u9a8c\u8bc1\u6548\u7387\u4f4e\u3002 2. \u9ad8\u7ea7\u5bc6\u7801\u5b66\u65b9\u6848 \u00b6 \u96f6\u77e5\u8bc6\u8bc1\u660e\uff08ZKP\uff09 \uff1a \u539f\u7406 \uff1a\u8bc1\u660e\u65b9\u65e0\u9700\u900f\u9732\u4fe1\u606f\u672c\u8eab\uff0c\u5373\u53ef\u9a8c\u8bc1\u9648\u8ff0\u771f\u5b9e\u6027\uff08\u5982Zcash\u7684zk-SNARKs\uff09\u3002 \u7528\u4f8b \uff1a\u9690\u85cf\u4ea4\u6613\u91d1\u989d\u3001\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u3002 \u7f3a\u70b9 \uff1a\u9700\u8981\u53ef\u4fe1\u8bbe\u7f6e\uff08zk-SNARKs\uff09\u3001\u8ba1\u7b97\u8d44\u6e90\u6d88\u8017\u9ad8\u3002 \u540c\u6001\u52a0\u5bc6 \uff1a \u539f\u7406 \uff1a\u6570\u636e\u52a0\u5bc6\u72b6\u6001\u4e0b\u53ef\u8ba1\u7b97\uff08\u5982\u9690\u79c1\u667a\u80fd\u5408\u7ea6\uff09\u3002 \u6311\u6218 \uff1a\u6027\u80fd\u74f6\u9888\uff0c\u5c1a\u672a\u5927\u89c4\u6a21\u5e94\u7528\u3002 3. \u8054\u76df\u94fe\u9690\u79c1\u65b9\u6848 \u00b6 \u901a\u9053\u9694\u79bb\uff08Channel\uff09 \uff1a \u5982Hyperledger Fabric\u7684\u79c1\u6709\u901a\u9053\uff0c\u4ec5\u53c2\u4e0e\u8005\u53ef\u89c1\u4ea4\u6613\u3002 \u53ef\u4fe1\u6267\u884c\u73af\u5883\uff08TEE\uff09 \uff1a \u5229\u7528\u786c\u4ef6\uff08\u5982Intel SGX\uff09\u9694\u79bb\u654f\u611f\u8ba1\u7b97\uff08\u5982\u8682\u8681\u94fe\uff09\u3002 4. \u65b0\u5174\u65b9\u5411 \u00b6 Mimblewimble \uff08Grin/Beam\uff09\uff1a \u5408\u5e76\u4ea4\u6613\u4e2d\u95f4\u72b6\u6001\uff0c\u9690\u85cf\u91d1\u989d\u548c\u5730\u5740\u3002 ZK-Rollups \uff1a \u5c06\u5927\u91cf\u4ea4\u6613\u538b\u7f29\u4e3a\u4e00\u4e2aZKP\u8bc1\u660e\u63d0\u4ea4\u5230\u94fe\u4e0a\uff08\u517c\u987e\u9690\u79c1\u4e0e\u6269\u5c55\u6027\uff09\u3002 \u4e09\u3001 \u9690\u79c1\u4e0e\u76d1\u7ba1\u7684\u51b2\u7a81 \u00b6 \u9690\u79c1\u5e01\u56f0\u5883 \uff1a\u95e8\u7f57\u5e01\uff08Monero\uff09\u3001Zcash\u7b49\u56e0\u5f3a\u533f\u540d\u6027\u88ab\u90e8\u5206\u4ea4\u6613\u6240\u4e0b\u67b6\u3002 \u5408\u89c4\u65b9\u6848 \uff1a \u9009\u62e9\u6027\u62ab\u9732 \uff1a\u7528\u6237\u53ef\u5411\u76d1\u7ba1\u65b9\u516c\u5f00\u7279\u5b9a\u4ea4\u6613\uff08\u5982Zcash\u7684\u201c\u67e5\u770b\u5bc6\u94a5\u201d\uff09\u3002 KYC\u96c6\u6210 \uff1a\u8054\u76df\u94fe\u8981\u6c42\u53c2\u4e0e\u8005\u5b9e\u540d\uff08\u5982R3 Corda\uff09\u3002 \u603b\u7ed3 \u00b6 \u4e0d\u53ef\u80fd\u4e09\u89d2 \u662f\u533a\u5757\u94fe\u8bbe\u8ba1\u7684\u6839\u672c\u7ea6\u675f\uff0c\u9700\u6839\u636e\u573a\u666f\u6743\u8861\uff08\u5982\u91d1\u878d\u7ed3\u7b97\u91cd\u5b89\u5168\uff0c\u6e38\u620fDApp\u91cd\u6269\u5c55\u6027\uff09\u3002 \u9690\u79c1\u4fdd\u62a4 \u6280\u672f\u5feb\u901f\u53d1\u5c55\uff0c\u4f46\u9700\u5e73\u8861\u6027\u80fd\u3001\u6613\u7528\u6027\u548c\u5408\u89c4\u6027\u3002 \u672a\u6765\u8d8b\u52bf \uff1aLayer2+ZK\u6280\u672f\u53ef\u80fd\u662f\u7a81\u7834\u4e09\u89d2\u548c\u9690\u79c1\u96be\u9898\u7684\u5173\u952e\uff08\u5982StarkNet\u3001Aztec\uff09\u3002","title":"Basic"},{"location":"bitcoin/basic/#_1","text":"demo","title":"\u533a\u5757\u94fe\u7684\u5168\u6d41\u7a0b"},{"location":"bitcoin/basic/#_2","text":"\u53bb\u4e2d\u5fc3\u5316\u4fe1\u4efb \u5728\u6ca1\u6709\u4e2d\u5fc3\u5316\u673a\u6784\uff08\u5982\u94f6\u884c\u3001\u653f\u5e9c\uff09\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7\u6570\u5b66\u548c\u5bc6\u7801\u5b66\u5b9e\u73b0\u591a\u65b9\u4e4b\u95f4\u7684\u53ef\u4fe1\u534f\u4f5c\u3002 \u9632\u7be1\u6539\u4e0e\u6570\u636e\u900f\u660e \u786e\u4fdd\u6570\u636e\u4e00\u65e6\u8bb0\u5f55\u65e0\u6cd5\u88ab\u7be1\u6539\uff0c\u6240\u6709\u53c2\u4e0e\u65b9\u53ef\u9a8c\u8bc1\u5386\u53f2\u8bb0\u5f55\u3002 \u6297\u5355\u70b9\u6545\u969c \u5206\u5e03\u5f0f\u7f51\u7edc\u907f\u514d\u4e2d\u5fc3\u5316\u7cfb\u7edf\u7684\u8106\u5f31\u6027\uff0c\u63d0\u5347\u7cfb\u7edf\u9c81\u68d2\u6027\u3002","title":"\u4e00\u3001\u533a\u5757\u94fe\u89e3\u51b3\u7684\u6838\u5fc3\u95ee\u9898"},{"location":"bitcoin/basic/#_3","text":"\u7f51\u7edc\u5c42\uff08P2P\u7f51\u7edc\uff09 \u529f\u80fd \uff1a\u8282\u70b9\u95f4\u901a\u8fc7\u70b9\u5bf9\u70b9\u534f\u8bae\u901a\u4fe1\uff0c\u5e7f\u64ad\u4ea4\u6613\u548c\u533a\u5757\u3002 \u5173\u952e\u70b9 \uff1a\u65e0\u4e2d\u5fc3\u670d\u52a1\u5668\uff0c\u91c7\u7528Gossip\u534f\u8bae\u6269\u6563\u4fe1\u606f\u3002 \u6570\u636e\u5c42\uff08\u94fe\u5f0f\u7ed3\u6784\uff09 \u533a\u5757\u7ed3\u6784 \uff1a\u5305\u542b\u533a\u5757\u5934\uff08\u5143\u6570\u636e\uff09\u548c\u4ea4\u6613\u5217\u8868\u3002 \u533a\u5757\u5934\uff1a\u7248\u672c\u53f7\u3001\u65f6\u95f4\u6233\u3001\u524d\u4e00\u4e2a\u533a\u5757\u54c8\u5e0c\uff08\u5f62\u6210\u94fe\uff09\u3001Merkle\u6839\u3001Nonce\u7b49\u3002 Merkle\u6811 \uff1a\u5c06\u4ea4\u6613\u54c8\u5e0c\u9010\u5c42\u8ba1\u7b97\uff0c\u6700\u7ec8\u751f\u6210\u552f\u4e00\u6839\u54c8\u5e0c\uff0c\u7528\u4e8e\u5feb\u901f\u9a8c\u8bc1\u6570\u636e\u5b8c\u6574\u6027\u3002 \u5171\u8bc6\u5c42 \u6838\u5fc3\u7b97\u6cd5 \uff1aPoW\uff08\u5de5\u4f5c\u91cf\u8bc1\u660e\uff09\u3001PoS\uff08\u6743\u76ca\u8bc1\u660e\uff09\u3001PBFT\uff08\u62dc\u5360\u5ead\u5bb9\u9519\uff09\u7b49\uff08\u540e\u6587\u8be6\u8ff0\uff09\u3002 \u6fc0\u52b1\u5c42\uff08\u516c\u6709\u94fe\u7279\u6709\uff09 \u77ff\u5de5\u5956\u52b1 \uff1a\u901a\u8fc7\u4ee3\u5e01\u6fc0\u52b1\u8282\u70b9\u53c2\u4e0e\u5171\u8bc6\uff08\u5982\u6bd4\u7279\u5e01\u7684\u533a\u5757\u5956\u52b1+\u4ea4\u6613\u8d39\uff09\u3002 \u5408\u7ea6\u5c42\uff08\u667a\u80fd\u5408\u7ea6\uff09 \u53ef\u7f16\u7a0b\u903b\u8f91 \uff1a\u5728\u533a\u5757\u94fe\u4e0a\u81ea\u52a8\u6267\u884c\u7684\u4ee3\u7801\uff08\u5982\u4ee5\u592a\u574aSolidity\uff09\u3002 \u5e94\u7528\u5c42 DApps\uff08\u53bb\u4e2d\u5fc3\u5316\u5e94\u7528\uff09\u3001\u94b1\u5305\u3001\u6d4f\u89c8\u5668\u7b49\u3002","title":"\u4e8c\u3001\u533a\u5757\u94fe\u57fa\u7840\u67b6\u6784"},{"location":"bitcoin/basic/#_4","text":"\u5bc6\u7801\u5b66\u7b97\u6cd5 \u54c8\u5e0c\u51fd\u6570 \uff08SHA-256\u3001Keccak\u7b49\uff09\uff1a\u5c06\u4efb\u610f\u6570\u636e\u6620\u5c04\u4e3a\u56fa\u5b9a\u957f\u5ea6\u5b57\u7b26\u4e32\uff0c\u5177\u5907\u5355\u5411\u6027\u548c\u6297\u78b0\u649e\u6027\u3002 \u975e\u5bf9\u79f0\u52a0\u5bc6 \uff08ECDSA\uff09\uff1a\u516c\u79c1\u94a5\u5bf9\u7528\u4e8e\u8eab\u4efd\u9a8c\u8bc1\u548c\u7b7e\u540d\u3002 Merkle\u6811 \uff1a\u9ad8\u6548\u9a8c\u8bc1\u5927\u89c4\u6a21\u6570\u636e\u5b8c\u6574\u6027\u3002 \u5171\u8bc6\u7b97\u6cd5 PoW\uff08\u5de5\u4f5c\u91cf\u8bc1\u660e\uff09 \u8282\u70b9\u901a\u8fc7\u8ba1\u7b97\u5bfb\u627e\u6ee1\u8db3\u96be\u5ea6\u7684Nonce\u503c\uff08\u5982\u6bd4\u7279\u5e01\u8981\u6c42\u54c8\u5e0c\u524d\u5bfc0\uff09\u3002 \u4ee3\u8868\uff1a\u6bd4\u7279\u5e01\u3001\u65e9\u671f\u4ee5\u592a\u574a\u3002 \u4f18\u7f3a\u70b9 \uff1a\u9ad8\u5b89\u5168\u6027\u4f46\u8017\u80fd\u5de8\u5927\u3002 PoS\uff08\u6743\u76ca\u8bc1\u660e\uff09 \u6839\u636e\u8282\u70b9\u6301\u6709\u7684\u4ee3\u5e01\u6570\u91cf\u548c\u65f6\u957f\u9009\u62e9\u51fa\u5757\u8005\u3002 \u4ee3\u8868\uff1a\u4ee5\u592a\u574a2.0\u3001Cardano\u3002 \u4f18\u5316 \uff1a\u964d\u4f4e\u80fd\u8017\uff0c\u4f46\u53ef\u80fd\u5f15\u53d1\u201c\u5bcc\u8005\u6108\u5bcc\u201d\u95ee\u9898\u3002 PBFT\uff08\u5b9e\u7528\u62dc\u5360\u5ead\u5bb9\u9519\uff09 \u8282\u70b9\u901a\u8fc7\u591a\u8f6e\u6295\u7968\u8fbe\u6210\u5171\u8bc6\uff0c\u9002\u5408\u8054\u76df\u94fe\uff08\u5982Hyperledger Fabric\uff09\u3002 \u7279\u70b9 \uff1a\u4f4e\u5ef6\u8fdf\u4f46\u8282\u70b9\u6570\u91cf\u53d7\u9650\uff08\u901a\u5e38\u2264100\uff09\u3002 \u667a\u80fd\u5408\u7ea6 \u56fe\u7075\u5b8c\u5907\u865a\u62df\u673a \uff08\u5982EVM\uff09\uff1a\u9694\u79bb\u6267\u884c\u4ee3\u7801\uff0cGas\u673a\u5236\u9632\u6b62\u65e0\u9650\u5faa\u73af\u3002 \u6269\u5c55\u6280\u672f \u5206\u7247\uff08Sharding\uff09 \uff1a\u5c06\u7f51\u7edc\u5206\u533a\u5e76\u884c\u5904\u7406\u4ea4\u6613\uff08\u4ee5\u592a\u574a2.0\uff09\u3002 Layer2 \uff1a\u94fe\u4e0b\u5904\u7406\u4ea4\u6613\uff08\u5982Rollups\u3001\u72b6\u6001\u901a\u9053\uff09\u3002","title":"\u4e09\u3001\u6838\u5fc3\u7b97\u6cd5\u4e0e\u6280\u672f"},{"location":"bitcoin/basic/#_5","text":"\u4ea4\u6613\u53d1\u8d77 \u7528\u6237A\u7528\u79c1\u94a5\u7b7e\u540d\u4e00\u7b14\u8f6c\u8d26\u4ea4\u6613\uff0c\u5e7f\u64ad\u5230P2P\u7f51\u7edc\u3002 \u4ea4\u6613\u9a8c\u8bc1 \u8282\u70b9\u9a8c\u8bc1\u7b7e\u540d\u3001\u4f59\u989d\u662f\u5426\u5145\u8db3\uff0c\u4ea4\u6613\u662f\u5426\u672a\u91cd\u590d\uff08\u9632\u53cc\u82b1\uff09\u3002 \u533a\u5757\u6253\u5305 \u77ff\u5de5\u5c06\u6709\u6548\u4ea4\u6613\u6253\u5305\u6210\u533a\u5757\uff0c\u5f00\u59cbPoW\u8ba1\u7b97\u3002 \u5171\u8bc6\u8fbe\u6210 \u67d0\u77ff\u5de5\u627e\u5230Nonce\u540e\u5e7f\u64ad\u533a\u5757\uff0c\u5176\u4ed6\u8282\u70b9\u9a8c\u8bc1\u540e\u63a5\u53d7\u8be5\u533a\u5757\u3002 \u94fe\u4e0a\u786e\u8ba4 \u540e\u7eed\u533a\u5757\u7ee7\u7eed\u5ef6\u4f38\uff0c6\u6b21\u786e\u8ba4\u540e\u89c6\u4e3a\u6700\u7ec8\u786e\u8ba4\u3002","title":"\u56db\u3001\u5178\u578b\u6d41\u7a0b\u793a\u4f8b\uff08\u4ee5\u6bd4\u7279\u5e01\u4e3a\u4f8b\uff09"},{"location":"bitcoin/basic/#_6","text":"\u7c7b\u578b \u516c\u6709\u94fe \u8054\u76df\u94fe \u79c1\u6709\u94fe \u53c2\u4e0e\u8005 \u4efb\u4f55\u4eba \u8bb8\u53ef\u6210\u5458\uff08\u5982\u4f01\u4e1a\uff09 \u5355\u4e00\u7ec4\u7ec7 \u5171\u8bc6\u673a\u5236 PoW/PoS\u7b49 PBFT/Raft \u4e2d\u5fc3\u5316\u5171\u8bc6 \u6027\u80fd \u4f4e\uff08\u53bb\u4e2d\u5fc3\u5316\u4ee3\u4ef7\uff09 \u4e2d-\u9ad8 \u6781\u9ad8 \u7528\u4f8b \u52a0\u5bc6\u8d27\u5e01\uff08\u6bd4\u7279\u5e01\uff09 \u4f9b\u5e94\u94fe\u91d1\u878d\uff08\u8682\u8681\u94fe\uff09 \u5185\u90e8\u5ba1\u8ba1","title":"\u4e94\u3001\u533a\u5757\u94fe\u7c7b\u578b\u5bf9\u6bd4"},{"location":"bitcoin/basic/#_7","text":"\u4e0d\u53ef\u80fd\u4e09\u89d2 \uff1a\u53bb\u4e2d\u5fc3\u5316\u3001\u5b89\u5168\u6027\u3001\u53ef\u6269\u5c55\u6027\u96be\u4ee5\u517c\u987e\u3002 \u9690\u79c1\u4fdd\u62a4 \uff1a\u96f6\u77e5\u8bc6\u8bc1\u660e\uff08ZKP\uff09\u7b49\u65b9\u6848\u5728\u63a2\u7d22\u4e2d\u3002 \u76d1\u7ba1\u5408\u89c4 \uff1a\u5982\u4f55\u5e73\u8861\u533f\u540d\u6027\u4e0e\u53cd\u6d17\u94b1\uff08AML\uff09\u8981\u6c42\u3002","title":"\u516d\u3001\u5173\u952e\u6311\u6218"},{"location":"bitcoin/basic/#_8","text":"","title":"\u533a\u5757\u94fe\u53ef\u80fd\u7684\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6cd5"},{"location":"bitcoin/basic/#scalability-trilemma","text":"\u533a\u5757\u94fe\u7684\u4e0d\u53ef\u80fd\u4e09\u89d2\u7531\u4ee5\u592a\u574a\u521b\u59cb\u4ebaVitalik Buterin\u63d0\u51fa\uff0c\u6307\u7cfb\u7edf\u65e0\u6cd5\u540c\u65f6\u5b8c\u7f8e\u5b9e\u73b0\u4ee5\u4e0b\u4e09\u4e2a\u7279\u6027\uff1a \u7ef4\u5ea6 \u63cf\u8ff0 \u51b2\u7a81\u70b9 \u53bb\u4e2d\u5fc3\u5316 \u8282\u70b9\u5e7f\u6cdb\u5206\u5e03\uff0c\u65e0\u5355\u4e00\u63a7\u5236\u65b9\uff08\u5982\u6bd4\u7279\u5e01\u4e0a\u4e07\u8282\u70b9\uff09\u3002 \u8282\u70b9\u8d8a\u591a\uff0c\u5171\u8bc6\u6548\u7387\u8d8a\u4f4e\uff0c\u7f51\u7edc\u5ef6\u8fdf\u8d8a\u9ad8\u3002 \u5b89\u5168\u6027 \u62b5\u6297\u653b\u51fb\uff08\u598251%\u7b97\u529b\u653b\u51fb\u3001\u53cc\u82b1\uff09\u7684\u80fd\u529b\u3002 \u9ad8\u5b89\u5168\u6027\u901a\u5e38\u9700\u8981\u727a\u7272\u6027\u80fd\uff08\u5982PoW\u7684\u7b97\u529b\u7ade\u4e89\uff09\u3002 \u53ef\u6269\u5c55\u6027 \u5904\u7406\u9ad8\u541e\u5410\u91cf\uff08TPS\uff09\u7684\u80fd\u529b\uff08\u5982Visa\u6bcf\u79d2\u5904\u74062.4\u4e07\u7b14\uff0c\u4ee5\u592a\u574a\u4ec515-30\u7b14\uff09\u3002 \u63d0\u5347TPS\u9700\u7b80\u5316\u9a8c\u8bc1\u6d41\u7a0b\uff08\u5982\u51cf\u5c11\u8282\u70b9\uff09\uff0c\u53ef\u80fd\u524a\u5f31\u53bb\u4e2d\u5fc3\u5316\u6216\u5b89\u5168\u6027\u3002","title":"\u4e00\u3001\u533a\u5757\u94fe\u7684\u201c\u4e0d\u53ef\u80fd\u4e09\u89d2\u201d\uff08Scalability Trilemma\uff09"},{"location":"bitcoin/basic/#_9","text":"\u6bd4\u7279\u5e01 \uff1a\u5f3a\u53bb\u4e2d\u5fc3\u5316+\u5f3a\u5b89\u5168\u6027\uff0c\u4f46TPS\u6781\u4f4e\uff087\u7b14/\u79d2\uff09\u3002 EOS \uff1a\u9ad8TPS\uff08\u6570\u5343\u7b14/\u79d2\uff09\uff0c\u4f46\u4ec521\u4e2a\u8d85\u7ea7\u8282\u70b9\uff0c\u4e2d\u5fc3\u5316\u4e89\u8bae\u5927\u3002 \u4ee5\u592a\u574a2.0 \uff1a\u901a\u8fc7\u5206\u7247\uff08Sharding\uff09\u548cPoS\u8bd5\u56fe\u5e73\u8861\u4e09\u8005\uff0c\u4f46\u4ecd\u9700\u59a5\u534f\u3002","title":"\u73b0\u5b9e\u6848\u4f8b"},{"location":"bitcoin/basic/#_10","text":"Layer2\u6269\u5c55 \uff1a\u5c06\u4ea4\u6613\u79fb\u81f3\u94fe\u4e0b\uff08\u5982Rollups\u3001\u72b6\u6001\u901a\u9053\uff09\uff0c\u4e3b\u94fe\u4ec5\u7ed3\u7b97\u3002 \u5206\u7247\u6280\u672f \uff1a\u5c06\u7f51\u7edc\u5206\u533a\u5e76\u884c\u5904\u7406\uff08\u727a\u7272\u90e8\u5206\u5168\u5c40\u4e00\u81f4\u6027\uff09\u3002 \u6df7\u5408\u5171\u8bc6 \uff1aPoS+PBFT\u7b49\u7ec4\u5408\uff08\u5982Solana\u7684PoH\u5386\u53f2\u8bc1\u660e\uff09\u3002","title":"\u89e3\u51b3\u65b9\u6848\u5c1d\u8bd5"},{"location":"bitcoin/basic/#_11","text":"\u533a\u5757\u94fe\u7684\u900f\u660e\u6027\uff08\u5982\u6bd4\u7279\u5e01\u4ea4\u6613\u5168\u7f51\u53ef\u89c1\uff09\u4e0e\u9690\u79c1\u9700\u6c42\u77db\u76fe\uff0c\u4ee5\u4e0b\u662f\u4e3b\u6d41\u89e3\u51b3\u65b9\u6848\uff1a","title":"\u4e8c\u3001\u9690\u79c1\u4fdd\u62a4\u6280\u672f"},{"location":"bitcoin/basic/#1","text":"\u4f2a\u533f\u540d\u6027 \uff1a\u5730\u5740\u4e0d\u76f4\u63a5\u5173\u8054\u771f\u5b9e\u8eab\u4efd\uff08\u4f46\u901a\u8fc7\u94fe\u4e0a\u5206\u6790\u53ef\u80fd\u8ffd\u8e2a\uff09\u3002 \u73af\u7b7e\u540d\uff08Ring Signature\uff09 \uff1a \u539f\u7406 \uff1a\u4ea4\u6613\u7b7e\u540d\u6df7\u5408\u591a\u4e2a\u7528\u6237\u7684\u516c\u94a5\uff0c\u9690\u85cf\u771f\u5b9e\u53d1\u9001\u8005\uff08\u5982\u95e8\u7f57\u5e01\uff09\u3002 \u7f3a\u70b9 \uff1a\u4ea4\u6613\u4f53\u79ef\u5927\uff0c\u9a8c\u8bc1\u6548\u7387\u4f4e\u3002","title":"1. \u57fa\u7840\u9690\u79c1\u4fdd\u62a4"},{"location":"bitcoin/basic/#2","text":"\u96f6\u77e5\u8bc6\u8bc1\u660e\uff08ZKP\uff09 \uff1a \u539f\u7406 \uff1a\u8bc1\u660e\u65b9\u65e0\u9700\u900f\u9732\u4fe1\u606f\u672c\u8eab\uff0c\u5373\u53ef\u9a8c\u8bc1\u9648\u8ff0\u771f\u5b9e\u6027\uff08\u5982Zcash\u7684zk-SNARKs\uff09\u3002 \u7528\u4f8b \uff1a\u9690\u85cf\u4ea4\u6613\u91d1\u989d\u3001\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u3002 \u7f3a\u70b9 \uff1a\u9700\u8981\u53ef\u4fe1\u8bbe\u7f6e\uff08zk-SNARKs\uff09\u3001\u8ba1\u7b97\u8d44\u6e90\u6d88\u8017\u9ad8\u3002 \u540c\u6001\u52a0\u5bc6 \uff1a \u539f\u7406 \uff1a\u6570\u636e\u52a0\u5bc6\u72b6\u6001\u4e0b\u53ef\u8ba1\u7b97\uff08\u5982\u9690\u79c1\u667a\u80fd\u5408\u7ea6\uff09\u3002 \u6311\u6218 \uff1a\u6027\u80fd\u74f6\u9888\uff0c\u5c1a\u672a\u5927\u89c4\u6a21\u5e94\u7528\u3002","title":"2. \u9ad8\u7ea7\u5bc6\u7801\u5b66\u65b9\u6848"},{"location":"bitcoin/basic/#3","text":"\u901a\u9053\u9694\u79bb\uff08Channel\uff09 \uff1a \u5982Hyperledger Fabric\u7684\u79c1\u6709\u901a\u9053\uff0c\u4ec5\u53c2\u4e0e\u8005\u53ef\u89c1\u4ea4\u6613\u3002 \u53ef\u4fe1\u6267\u884c\u73af\u5883\uff08TEE\uff09 \uff1a \u5229\u7528\u786c\u4ef6\uff08\u5982Intel SGX\uff09\u9694\u79bb\u654f\u611f\u8ba1\u7b97\uff08\u5982\u8682\u8681\u94fe\uff09\u3002","title":"3. \u8054\u76df\u94fe\u9690\u79c1\u65b9\u6848"},{"location":"bitcoin/basic/#4","text":"Mimblewimble \uff08Grin/Beam\uff09\uff1a \u5408\u5e76\u4ea4\u6613\u4e2d\u95f4\u72b6\u6001\uff0c\u9690\u85cf\u91d1\u989d\u548c\u5730\u5740\u3002 ZK-Rollups \uff1a \u5c06\u5927\u91cf\u4ea4\u6613\u538b\u7f29\u4e3a\u4e00\u4e2aZKP\u8bc1\u660e\u63d0\u4ea4\u5230\u94fe\u4e0a\uff08\u517c\u987e\u9690\u79c1\u4e0e\u6269\u5c55\u6027\uff09\u3002","title":"4. \u65b0\u5174\u65b9\u5411"},{"location":"bitcoin/basic/#_12","text":"\u9690\u79c1\u5e01\u56f0\u5883 \uff1a\u95e8\u7f57\u5e01\uff08Monero\uff09\u3001Zcash\u7b49\u56e0\u5f3a\u533f\u540d\u6027\u88ab\u90e8\u5206\u4ea4\u6613\u6240\u4e0b\u67b6\u3002 \u5408\u89c4\u65b9\u6848 \uff1a \u9009\u62e9\u6027\u62ab\u9732 \uff1a\u7528\u6237\u53ef\u5411\u76d1\u7ba1\u65b9\u516c\u5f00\u7279\u5b9a\u4ea4\u6613\uff08\u5982Zcash\u7684\u201c\u67e5\u770b\u5bc6\u94a5\u201d\uff09\u3002 KYC\u96c6\u6210 \uff1a\u8054\u76df\u94fe\u8981\u6c42\u53c2\u4e0e\u8005\u5b9e\u540d\uff08\u5982R3 Corda\uff09\u3002","title":"\u4e09\u3001\u9690\u79c1\u4e0e\u76d1\u7ba1\u7684\u51b2\u7a81"},{"location":"bitcoin/basic/#_13","text":"\u4e0d\u53ef\u80fd\u4e09\u89d2 \u662f\u533a\u5757\u94fe\u8bbe\u8ba1\u7684\u6839\u672c\u7ea6\u675f\uff0c\u9700\u6839\u636e\u573a\u666f\u6743\u8861\uff08\u5982\u91d1\u878d\u7ed3\u7b97\u91cd\u5b89\u5168\uff0c\u6e38\u620fDApp\u91cd\u6269\u5c55\u6027\uff09\u3002 \u9690\u79c1\u4fdd\u62a4 \u6280\u672f\u5feb\u901f\u53d1\u5c55\uff0c\u4f46\u9700\u5e73\u8861\u6027\u80fd\u3001\u6613\u7528\u6027\u548c\u5408\u89c4\u6027\u3002 \u672a\u6765\u8d8b\u52bf \uff1aLayer2+ZK\u6280\u672f\u53ef\u80fd\u662f\u7a81\u7834\u4e09\u89d2\u548c\u9690\u79c1\u96be\u9898\u7684\u5173\u952e\uff08\u5982StarkNet\u3001Aztec\uff09\u3002","title":"\u603b\u7ed3"},{"location":"bitcoin/norms/","text":"self financial wallet : Self Financial\uff08\u4e00\u5bb6\u7f8e\u56fd\u91d1\u878d\u79d1\u6280\u516c\u53f8\uff09\u63d0\u4f9b\u7684\u6570\u5b57\u94b1\u5305\u6216\u91d1\u878d\u8d26\u6237\u670d\u52a1 block wallet : \u57fa\u4e8e\u533a\u5757\u94fe\u7684 \u53bb\u4e2d\u5fc3\u5316\u52a0\u5bc6\u8d27\u5e01\u94b1\u5305\uff08Decentralized Wallet\uff09 Binance : \u5e01\u5b89\uff08Binance\uff09\u662f\u4e00\u5bb6\u5168\u7403\u9886\u5148\u7684\u52a0\u5bc6\u8d27\u5e01\u4ea4\u6613\u6240\uff0c\u63d0\u4f9b\u6bd4\u7279\u5e01\u3001\u4ee5\u592a\u574a\u7b49\u591a\u79cd\u52a0\u5bc6\u8d27\u5e01\u7684\u4ea4\u6613\u670d\u52a1\u3002 ultimus : \u4f18\u7c73\uff08UltiMUS\uff09\u662f\u4e00\u5bb6\u4e13\u6ce8\u4e8e\u63d0\u4f9b\u6570\u5b57\u94b1\u5305\u670d\u52a1\u7684\u516c\u53f8\u3002 poolin : \u6c60\u94f6\uff08Poolin\uff09\u662f\u4e00\u5bb6\u63d0\u4f9b\u6570\u5b57\u94b1\u5305\u670d\u52a1\u7684\u516c\u53f8\u3002 \u7b26\u6587 : \u7b26\u6587\uff08Rune\uff09\u662f\u6bd4\u7279\u5e01\u751f\u6001\u4e2d\u7684\u4e00\u79cd \u65b0\u578b\u4ee3\u5e01\u534f\u8bae\uff0c\u7531\u6bd4\u7279\u5e01\u5f00\u53d1\u8005 Casey Rodarmor \u63d0\u51fa\uff082023\u5e74\uff09\u3002\u57fa\u4e8e\u6bd4\u7279\u5e01 UTXO \u6a21\u578b\uff08\u7c7b\u4f3cOrdinals\uff0c\u4f46\u66f4\u9ad8\u6548\uff09,\u8f7b\u91cf\u7ea7\u4ee3\u5e01\u6807\u51c6\uff1a\u6bd4 BRC-20 \u66f4\u8282\u7701\u533a\u5757\u7a7a\u95f4,\u65e0\u9884\u6316\u3001\u516c\u5e73\u53d1\u884c\uff1a\u907f\u514d\u5927\u91cf\u4ee3\u5e01\u88ab\u65e9\u671f\u73a9\u5bb6\u5784\u65ad. Poolin\uff08\u5e01\u5370\uff09\u548c Antpool\uff08\u8682\u8681\u77ff\u6c60\uff09\u7684\u5173\u7cfb: \u65e0\u76f4\u63a5\u80a1\u6743\u5173\u7cfb\uff1aPoolin \u662f\u72ec\u7acb\u516c\u53f8\uff0c\u4e0d\u5c5e\u4e8e\u6bd4\u7279\u5927\u9646\u6216 Antpool\u3002\u7ade\u4e89\u5173\u7cfb\uff1a\u4e24\u8005\u5728\u77ff\u6c60\u5e02\u573a\u76f4\u63a5\u7ade\u4e89\uff0c\u4f46 Antpool \u6709\u6bd4\u7279\u5927\u9646\u7684\u7b97\u529b\u4f18\u52bf\u3002 PoS \u4ee3\u5e01 : PoS\uff08Proof of Stake\uff0c\u6743\u76ca\u8bc1\u660e\uff09\u4ee3\u5e01 \u662f\u6307\u91c7\u7528 \u6743\u76ca\u8bc1\u660e\u673a\u5236 \u7684\u533a\u5757\u94fe\u7f51\u7edc\u53d1\u884c\u7684\u52a0\u5bc6\u8d27\u5e01\u3002 PoW \u4ee3\u5e01 : PoW\uff08Proof of Work\uff0c\u5de5\u4f5c\u91cf\u8bc1\u660e\uff09\u4ee3\u5e01 \u662f\u6307\u91c7\u7528 \u5de5\u4f5c\u91cf\u8bc1\u660e\u673a\u5236 \u7684\u533a\u5757\u94fe\u7f51\u7edc\u53d1\u884c\u7684\u52a0\u5bc6\u8d27\u5e01\u3002 PoS \u7684\u6838\u5fc3\u673a\u5236 \uff081\uff09\u5982\u4f55\u8fd0\u4f5c\uff1f \u8d28\u62bc\uff08Staking\uff09\uff1a\u7528\u6237\u5c06\u4ee3\u5e01\u9501\u5b9a\u5728\u94b1\u5305\u6216\u667a\u80fd\u5408\u7ea6\u4e2d\uff0c\u6210\u4e3a\u7f51\u7edc\u9a8c\u8bc1\u8005\uff08Validator\uff09\u3002 \u51fa\u5757\u4e0e\u9a8c\u8bc1\uff1a\u7cfb\u7edf\u6309\u8d28\u62bc\u6bd4\u4f8b\u9009\u62e9\u9a8c\u8bc1\u8005\uff0c\u8d1f\u8d23\u6253\u5305\u4ea4\u6613\u5e76\u786e\u8ba4\u65b0\u533a\u5757\u3002 \u6536\u76ca\u5956\u52b1\uff1a\u9a8c\u8bc1\u8005\u83b7\u5f97\u65b0\u4ee3\u5e01\uff08\u901a\u80c0\u5956\u52b1\uff09\u548c\u4ea4\u6613\u624b\u7eed\u8d39\u3002 DAO \u6cbb\u7406 DAO\uff08Decentralized Autonomous Organization\uff0c\u53bb\u4e2d\u5fc3\u5316\u81ea\u6cbb\u7ec4\u7ec7\uff09 \u662f\u4e00\u79cd\u57fa\u4e8e\u533a\u5757\u94fe\u7684\u6cbb\u7406\u6a21\u5f0f\uff0c\u901a\u8fc7\u667a\u80fd\u5408\u7ea6\u548c\u4ee3\u5e01\u6295\u7968\u5b9e\u73b0 \u65e0\u9700\u4e2d\u5fc3\u5316\u7ba1\u7406\u7684\u96c6\u4f53\u51b3\u7b56\u3002 pledge lending Pledge Lending \u662f\u4e00\u79cd \u52a0\u5bc6\u8d27\u5e01\u501f\u8d37\u6a21\u5f0f\uff0c\u7528\u6237\u901a\u8fc7\u8d28\u62bc\uff08\u9501\u5b9a\uff09\u6570\u5b57\u8d44\u4ea7\u4f5c\u4e3a\u62b5\u62bc\u54c1\uff0c\u501f\u51fa\u5176\u4ed6\u52a0\u5bc6\u8d27\u5e01\u6216\u6cd5\u5e01\u3002\u8fd9\u79cd\u6a21\u5f0f\u5728 DeFi\uff08\u53bb\u4e2d\u5fc3\u5316\u91d1\u878d\uff09\u548c CeFi\uff08\u4e2d\u5fc3\u5316\u91d1\u878d\uff09\u5e73\u53f0\u4e2d\u5e7f\u6cdb\u5e94\u7528\uff0c\u6838\u5fc3\u903b\u8f91\u662f \u201c\u62b5\u62bc\u501f\u6b3e\uff0c\u6e05\u7b97\u4fdd\u5b89\u5168\u201d\u3002","title":"Norms"},{"location":"bitcoin/problem/","text":"\u533a\u5757\u94fe\u95ee\u9898\u89e3\u51b3\u65b9\u6cd5 \u00b6 \u6700\u8fd1\u52a0\u5bc6\u8d27\u5e01\u5e02\u573a\u6d8c\u73b0\u4e86\u8bb8\u591a\u65b0\u9879\u76ee\uff0c\u8986\u76d6\u4e86**Layer1\u516c\u94fe\u3001Layer2\u6269\u5c55\u3001DeFi\u3001AI+\u533a\u5757\u94fe\u3001Memecoin**\u7b49\u591a\u4e2a\u9886\u57df\u3002\u4ee5\u4e0b\u662f2023-2024\u5e74\u70ed\u5ea6\u8f83\u9ad8\u7684\u65b0\u5e01\u79cd\u53ca\u5176\u80cc\u540e\u7684\u903b\u8f91\uff1a \u4e00\u3001 \u65b0\u516c\u94fe\uff1a\u9ad8\u6027\u80fd\u4e0e\u6a21\u5757\u5316 \u00b6 Sui (SUI) & Aptos (APT) \u5b9a\u4f4d \uff1a\u9ad8\u6027\u80fdLayer1\uff0c\u4e3b\u6253Move\u8bed\u8a00\uff08\u539fFacebook Diem\u56e2\u961f\u5f00\u53d1\uff09\u3002 \u6280\u672f\u4eae\u70b9 \uff1a\u5e76\u884c\u6267\u884c\u4ea4\u6613\uff08\u7c7b\u4f3cSolana\uff09\uff0cTPS\u53ef\u8fbe\u6570\u5343\u3002 \u7206\u706b\u539f\u56e0 \uff1a\u8d44\u672c\u80cc\u4e66\uff08a16z\u3001Binance Labs\u6295\u8d44\uff09\uff0c\u5bf9\u6807Solana\u4f46\u66f4\u5f3a\u8c03\u5b89\u5168\u6027\u3002 Celestia (TIA) \u5b9a\u4f4d \uff1a\u9996\u4e2a\u6a21\u5757\u5316\u533a\u5757\u94fe\uff0c\u4e13\u6ce8\u201c\u6570\u636e\u53ef\u7528\u6027\u5c42\u201d\uff08DA\uff09\u3002 \u6280\u672f\u4eae\u70b9 \uff1a\u5176\u4ed6\u94fe\uff08\u5982Rollups\uff09\u53ef\u5c06\u6570\u636e\u5b58\u50a8\u5728Celestia\u4e0a\uff0c\u964d\u4f4e\u5b58\u50a8\u6210\u672c\u3002 \u7206\u706b\u539f\u56e0 \uff1a\u6a21\u5757\u5316\u662f2024\u5e74\u6838\u5fc3\u53d9\u4e8b\uff0c\u4ee5\u592a\u574aEIP-4844\uff08Proto-Danksharding\uff09\u7684\u76f4\u63a5\u53d7\u76ca\u8005\u3002 Sei (SEI) \u5b9a\u4f4d \uff1a\u4e3a\u4ea4\u6613\u4f18\u5316\u7684\u516c\u94fe\uff08DeFi\u4e13\u7528\u94fe\uff09\u3002 \u6280\u672f\u4eae\u70b9 \uff1a\u5185\u7f6e\u8ba2\u5355\u7c3f\u6a21\u5757\uff0c\u4ea4\u6613\u7ed3\u7b97\u901f\u5ea6\u6781\u5feb\uff08TPS 20,000+\uff09\u3002 \u7206\u706b\u539f\u56e0 \uff1a\u6293\u4f4f\u201c\u4ea4\u6613\u4e13\u7528\u94fe\u201d\u9700\u6c42\uff0c\u7a7a\u6295\u9884\u671f\u5e26\u52a8\u65e9\u671f\u70ed\u5ea6\u3002 \u4e8c\u3001 Layer2\u6269\u5c55\uff1a\u4ee5\u592a\u574a\u751f\u6001\u7684\u7a81\u56f4\u8005 \u00b6 Blast (BLAST) \u5b9a\u4f4d \uff1a\u81ea\u5e26\u539f\u751f\u6536\u76ca\u7684Layer2\uff08\u7531Blur\u56e2\u961f\u5f00\u53d1\uff09\u3002 \u6280\u672f\u4eae\u70b9 \uff1a\u7528\u6237\u5b58\u5165\u7684ETH\u81ea\u52a8\u751f\u606f\uff08\u901a\u8fc7Lido\u7b49\u534f\u8bae\uff09\u3002 \u7206\u706b\u539f\u56e0 \uff1a\u7a7a\u6295\u9884\u671f+\u521b\u65b0\u6027\u6536\u76ca\u6a21\u578b\uff0cTVL\uff08\u9501\u4ed3\u91cf\uff09\u77ed\u671f\u5185\u7a81\u783420\u4ebf\u7f8e\u5143\u3002 Starknet (STRK) & zkSync (ZK) \u5b9a\u4f4d \uff1aZK-Rollup Layer2\uff0c\u4e3b\u6253\u9ad8\u6027\u80fd\u548c\u4f4e\u6210\u672c\u3002 \u6280\u672f\u4eae\u70b9 \uff1a\u96f6\u77e5\u8bc6\u8bc1\u660e\uff08ZKP\uff09\u6280\u672f\u4fdd\u969c\u9690\u79c1\u548c\u6269\u5c55\u6027\u3002 \u7206\u706b\u539f\u56e0 \uff1a2024\u5e74\u5927\u989d\u7a7a\u6295\uff08Starknet\u7a7a\u629512\u4ebf\u679a\u4ee3\u5e01\uff09\uff0cZK\u6280\u672f\u53d9\u4e8b\u5f3a\u52b2\u3002 \u4e09\u3001 DeFi 2.0\uff1a\u521b\u65b0\u91d1\u878d\u534f\u8bae \u00b6 Pendle (PENDLE) \u5b9a\u4f4d \uff1a\u6536\u76ca\u4ee3\u5e01\u5316\u534f\u8bae\uff08\u5c06\u672a\u6765\u6536\u76ca\u53d8\u4e3a\u53ef\u4ea4\u6613\u8d44\u4ea7\uff09\u3002 \u6280\u672f\u4eae\u70b9 \uff1a\u7528\u6237\u53ef\u62c6\u5206LSDFi\uff08\u5982Lido\u7684stETH\uff09\u7684\u6536\u76ca\u6743\u5e76\u4ea4\u6613\u3002 \u7206\u706b\u539f\u56e0 \uff1a2023\u5e74LSDFi\uff08\u6d41\u52a8\u6027\u8d28\u62bc\u884d\u751f\u54c1\uff09\u7206\u53d1\uff0cPendle\u6210\u4e3a\u6838\u5fc3\u5de5\u5177\u3002 Ethena (ENA) \u5b9a\u4f4d \uff1a\u5408\u6210\u7f8e\u5143\u7a33\u5b9a\u5e01\u534f\u8bae\uff08\u7c7b\u4f3c\u201c\u52a0\u5bc6\u7248\u7f8e\u5143\u201d\uff09\u3002 \u6280\u672f\u4eae\u70b9 \uff1a\u901a\u8fc7\u62b5\u62bcETH\u671f\u8d27\u5bf9\u51b2\u98ce\u9669\uff0c\u63d0\u4f9b\u9ad8\u5e74\u5316\u6536\u76ca\uff08\u4e00\u5ea6\u8fbe30%+\uff09\u3002 \u7206\u706b\u539f\u56e0 \uff1aUSDT/BUSD\u76d1\u7ba1\u538b\u529b\u4e0b\uff0c\u5e02\u573a\u5bf9\u53bb\u4e2d\u5fc3\u5316\u7a33\u5b9a\u5e01\u9700\u6c42\u6fc0\u589e\u3002 \u56db\u3001 AI+\u533a\u5757\u94fe\uff1a2024\u5e74\u6700\u5f3a\u53d9\u4e8b \u00b6 Bittensor (TAO) \u5b9a\u4f4d \uff1a\u53bb\u4e2d\u5fc3\u5316\u673a\u5668\u5b66\u4e60\u7f51\u7edc\u3002 \u6280\u672f\u4eae\u70b9 \uff1a\u8282\u70b9\u8d21\u732e\u7b97\u529b\u8bad\u7ec3AI\u6a21\u578b\uff0c\u6309\u8d21\u732e\u5206\u914d\u4ee3\u5e01\u5956\u52b1\u3002 \u7206\u706b\u539f\u56e0 \uff1aAI\u8d5b\u9053\u70ed\u5ea6\u5916\u6ea2\uff0c\u88ab\u79f0\u4f5c\u201c\u52a0\u5bc6\u7248\u7684AWS\u201d\u3002 Render (RNDR) & Akash (AKT) \u5b9a\u4f4d \uff1a\u53bb\u4e2d\u5fc3\u5316GPU\u7b97\u529b\u5e02\u573a\u3002 \u6280\u672f\u4eae\u70b9 \uff1a\u7528\u6237\u51fa\u79df\u95f2\u7f6e\u7b97\u529b\uff08\u5982\u663e\u5361\uff09\u6362\u53d6\u4ee3\u5e01\u3002 \u7206\u706b\u539f\u56e0 \uff1aAI\u7b97\u529b\u77ed\u7f3a\uff0c\u4f4e\u6210\u672c\u66ff\u4ee3\u65b9\u6848\u53d7\u8ffd\u6367\u3002 \u4e94\u3001 Memecoin\uff1a\u793e\u533a\u4e0e\u6295\u673a\u9a71\u52a8 \u00b6 Dogwifhat (WIF) \u5b9a\u4f4d \uff1aSolana\u751f\u6001\u7684\u201c\u72d7\u5e3d meme \u5e01\u201d\u3002 \u7206\u706b\u539f\u56e0 \uff1a\u793e\u533a\u7092\u4f5c+\u4ea4\u6613\u6240\u4e0a\u7ebf\uff08\u5982Binance\uff09\uff0c\u5e02\u503c\u4e00\u5ea6\u8d8530\u4ebf\u7f8e\u5143\u3002 Book of Meme (BOME) \u5b9a\u4f4d \uff1aSolana\u4e0a\u7684\u201cMeme\u6587\u5316\u5b58\u50a8\u534f\u8bae\u201d\u3002 \u6280\u672f\u4eae\u70b9 \uff1a\u7ed3\u5408Meme\u56fe\u7247\u3001\u53bb\u4e2d\u5fc3\u5316\u5b58\u50a8\uff08IPFS\uff09\u548c\u4ee3\u5e01\u3002 \u7206\u706b\u539f\u56e0 \uff1a\u827a\u672f\u5bb6+\u793e\u533a\u8054\u5408\u63a8\u52a8\uff0c3\u5929\u6da8\u5e45\u8d851000\u500d\u3002 \u516d\u3001 \u4e3a\u4ec0\u4e48\u8fd9\u4e9b\u5e01\u80fd\u706b\uff1f \u00b6 \u6280\u672f\u53d9\u4e8b \uff1a \u6a21\u5757\u5316\uff08Celestia\uff09\u3001ZK\u6280\u672f\uff08Starknet\uff09\u3001AI\u7b97\u529b\uff08Bittensor\uff09\u7b49\u7b26\u5408\u957f\u671f\u8d8b\u52bf\u3002 \u7a7a\u6295\u6548\u5e94 \uff1a \u5927\u91cf\u9879\u76ee\u901a\u8fc7\u7a7a\u6295\u5438\u5f15\u7528\u6237\uff08\u5982Starknet\u3001zkSync\uff09\u3002 \u8d44\u672c\u63a8\u52a8 \uff1a \u9876\u7ea7VC\uff08\u5982a16z\u3001Paradigm\uff09\u80cc\u4e66\u9879\u76ee\u66f4\u6613\u83b7\u5f97\u5173\u6ce8\u3002 \u793e\u533a\u6587\u5316 \uff1a Memecoin\u4f9d\u8d56\u75c5\u6bd2\u4f20\u64ad\uff08\u5982WIF\u7684\u201c\u72d7\u5e3d\u201d\u8868\u60c5\u5305\uff09\u3002 \u6536\u76ca\u673a\u4f1a \uff1a \u9ad8APY\uff08\u5982Ethena\uff09\u3001\u5957\u5229\u7a7a\u95f4\uff08\u5982Pendle\uff09\u5438\u5f15\u8d44\u91d1\u6d8c\u5165\u3002 \u4e03\u3001 \u98ce\u9669\u63d0\u793a \u00b6 \u9ad8\u6ce2\u52a8\u6027 \uff1a\u65b0\u5e01\u79cd\u53ef\u80fd\u66b4\u6da8\u66b4\u8dcc\uff08\u5982BOME\u66fe\u5355\u65e5\u8170\u65a9\uff09\u3002 \u76d1\u7ba1\u98ce\u9669 \uff1a\u9690\u79c1\u5e01\u3001Memecoin\u6613\u88ab\u4ea4\u6613\u6240\u4e0b\u67b6\u3002 \u6280\u672f\u672a\u843d\u5730 \uff1a\u90e8\u5206\u9879\u76ee\u767d\u76ae\u4e66\u534e\u4e3d\uff0c\u4f46\u5b9e\u9645\u8fdb\u5c55\u7f13\u6162\uff08\u5982\u67d0\u4e9bAI\u9879\u76ee\uff09\u3002 \u603b\u7ed3 \u00b6 \u65b0\u5e01\u79cd\u7684\u7206\u53d1\u5f80\u5f80\u7531**\u6280\u672f\u7a81\u7834+\u8d44\u672c\u52a9\u63a8+\u793e\u533a\u5171\u8bc6**\u5171\u540c\u9a71\u52a8\u3002\u5982\u679c\u60f3\u53c2\u4e0e\uff1a - \u6280\u672f\u6d3e \uff1a\u5173\u6ce8\u6a21\u5757\u5316\u3001ZK\u3001AI\u7b49\u5e95\u5c42\u521b\u65b0\uff08\u5982Celestia\u3001Bittensor\uff09\u3002 - \u6295\u673a\u6d3e \uff1a\u7d27\u76efMemecoin\u548c\u7a7a\u6295\u673a\u4f1a\uff08\u5982Solana\u751f\u6001\u5c0f\u5e01\uff09\u3002 - \u7a33\u5065\u6d3e \uff1a\u9009\u62e9\u5934\u90e8Layer2\uff08\u5982Starknet\uff09\u6216\u7a33\u5b9a\u5e01\u534f\u8bae\uff08\u5982Ethena\uff09\u3002 \u5982\u679c\u9700\u8981\u67d0\u4e2a\u8d5b\u9053\u7684\u6df1\u5ea6\u5206\u6790\uff08\u5982\u5982\u4f55\u53c2\u4e0eZK-Rollup\u7a7a\u6295\uff09\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u63a2\u8ba8\uff01","title":"\u533a\u5757\u94fe\u95ee\u9898\u89e3\u51b3\u65b9\u6cd5"},{"location":"bitcoin/problem/#_1","text":"\u6700\u8fd1\u52a0\u5bc6\u8d27\u5e01\u5e02\u573a\u6d8c\u73b0\u4e86\u8bb8\u591a\u65b0\u9879\u76ee\uff0c\u8986\u76d6\u4e86**Layer1\u516c\u94fe\u3001Layer2\u6269\u5c55\u3001DeFi\u3001AI+\u533a\u5757\u94fe\u3001Memecoin**\u7b49\u591a\u4e2a\u9886\u57df\u3002\u4ee5\u4e0b\u662f2023-2024\u5e74\u70ed\u5ea6\u8f83\u9ad8\u7684\u65b0\u5e01\u79cd\u53ca\u5176\u80cc\u540e\u7684\u903b\u8f91\uff1a","title":"\u533a\u5757\u94fe\u95ee\u9898\u89e3\u51b3\u65b9\u6cd5"},{"location":"bitcoin/problem/#_2","text":"Sui (SUI) & Aptos (APT) \u5b9a\u4f4d \uff1a\u9ad8\u6027\u80fdLayer1\uff0c\u4e3b\u6253Move\u8bed\u8a00\uff08\u539fFacebook Diem\u56e2\u961f\u5f00\u53d1\uff09\u3002 \u6280\u672f\u4eae\u70b9 \uff1a\u5e76\u884c\u6267\u884c\u4ea4\u6613\uff08\u7c7b\u4f3cSolana\uff09\uff0cTPS\u53ef\u8fbe\u6570\u5343\u3002 \u7206\u706b\u539f\u56e0 \uff1a\u8d44\u672c\u80cc\u4e66\uff08a16z\u3001Binance Labs\u6295\u8d44\uff09\uff0c\u5bf9\u6807Solana\u4f46\u66f4\u5f3a\u8c03\u5b89\u5168\u6027\u3002 Celestia (TIA) \u5b9a\u4f4d \uff1a\u9996\u4e2a\u6a21\u5757\u5316\u533a\u5757\u94fe\uff0c\u4e13\u6ce8\u201c\u6570\u636e\u53ef\u7528\u6027\u5c42\u201d\uff08DA\uff09\u3002 \u6280\u672f\u4eae\u70b9 \uff1a\u5176\u4ed6\u94fe\uff08\u5982Rollups\uff09\u53ef\u5c06\u6570\u636e\u5b58\u50a8\u5728Celestia\u4e0a\uff0c\u964d\u4f4e\u5b58\u50a8\u6210\u672c\u3002 \u7206\u706b\u539f\u56e0 \uff1a\u6a21\u5757\u5316\u662f2024\u5e74\u6838\u5fc3\u53d9\u4e8b\uff0c\u4ee5\u592a\u574aEIP-4844\uff08Proto-Danksharding\uff09\u7684\u76f4\u63a5\u53d7\u76ca\u8005\u3002 Sei (SEI) \u5b9a\u4f4d \uff1a\u4e3a\u4ea4\u6613\u4f18\u5316\u7684\u516c\u94fe\uff08DeFi\u4e13\u7528\u94fe\uff09\u3002 \u6280\u672f\u4eae\u70b9 \uff1a\u5185\u7f6e\u8ba2\u5355\u7c3f\u6a21\u5757\uff0c\u4ea4\u6613\u7ed3\u7b97\u901f\u5ea6\u6781\u5feb\uff08TPS 20,000+\uff09\u3002 \u7206\u706b\u539f\u56e0 \uff1a\u6293\u4f4f\u201c\u4ea4\u6613\u4e13\u7528\u94fe\u201d\u9700\u6c42\uff0c\u7a7a\u6295\u9884\u671f\u5e26\u52a8\u65e9\u671f\u70ed\u5ea6\u3002","title":"\u4e00\u3001\u65b0\u516c\u94fe\uff1a\u9ad8\u6027\u80fd\u4e0e\u6a21\u5757\u5316"},{"location":"bitcoin/problem/#layer2","text":"Blast (BLAST) \u5b9a\u4f4d \uff1a\u81ea\u5e26\u539f\u751f\u6536\u76ca\u7684Layer2\uff08\u7531Blur\u56e2\u961f\u5f00\u53d1\uff09\u3002 \u6280\u672f\u4eae\u70b9 \uff1a\u7528\u6237\u5b58\u5165\u7684ETH\u81ea\u52a8\u751f\u606f\uff08\u901a\u8fc7Lido\u7b49\u534f\u8bae\uff09\u3002 \u7206\u706b\u539f\u56e0 \uff1a\u7a7a\u6295\u9884\u671f+\u521b\u65b0\u6027\u6536\u76ca\u6a21\u578b\uff0cTVL\uff08\u9501\u4ed3\u91cf\uff09\u77ed\u671f\u5185\u7a81\u783420\u4ebf\u7f8e\u5143\u3002 Starknet (STRK) & zkSync (ZK) \u5b9a\u4f4d \uff1aZK-Rollup Layer2\uff0c\u4e3b\u6253\u9ad8\u6027\u80fd\u548c\u4f4e\u6210\u672c\u3002 \u6280\u672f\u4eae\u70b9 \uff1a\u96f6\u77e5\u8bc6\u8bc1\u660e\uff08ZKP\uff09\u6280\u672f\u4fdd\u969c\u9690\u79c1\u548c\u6269\u5c55\u6027\u3002 \u7206\u706b\u539f\u56e0 \uff1a2024\u5e74\u5927\u989d\u7a7a\u6295\uff08Starknet\u7a7a\u629512\u4ebf\u679a\u4ee3\u5e01\uff09\uff0cZK\u6280\u672f\u53d9\u4e8b\u5f3a\u52b2\u3002","title":"\u4e8c\u3001Layer2\u6269\u5c55\uff1a\u4ee5\u592a\u574a\u751f\u6001\u7684\u7a81\u56f4\u8005"},{"location":"bitcoin/problem/#defi-20","text":"Pendle (PENDLE) \u5b9a\u4f4d \uff1a\u6536\u76ca\u4ee3\u5e01\u5316\u534f\u8bae\uff08\u5c06\u672a\u6765\u6536\u76ca\u53d8\u4e3a\u53ef\u4ea4\u6613\u8d44\u4ea7\uff09\u3002 \u6280\u672f\u4eae\u70b9 \uff1a\u7528\u6237\u53ef\u62c6\u5206LSDFi\uff08\u5982Lido\u7684stETH\uff09\u7684\u6536\u76ca\u6743\u5e76\u4ea4\u6613\u3002 \u7206\u706b\u539f\u56e0 \uff1a2023\u5e74LSDFi\uff08\u6d41\u52a8\u6027\u8d28\u62bc\u884d\u751f\u54c1\uff09\u7206\u53d1\uff0cPendle\u6210\u4e3a\u6838\u5fc3\u5de5\u5177\u3002 Ethena (ENA) \u5b9a\u4f4d \uff1a\u5408\u6210\u7f8e\u5143\u7a33\u5b9a\u5e01\u534f\u8bae\uff08\u7c7b\u4f3c\u201c\u52a0\u5bc6\u7248\u7f8e\u5143\u201d\uff09\u3002 \u6280\u672f\u4eae\u70b9 \uff1a\u901a\u8fc7\u62b5\u62bcETH\u671f\u8d27\u5bf9\u51b2\u98ce\u9669\uff0c\u63d0\u4f9b\u9ad8\u5e74\u5316\u6536\u76ca\uff08\u4e00\u5ea6\u8fbe30%+\uff09\u3002 \u7206\u706b\u539f\u56e0 \uff1aUSDT/BUSD\u76d1\u7ba1\u538b\u529b\u4e0b\uff0c\u5e02\u573a\u5bf9\u53bb\u4e2d\u5fc3\u5316\u7a33\u5b9a\u5e01\u9700\u6c42\u6fc0\u589e\u3002","title":"\u4e09\u3001DeFi 2.0\uff1a\u521b\u65b0\u91d1\u878d\u534f\u8bae"},{"location":"bitcoin/problem/#ai2024","text":"Bittensor (TAO) \u5b9a\u4f4d \uff1a\u53bb\u4e2d\u5fc3\u5316\u673a\u5668\u5b66\u4e60\u7f51\u7edc\u3002 \u6280\u672f\u4eae\u70b9 \uff1a\u8282\u70b9\u8d21\u732e\u7b97\u529b\u8bad\u7ec3AI\u6a21\u578b\uff0c\u6309\u8d21\u732e\u5206\u914d\u4ee3\u5e01\u5956\u52b1\u3002 \u7206\u706b\u539f\u56e0 \uff1aAI\u8d5b\u9053\u70ed\u5ea6\u5916\u6ea2\uff0c\u88ab\u79f0\u4f5c\u201c\u52a0\u5bc6\u7248\u7684AWS\u201d\u3002 Render (RNDR) & Akash (AKT) \u5b9a\u4f4d \uff1a\u53bb\u4e2d\u5fc3\u5316GPU\u7b97\u529b\u5e02\u573a\u3002 \u6280\u672f\u4eae\u70b9 \uff1a\u7528\u6237\u51fa\u79df\u95f2\u7f6e\u7b97\u529b\uff08\u5982\u663e\u5361\uff09\u6362\u53d6\u4ee3\u5e01\u3002 \u7206\u706b\u539f\u56e0 \uff1aAI\u7b97\u529b\u77ed\u7f3a\uff0c\u4f4e\u6210\u672c\u66ff\u4ee3\u65b9\u6848\u53d7\u8ffd\u6367\u3002","title":"\u56db\u3001AI+\u533a\u5757\u94fe\uff1a2024\u5e74\u6700\u5f3a\u53d9\u4e8b"},{"location":"bitcoin/problem/#memecoin","text":"Dogwifhat (WIF) \u5b9a\u4f4d \uff1aSolana\u751f\u6001\u7684\u201c\u72d7\u5e3d meme \u5e01\u201d\u3002 \u7206\u706b\u539f\u56e0 \uff1a\u793e\u533a\u7092\u4f5c+\u4ea4\u6613\u6240\u4e0a\u7ebf\uff08\u5982Binance\uff09\uff0c\u5e02\u503c\u4e00\u5ea6\u8d8530\u4ebf\u7f8e\u5143\u3002 Book of Meme (BOME) \u5b9a\u4f4d \uff1aSolana\u4e0a\u7684\u201cMeme\u6587\u5316\u5b58\u50a8\u534f\u8bae\u201d\u3002 \u6280\u672f\u4eae\u70b9 \uff1a\u7ed3\u5408Meme\u56fe\u7247\u3001\u53bb\u4e2d\u5fc3\u5316\u5b58\u50a8\uff08IPFS\uff09\u548c\u4ee3\u5e01\u3002 \u7206\u706b\u539f\u56e0 \uff1a\u827a\u672f\u5bb6+\u793e\u533a\u8054\u5408\u63a8\u52a8\uff0c3\u5929\u6da8\u5e45\u8d851000\u500d\u3002","title":"\u4e94\u3001Memecoin\uff1a\u793e\u533a\u4e0e\u6295\u673a\u9a71\u52a8"},{"location":"bitcoin/problem/#_3","text":"\u6280\u672f\u53d9\u4e8b \uff1a \u6a21\u5757\u5316\uff08Celestia\uff09\u3001ZK\u6280\u672f\uff08Starknet\uff09\u3001AI\u7b97\u529b\uff08Bittensor\uff09\u7b49\u7b26\u5408\u957f\u671f\u8d8b\u52bf\u3002 \u7a7a\u6295\u6548\u5e94 \uff1a \u5927\u91cf\u9879\u76ee\u901a\u8fc7\u7a7a\u6295\u5438\u5f15\u7528\u6237\uff08\u5982Starknet\u3001zkSync\uff09\u3002 \u8d44\u672c\u63a8\u52a8 \uff1a \u9876\u7ea7VC\uff08\u5982a16z\u3001Paradigm\uff09\u80cc\u4e66\u9879\u76ee\u66f4\u6613\u83b7\u5f97\u5173\u6ce8\u3002 \u793e\u533a\u6587\u5316 \uff1a Memecoin\u4f9d\u8d56\u75c5\u6bd2\u4f20\u64ad\uff08\u5982WIF\u7684\u201c\u72d7\u5e3d\u201d\u8868\u60c5\u5305\uff09\u3002 \u6536\u76ca\u673a\u4f1a \uff1a \u9ad8APY\uff08\u5982Ethena\uff09\u3001\u5957\u5229\u7a7a\u95f4\uff08\u5982Pendle\uff09\u5438\u5f15\u8d44\u91d1\u6d8c\u5165\u3002","title":"\u516d\u3001\u4e3a\u4ec0\u4e48\u8fd9\u4e9b\u5e01\u80fd\u706b\uff1f"},{"location":"bitcoin/problem/#_4","text":"\u9ad8\u6ce2\u52a8\u6027 \uff1a\u65b0\u5e01\u79cd\u53ef\u80fd\u66b4\u6da8\u66b4\u8dcc\uff08\u5982BOME\u66fe\u5355\u65e5\u8170\u65a9\uff09\u3002 \u76d1\u7ba1\u98ce\u9669 \uff1a\u9690\u79c1\u5e01\u3001Memecoin\u6613\u88ab\u4ea4\u6613\u6240\u4e0b\u67b6\u3002 \u6280\u672f\u672a\u843d\u5730 \uff1a\u90e8\u5206\u9879\u76ee\u767d\u76ae\u4e66\u534e\u4e3d\uff0c\u4f46\u5b9e\u9645\u8fdb\u5c55\u7f13\u6162\uff08\u5982\u67d0\u4e9bAI\u9879\u76ee\uff09\u3002","title":"\u4e03\u3001\u98ce\u9669\u63d0\u793a"},{"location":"bitcoin/problem/#_5","text":"\u65b0\u5e01\u79cd\u7684\u7206\u53d1\u5f80\u5f80\u7531**\u6280\u672f\u7a81\u7834+\u8d44\u672c\u52a9\u63a8+\u793e\u533a\u5171\u8bc6**\u5171\u540c\u9a71\u52a8\u3002\u5982\u679c\u60f3\u53c2\u4e0e\uff1a - \u6280\u672f\u6d3e \uff1a\u5173\u6ce8\u6a21\u5757\u5316\u3001ZK\u3001AI\u7b49\u5e95\u5c42\u521b\u65b0\uff08\u5982Celestia\u3001Bittensor\uff09\u3002 - \u6295\u673a\u6d3e \uff1a\u7d27\u76efMemecoin\u548c\u7a7a\u6295\u673a\u4f1a\uff08\u5982Solana\u751f\u6001\u5c0f\u5e01\uff09\u3002 - \u7a33\u5065\u6d3e \uff1a\u9009\u62e9\u5934\u90e8Layer2\uff08\u5982Starknet\uff09\u6216\u7a33\u5b9a\u5e01\u534f\u8bae\uff08\u5982Ethena\uff09\u3002 \u5982\u679c\u9700\u8981\u67d0\u4e2a\u8d5b\u9053\u7684\u6df1\u5ea6\u5206\u6790\uff08\u5982\u5982\u4f55\u53c2\u4e0eZK-Rollup\u7a7a\u6295\uff09\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u63a2\u8ba8\uff01","title":"\u603b\u7ed3"},{"location":"bitcoin/story/","text":"\u57fa\u672c\u6d41\u7a0b \u00b6 \u4ece\u5934\u68b3\u7406\u6574\u4e2a\u6d41\u7a0b\uff0c\u4ece**\u4ea4\u6613\u65b9**\u3001**\u77ff\u5de5**\u548c**\u533a\u5757\u94fe\u7f51\u7edc**\u4e09\u4e2a\u89d2\u5ea6\uff0c\u9010\u6b65\u62c6\u89e3\u4ea4\u6613\u7684\u5b8c\u6574\u751f\u547d\u5468\u671f\u3002 \u7b2c\u4e00\u6b65\uff1a\u4ea4\u6613\u53d1\u8d77\uff08\u7528\u6237\u89c6\u89d2\uff09 \u00b6 \u7528\u6237\u521b\u5efa\u4ea4\u6613 \u4f60\u901a\u8fc7\u94b1\u5305\uff08\u5982\u6bd4\u7279\u5e01\u94b1\u5305\uff09\u53d1\u8d77\u4e00\u7b14\u8f6c\u8d26\uff0c\u586b\u5199\uff1a \u6536\u6b3e\u5730\u5740\u3001\u91d1\u989d\u3001\u624b\u7eed\u8d39\uff08\u53ef\u9009\uff09 \u3002 \u624b\u7eed\u8d39\u662f\u4f60\u4e3b\u52a8\u8bbe\u7f6e\u7684\u201c\u77ff\u5de5\u8d39\u201d\uff0c\u7528\u4e8e\u6fc0\u52b1\u77ff\u5de5\u4f18\u5148\u6253\u5305\u4f60\u7684\u4ea4\u6613\u3002\u624b\u7eed\u8d39\u8d8a\u9ad8\uff0c\u4ea4\u6613\u8d8a\u5feb\u88ab\u5904\u7406\u3002 \u5e7f\u64ad\u4ea4\u6613\u5230\u7f51\u7edc \u4f60\u7684\u94b1\u5305\u5c06\u4ea4\u6613\u5e7f\u64ad\u5230\u6bd4\u7279\u5e01\u7f51\u7edc\u7684\u8282\u70b9\uff08\u8282\u70b9\u662f\u7f51\u7edc\u4e2d\u7684\u8ba1\u7b97\u673a\uff0c\u8d1f\u8d23\u4f20\u64ad\u4ea4\u6613\u548c\u533a\u5757\uff09\u3002 \u4ea4\u6613\u8fdb\u5165**\u5185\u5b58\u6c60\uff08Mempool\uff09**\u2014\u2014\u8fd9\u662f\u4e00\u4e2a\u5168\u7f51\u5171\u4eab\u7684\u201c\u5f85\u5904\u7406\u4ea4\u6613\u6c60\u201d\uff0c\u6240\u6709\u672a\u786e\u8ba4\u4ea4\u6613\u90fd\u5728\u8fd9\u91cc\u6392\u961f\u3002 \u7b2c\u4e8c\u6b65\uff1a\u4ea4\u6613\u7b49\u5f85\u6253\u5305\uff08\u77ff\u5de5\u89c6\u89d2\uff09 \u00b6 \u77ff\u5de5\u7b5b\u9009\u4ea4\u6613 \u77ff\u5de5\u4ece\u5185\u5b58\u6c60\u4e2d\u9009\u62e9\u4ea4\u6613\u6253\u5305\u5230\u4e0b\u4e00\u4e2a\u533a\u5757\u3002\u9009\u62e9\u7b56\u7565\uff1a \u6309\u624b\u7eed\u8d39\u7387\uff08sat/vByte\uff09\u6392\u5e8f \uff1a\u4f18\u5148\u6253\u5305\u624b\u7eed\u8d39\u9ad8\u7684\u4ea4\u6613\u3002 \u586b\u6ee1\u533a\u5757 \uff1a\u5728\u533a\u5757\u5bb9\u91cf\uff081MB~4MB\uff09\u5185\u5c3d\u53ef\u80fd\u591a\u6253\u5305\u4ea4\u6613\uff0c\u6700\u5927\u5316\u6536\u76ca\u3002 \uff08\u5982\u679c\u4f60\u7684\u624b\u7eed\u8d39\u8bbe\u5f97\u592a\u4f4e\uff0c\u4ea4\u6613\u53ef\u80fd\u957f\u65f6\u95f4\u6ede\u7559\u5728\u5185\u5b58\u6c60\u4e2d\uff01\uff09 \u6316\u77ff\u7ade\u4e89 \u77ff\u5de5\u5c06\u9009\u4e2d\u7684\u4ea4\u6613\u6253\u5305\u6210\u4e00\u4e2a\u5019\u9009\u533a\u5757\uff0c\u5f00\u59cb\u8fdb\u884c\u5de5\u4f5c\u91cf\u8bc1\u660e\uff08PoW\uff09\u8ba1\u7b97\uff08\u5373\u201c\u6316\u77ff\u201d\uff09\u3002 \u5168\u7f51\u77ff\u5de5\u7ade\u4e89 \uff1a\u8c01\u5148\u7b97\u51fa\u7b26\u5408\u96be\u5ea6\u7684\u54c8\u5e0c\u503c\uff0c\u8c01\u5c31\u6709\u6743\u5c06\u533a\u5757\u6dfb\u52a0\u5230\u533a\u5757\u94fe\u3002 \u7b2c\u4e09\u6b65\uff1a\u4ea4\u6613\u786e\u8ba4\uff08\u533a\u5757\u94fe\u7f51\u7edc\u89c6\u89d2\uff09 \u00b6 \u9996\u6b21\u786e\u8ba4\uff081\u4e2a\u533a\u5757\uff09 \u5f53\u67d0\u4e2a\u77ff\u5de5\u6210\u529f\u6316\u51fa\u533a\u5757\uff0c\u4f60\u7684\u4ea4\u6613\u88ab\u5305\u542b\u5728\u5176\u4e2d\uff0c\u6b64\u65f6\u83b7\u5f97**1\u6b21\u786e\u8ba4**\u3002 \u4f46\u6b64\u65f6\u4ea4\u6613\u8fd8\u4e0d\u7b97\u6700\u7ec8\u5b8c\u6210\uff01\u56e0\u4e3a\u53ef\u80fd\u51fa\u73b0**\u4e34\u65f6\u5206\u53c9**\uff08\u5176\u4ed6\u77ff\u5de5\u53ef\u80fd\u540c\u65f6\u6316\u51fa\u7ade\u4e89\u533a\u5757\uff09\u3002 6\u6b21\u786e\u8ba4\u89c4\u5219 \u6bd4\u7279\u5e01\u7f51\u7edc\u7ea6\u5b9a\u4fd7\u6210\u7684\u5b89\u5168\u6807\u51c6\u662f\u7b49\u5f85**6\u4e2a\u533a\u5757\u786e\u8ba4**\uff08\u7ea61\u5c0f\u65f6\uff09\u3002 \u6bcf\u65b0\u589e\u4e00\u4e2a\u533a\u5757\uff0c\u4f60\u7684\u4ea4\u6613\u786e\u8ba4\u6570+1\u3002 6\u6b21\u786e\u8ba4\u540e\uff0c\u4ea4\u6613\u88ab\u9006\u8f6c\u7684\u6982\u7387\u6781\u4f4e\uff08\u9700\u653b\u51fb\u8005\u638c\u63e1\u5168\u7f5151%\u7b97\u529b\u624d\u80fd\u7be1\u6539\uff09\u3002 \uff08\u4ea4\u6613\u6240\u6216\u5927\u989d\u8f6c\u8d26\u901a\u5e38\u8981\u6c426\u786e\u8ba4\uff0c\u5c0f\u989d\u4ea4\u6613\u53ef\u80fd1\u786e\u8ba4\u5373\u53ef\u3002\uff09 \u4e3a\u4ec0\u4e48\u662f6\u6b21\uff1f \u7edf\u8ba1\u5b66\u5b89\u5168\u6a21\u578b\uff1a\u968f\u7740\u786e\u8ba4\u6570\u589e\u52a0\uff0c\u4ea4\u6613\u88ab\u63a8\u7ffb\u7684\u6982\u7387\u5448\u6307\u6570\u7ea7\u4e0b\u964d\u3002 6\u6b21\u786e\u8ba4\u540e\uff0c\u653b\u51fb\u6210\u672c\u8fdc\u8d85\u6536\u76ca\uff0c\u7f51\u7edc\u89c6\u4e3a\u201c\u6700\u7ec8\u786e\u5b9a\u201d\u3002 \u5173\u952e\u95ee\u9898\u56de\u7b54 \u00b6 Q\uff1a\u6211\u7684\u4ea4\u6613\u67096\u4e2a\u533a\u5757\u786e\u8ba4\u4e86\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u5b8c\u6210\u4e86\u5417\uff1f \u2705 \u662f\u7684\uff01 \u4ece\u6bd4\u7279\u5e01\u7f51\u7edc\u5b89\u5168\u89d2\u5ea6\uff0c6\u6b21\u786e\u8ba4\u540e\u4ea4\u6613\u53ef\u89c6\u4e3a\u4e0d\u53ef\u9006\u3002\u6b64\u65f6\uff1a - \u4f60\u7684\u4ea4\u6613\u5df2\u88ab\u5168\u7f51\u7edd\u5927\u591a\u6570\u8282\u70b9\u8ba4\u53ef\u3002 - \u6536\u6b3e\u65b9\u53ef\u4ee5\u5b89\u5168\u4f7f\u7528\u8fd9\u7b14\u8d44\u91d1\uff08\u5982\u4ea4\u6613\u6240\u5141\u8bb8\u63d0\u73b0\uff09\u3002 \u8865\u5145\u6ce8\u610f\u4e8b\u9879 \u00b6 \u624b\u7eed\u8d39\u4f18\u5316 \u5982\u679c\u4f60\u60f3\u52a0\u5feb\u4ea4\u6613\uff0c\u9700\u8bbe\u7f6e\u8db3\u591f\u9ad8\u7684\u624b\u7eed\u8d39\uff08\u53c2\u8003\u5b9e\u65f6\u6570\u636e\u5982 mempool.space \uff09\u3002 \u4f4e\u624b\u7eed\u8d39\u4ea4\u6613\u53ef\u80fd\u5728\u62e5\u5835\u65f6\u5ef6\u8fdf\u6570\u5c0f\u65f6\u751a\u81f3\u51e0\u5929\u3002 \u4ea4\u6613\u4e22\u5f03\u98ce\u9669 \u5982\u679c\u4ea4\u6613\u957f\u65f6\u95f4\u672a\u6253\u5305\uff08\u5982\u624b\u7eed\u8d39\u8fc7\u4f4e\uff09\uff0c\u8282\u70b9\u53ef\u80fd\u5c06\u5176\u4ece\u5185\u5b58\u6c60\u4e2d\u6e05\u9664\u3002\u6b64\u65f6\u9700\u91cd\u65b0\u53d1\u8d77\u4ea4\u6613\u3002 \u5206\u53c9\u65f6\u7684\u7279\u6b8a\u60c5\u51b5 \u5982\u679c\u4ea4\u6613\u88ab\u6253\u5305\u5728\u5206\u53c9\u94fe\u4e0a\uff0c\u4e14\u8be5\u94fe\u6700\u7ec8\u88ab\u629b\u5f03\uff0c\u4ea4\u6613\u4f1a\u8fd4\u56de\u5185\u5b58\u6c60\u91cd\u65b0\u7b49\u5f85\u6253\u5305\u3002 \u603b\u7ed3\u6d41\u7a0b\u56fe \u00b6 \u7528\u6237\u53d1\u8d77\u4ea4\u6613 \u2192 \u5e7f\u64ad\u5230\u5185\u5b58\u6c60 \u2192 \u77ff\u5de5\u6309\u624b\u7eed\u8d39\u7b5b\u9009 \u2192 \u6253\u5305\u8fdb\u533a\u5757 \u2192 1\u6b21\u786e\u8ba4 \u2192 \u540e\u7eed\u533a\u5757\u53e0\u52a0 \u2192 6\u6b21\u786e\u8ba4 \u2192 \u4ea4\u6613\u6700\u7ec8\u5b8c\u6210 \u901a\u8fc7\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u533a\u5757\u94fe\u5728\u53bb\u4e2d\u5fc3\u5316\u73af\u5883\u4e0b\u5b9e\u73b0\u4e86**\u5b89\u5168**\u3001**\u6297\u7be1\u6539**\u7684\u4ea4\u6613\u9a8c\u8bc1\u3002\u4f5c\u4e3a\u7528\u6237\uff0c\u4f60\u53ea\u9700\u8bbe\u7f6e\u5408\u7406\u624b\u7eed\u8d39\u5e76\u8010\u5fc3\u7b49\u5f85\u786e\u8ba4\u5373\u53ef\uff01","title":"\u57fa\u672c\u6d41\u7a0b"},{"location":"bitcoin/story/#_1","text":"\u4ece\u5934\u68b3\u7406\u6574\u4e2a\u6d41\u7a0b\uff0c\u4ece**\u4ea4\u6613\u65b9**\u3001**\u77ff\u5de5**\u548c**\u533a\u5757\u94fe\u7f51\u7edc**\u4e09\u4e2a\u89d2\u5ea6\uff0c\u9010\u6b65\u62c6\u89e3\u4ea4\u6613\u7684\u5b8c\u6574\u751f\u547d\u5468\u671f\u3002","title":"\u57fa\u672c\u6d41\u7a0b"},{"location":"bitcoin/story/#_2","text":"\u7528\u6237\u521b\u5efa\u4ea4\u6613 \u4f60\u901a\u8fc7\u94b1\u5305\uff08\u5982\u6bd4\u7279\u5e01\u94b1\u5305\uff09\u53d1\u8d77\u4e00\u7b14\u8f6c\u8d26\uff0c\u586b\u5199\uff1a \u6536\u6b3e\u5730\u5740\u3001\u91d1\u989d\u3001\u624b\u7eed\u8d39\uff08\u53ef\u9009\uff09 \u3002 \u624b\u7eed\u8d39\u662f\u4f60\u4e3b\u52a8\u8bbe\u7f6e\u7684\u201c\u77ff\u5de5\u8d39\u201d\uff0c\u7528\u4e8e\u6fc0\u52b1\u77ff\u5de5\u4f18\u5148\u6253\u5305\u4f60\u7684\u4ea4\u6613\u3002\u624b\u7eed\u8d39\u8d8a\u9ad8\uff0c\u4ea4\u6613\u8d8a\u5feb\u88ab\u5904\u7406\u3002 \u5e7f\u64ad\u4ea4\u6613\u5230\u7f51\u7edc \u4f60\u7684\u94b1\u5305\u5c06\u4ea4\u6613\u5e7f\u64ad\u5230\u6bd4\u7279\u5e01\u7f51\u7edc\u7684\u8282\u70b9\uff08\u8282\u70b9\u662f\u7f51\u7edc\u4e2d\u7684\u8ba1\u7b97\u673a\uff0c\u8d1f\u8d23\u4f20\u64ad\u4ea4\u6613\u548c\u533a\u5757\uff09\u3002 \u4ea4\u6613\u8fdb\u5165**\u5185\u5b58\u6c60\uff08Mempool\uff09**\u2014\u2014\u8fd9\u662f\u4e00\u4e2a\u5168\u7f51\u5171\u4eab\u7684\u201c\u5f85\u5904\u7406\u4ea4\u6613\u6c60\u201d\uff0c\u6240\u6709\u672a\u786e\u8ba4\u4ea4\u6613\u90fd\u5728\u8fd9\u91cc\u6392\u961f\u3002","title":"\u7b2c\u4e00\u6b65\uff1a\u4ea4\u6613\u53d1\u8d77\uff08\u7528\u6237\u89c6\u89d2\uff09"},{"location":"bitcoin/story/#_3","text":"\u77ff\u5de5\u7b5b\u9009\u4ea4\u6613 \u77ff\u5de5\u4ece\u5185\u5b58\u6c60\u4e2d\u9009\u62e9\u4ea4\u6613\u6253\u5305\u5230\u4e0b\u4e00\u4e2a\u533a\u5757\u3002\u9009\u62e9\u7b56\u7565\uff1a \u6309\u624b\u7eed\u8d39\u7387\uff08sat/vByte\uff09\u6392\u5e8f \uff1a\u4f18\u5148\u6253\u5305\u624b\u7eed\u8d39\u9ad8\u7684\u4ea4\u6613\u3002 \u586b\u6ee1\u533a\u5757 \uff1a\u5728\u533a\u5757\u5bb9\u91cf\uff081MB~4MB\uff09\u5185\u5c3d\u53ef\u80fd\u591a\u6253\u5305\u4ea4\u6613\uff0c\u6700\u5927\u5316\u6536\u76ca\u3002 \uff08\u5982\u679c\u4f60\u7684\u624b\u7eed\u8d39\u8bbe\u5f97\u592a\u4f4e\uff0c\u4ea4\u6613\u53ef\u80fd\u957f\u65f6\u95f4\u6ede\u7559\u5728\u5185\u5b58\u6c60\u4e2d\uff01\uff09 \u6316\u77ff\u7ade\u4e89 \u77ff\u5de5\u5c06\u9009\u4e2d\u7684\u4ea4\u6613\u6253\u5305\u6210\u4e00\u4e2a\u5019\u9009\u533a\u5757\uff0c\u5f00\u59cb\u8fdb\u884c\u5de5\u4f5c\u91cf\u8bc1\u660e\uff08PoW\uff09\u8ba1\u7b97\uff08\u5373\u201c\u6316\u77ff\u201d\uff09\u3002 \u5168\u7f51\u77ff\u5de5\u7ade\u4e89 \uff1a\u8c01\u5148\u7b97\u51fa\u7b26\u5408\u96be\u5ea6\u7684\u54c8\u5e0c\u503c\uff0c\u8c01\u5c31\u6709\u6743\u5c06\u533a\u5757\u6dfb\u52a0\u5230\u533a\u5757\u94fe\u3002","title":"\u7b2c\u4e8c\u6b65\uff1a\u4ea4\u6613\u7b49\u5f85\u6253\u5305\uff08\u77ff\u5de5\u89c6\u89d2\uff09"},{"location":"bitcoin/story/#_4","text":"\u9996\u6b21\u786e\u8ba4\uff081\u4e2a\u533a\u5757\uff09 \u5f53\u67d0\u4e2a\u77ff\u5de5\u6210\u529f\u6316\u51fa\u533a\u5757\uff0c\u4f60\u7684\u4ea4\u6613\u88ab\u5305\u542b\u5728\u5176\u4e2d\uff0c\u6b64\u65f6\u83b7\u5f97**1\u6b21\u786e\u8ba4**\u3002 \u4f46\u6b64\u65f6\u4ea4\u6613\u8fd8\u4e0d\u7b97\u6700\u7ec8\u5b8c\u6210\uff01\u56e0\u4e3a\u53ef\u80fd\u51fa\u73b0**\u4e34\u65f6\u5206\u53c9**\uff08\u5176\u4ed6\u77ff\u5de5\u53ef\u80fd\u540c\u65f6\u6316\u51fa\u7ade\u4e89\u533a\u5757\uff09\u3002 6\u6b21\u786e\u8ba4\u89c4\u5219 \u6bd4\u7279\u5e01\u7f51\u7edc\u7ea6\u5b9a\u4fd7\u6210\u7684\u5b89\u5168\u6807\u51c6\u662f\u7b49\u5f85**6\u4e2a\u533a\u5757\u786e\u8ba4**\uff08\u7ea61\u5c0f\u65f6\uff09\u3002 \u6bcf\u65b0\u589e\u4e00\u4e2a\u533a\u5757\uff0c\u4f60\u7684\u4ea4\u6613\u786e\u8ba4\u6570+1\u3002 6\u6b21\u786e\u8ba4\u540e\uff0c\u4ea4\u6613\u88ab\u9006\u8f6c\u7684\u6982\u7387\u6781\u4f4e\uff08\u9700\u653b\u51fb\u8005\u638c\u63e1\u5168\u7f5151%\u7b97\u529b\u624d\u80fd\u7be1\u6539\uff09\u3002 \uff08\u4ea4\u6613\u6240\u6216\u5927\u989d\u8f6c\u8d26\u901a\u5e38\u8981\u6c426\u786e\u8ba4\uff0c\u5c0f\u989d\u4ea4\u6613\u53ef\u80fd1\u786e\u8ba4\u5373\u53ef\u3002\uff09 \u4e3a\u4ec0\u4e48\u662f6\u6b21\uff1f \u7edf\u8ba1\u5b66\u5b89\u5168\u6a21\u578b\uff1a\u968f\u7740\u786e\u8ba4\u6570\u589e\u52a0\uff0c\u4ea4\u6613\u88ab\u63a8\u7ffb\u7684\u6982\u7387\u5448\u6307\u6570\u7ea7\u4e0b\u964d\u3002 6\u6b21\u786e\u8ba4\u540e\uff0c\u653b\u51fb\u6210\u672c\u8fdc\u8d85\u6536\u76ca\uff0c\u7f51\u7edc\u89c6\u4e3a\u201c\u6700\u7ec8\u786e\u5b9a\u201d\u3002","title":"\u7b2c\u4e09\u6b65\uff1a\u4ea4\u6613\u786e\u8ba4\uff08\u533a\u5757\u94fe\u7f51\u7edc\u89c6\u89d2\uff09"},{"location":"bitcoin/story/#_5","text":"Q\uff1a\u6211\u7684\u4ea4\u6613\u67096\u4e2a\u533a\u5757\u786e\u8ba4\u4e86\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u5b8c\u6210\u4e86\u5417\uff1f \u2705 \u662f\u7684\uff01 \u4ece\u6bd4\u7279\u5e01\u7f51\u7edc\u5b89\u5168\u89d2\u5ea6\uff0c6\u6b21\u786e\u8ba4\u540e\u4ea4\u6613\u53ef\u89c6\u4e3a\u4e0d\u53ef\u9006\u3002\u6b64\u65f6\uff1a - \u4f60\u7684\u4ea4\u6613\u5df2\u88ab\u5168\u7f51\u7edd\u5927\u591a\u6570\u8282\u70b9\u8ba4\u53ef\u3002 - \u6536\u6b3e\u65b9\u53ef\u4ee5\u5b89\u5168\u4f7f\u7528\u8fd9\u7b14\u8d44\u91d1\uff08\u5982\u4ea4\u6613\u6240\u5141\u8bb8\u63d0\u73b0\uff09\u3002","title":"\u5173\u952e\u95ee\u9898\u56de\u7b54"},{"location":"bitcoin/story/#_6","text":"\u624b\u7eed\u8d39\u4f18\u5316 \u5982\u679c\u4f60\u60f3\u52a0\u5feb\u4ea4\u6613\uff0c\u9700\u8bbe\u7f6e\u8db3\u591f\u9ad8\u7684\u624b\u7eed\u8d39\uff08\u53c2\u8003\u5b9e\u65f6\u6570\u636e\u5982 mempool.space \uff09\u3002 \u4f4e\u624b\u7eed\u8d39\u4ea4\u6613\u53ef\u80fd\u5728\u62e5\u5835\u65f6\u5ef6\u8fdf\u6570\u5c0f\u65f6\u751a\u81f3\u51e0\u5929\u3002 \u4ea4\u6613\u4e22\u5f03\u98ce\u9669 \u5982\u679c\u4ea4\u6613\u957f\u65f6\u95f4\u672a\u6253\u5305\uff08\u5982\u624b\u7eed\u8d39\u8fc7\u4f4e\uff09\uff0c\u8282\u70b9\u53ef\u80fd\u5c06\u5176\u4ece\u5185\u5b58\u6c60\u4e2d\u6e05\u9664\u3002\u6b64\u65f6\u9700\u91cd\u65b0\u53d1\u8d77\u4ea4\u6613\u3002 \u5206\u53c9\u65f6\u7684\u7279\u6b8a\u60c5\u51b5 \u5982\u679c\u4ea4\u6613\u88ab\u6253\u5305\u5728\u5206\u53c9\u94fe\u4e0a\uff0c\u4e14\u8be5\u94fe\u6700\u7ec8\u88ab\u629b\u5f03\uff0c\u4ea4\u6613\u4f1a\u8fd4\u56de\u5185\u5b58\u6c60\u91cd\u65b0\u7b49\u5f85\u6253\u5305\u3002","title":"\u8865\u5145\u6ce8\u610f\u4e8b\u9879"},{"location":"bitcoin/story/#_7","text":"\u7528\u6237\u53d1\u8d77\u4ea4\u6613 \u2192 \u5e7f\u64ad\u5230\u5185\u5b58\u6c60 \u2192 \u77ff\u5de5\u6309\u624b\u7eed\u8d39\u7b5b\u9009 \u2192 \u6253\u5305\u8fdb\u533a\u5757 \u2192 1\u6b21\u786e\u8ba4 \u2192 \u540e\u7eed\u533a\u5757\u53e0\u52a0 \u2192 6\u6b21\u786e\u8ba4 \u2192 \u4ea4\u6613\u6700\u7ec8\u5b8c\u6210 \u901a\u8fc7\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u533a\u5757\u94fe\u5728\u53bb\u4e2d\u5fc3\u5316\u73af\u5883\u4e0b\u5b9e\u73b0\u4e86**\u5b89\u5168**\u3001**\u6297\u7be1\u6539**\u7684\u4ea4\u6613\u9a8c\u8bc1\u3002\u4f5c\u4e3a\u7528\u6237\uff0c\u4f60\u53ea\u9700\u8bbe\u7f6e\u5408\u7406\u624b\u7eed\u8d39\u5e76\u8010\u5fc3\u7b49\u5f85\u786e\u8ba4\u5373\u53ef\uff01","title":"\u603b\u7ed3\u6d41\u7a0b\u56fe"},{"location":"bitcoin/theory/","text":"6\u6b21\u786e\u8ba4\u80cc\u540e\u7684\u6570\u5b66\u8ba1\u7b97\uff08\u8be6\u7ec6\u63a8\u5bfc\uff09 \u00b6 \u8981\u7406\u89e3\u4e3a\u4ec0\u4e486\u6b21\u786e\u8ba4\u540e\u4ea4\u6613\u51e0\u4e4e\u4e0d\u53ef\u9006\uff0c\u6211\u4eec\u9700\u8981\u7528 \u6982\u7387\u8bba \u548c \u6cca\u677e\u8fc7\u7a0b \u6765\u5efa\u6a21\u6bd4\u7279\u5e01\u7684\u533a\u5757\u751f\u6210\u7ade\u4e89\u3002\u4ee5\u4e0b\u662f\u5177\u4f53\u8ba1\u7b97\u6b65\u9aa4\uff1a 1. \u5047\u8bbe\u4e0e\u5b9a\u4e49 \u00b6 \u8bda\u5b9e\u77ff\u5de5\u7b97\u529b\u5360\u6bd4 \uff1a \\( p \\) \uff08\u4f8b\u5982 \\( p = 0.7 \\) \u8868\u793a70%\u7b97\u529b\uff09\u3002 \u653b\u51fb\u8005\u7b97\u529b\u5360\u6bd4 \uff1a \\( q \\) \uff08\u4f8b\u5982 \\( q = 0.3 \\) \uff0c\u4e14 \\( p + q = 1 \\) \uff09\u3002 \u786e\u8ba4\u6570\uff08n\uff09 \uff1a\u653b\u51fb\u8005\u9700\u8981\u4ece\u4ea4\u6613\u6240\u5728\u533a\u5757\u4e4b\u524d\u91cd\u65b0\u6316\u51fa \\( n+1 \\) \u4e2a\u533a\u5757\uff0c\u624d\u80fd\u8986\u76d6\u539f\u94fe\u3002 \u533a\u5757\u751f\u6210\u901f\u7387 \uff1a\u6bd4\u7279\u5e01\u5e73\u574710\u5206\u949f\u4e00\u4e2a\u533a\u5757\uff0c\u4f46\u653b\u51fb\u8005\u548c\u8bda\u5b9e\u7f51\u7edc\u662f\u5e76\u884c\u6316\u77ff\uff0c\u9075\u5faa \u6cca\u677e\u5206\u5e03 \u3002 2. \u653b\u51fb\u8005\u6210\u529f\u9006\u8f6c\u4ea4\u6613\u7684\u6982\u7387 \u00b6 \u653b\u51fb\u8005\u9700\u8981\u6bd4\u8bda\u5b9e\u7f51\u7edc\u66f4\u5feb\u6316\u51fa \\( n+1 \\) \u4e2a\u533a\u5757\u3002\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a \u201c\u8d4c\u5f92\u7834\u4ea7\u95ee\u9898\u201d \uff08Gambler's Ruin Problem\uff09\uff0c\u5176\u89e3\u4e3a\uff1a \\[ P_{\\text{\u9006\u8f6c}} = \\begin{cases} \\left( \\frac{q}{p} \\right)^{n+1} & \\text{if } q < p \\quad (\\text{\u653b\u51fb\u8005\u7b97\u529b < 50%}) \\\\ 1 & \\text{if } q \\geq p \\quad (\\text{51%\u653b\u51fb}) \\end{cases} \\] \u5173\u952e\u7ed3\u8bba \uff1a \u00b6 \u5982\u679c\u653b\u51fb\u8005\u7b97\u529b \\( q < 50\\% \\) \uff0c\u9006\u8f6c\u6982\u7387\u968f \\( n \\) \u6307\u6570\u7ea7\u4e0b\u964d \u3002 \u5982\u679c \\( q \\geq 50\\% \\) \uff0c\u653b\u51fb\u8005\u6700\u7ec8\u4e00\u5b9a\u80fd\u9006\u8f6c\u4ea4\u6613\uff0851%\u653b\u51fb\uff09\u3002 3. \u5177\u4f53\u8ba1\u7b97\u793a\u4f8b \u00b6 \u5047\u8bbe\uff1a \u8bda\u5b9e\u7b97\u529b \\( p = 0.8 \\) \uff0880%\uff09\uff0c\u653b\u51fb\u8005\u7b97\u529b \\( q = 0.2 \\) \uff0820%\uff09\u3002 \u6211\u4eec\u8ba1\u7b97\u4e0d\u540c\u786e\u8ba4\u6570 \\( n \\) \u4e0b\u7684\u9006\u8f6c\u6982\u7387\uff1a \u786e\u8ba4\u6570 \\( n \\) \u9006\u8f6c\u6982\u7387 \\( P = \\left( \\frac{0.2}{0.8} \\right)^{n+1} \\) \u5b89\u5168\u7ea7\u522b 1 \\( (0.25)^2 = 6.25\\% \\) \u9ad8\u98ce\u9669 3 \\( (0.25)^4 = 0.39\\% \\) \u4e2d\u7b49\u98ce\u9669 6 \\( (0.25)^7 \\approx 0.006\\% \\) \u6781\u4f4e\u98ce\u9669 12 \\( (0.25)^{13} \\approx 1.5 \\times 10^{-8}\\% \\) \u8fd1\u4e4e\u4e0d\u53ef\u80fd \u89e3\u8bfb \uff1a \u00b6 6\u6b21\u786e\u8ba4\u540e\uff0c\u653b\u51fb\u8005\u4ec5\u6709 0.006% \u7684\u6210\u529f\u6982\u7387\uff08\u7ea61/15,000\uff09\u3002 12\u6b21\u786e\u8ba4\u540e\uff0c\u6982\u7387\u4f4e\u81f3\u53ef\u5ffd\u7565\u4e0d\u8ba1\uff08 \\( 1.5 \\times 10^{-8}\\% \\) \uff09\u3002 4. \u4e3a\u4ec0\u4e48\u6307\u6570\u7ea7\u4e0b\u964d\uff1f \u00b6 \u6bcf\u6b21\u65b0\u589e\u786e\u8ba4\uff0c\u653b\u51fb\u8005\u9700\u8981\u591a\u6316\u4e00\u4e2a\u533a\u5757\uff0c\u800c\u8bda\u5b9e\u7f51\u7edc\u4e5f\u5728\u540c\u6b65\u589e\u957f\u3002 \u653b\u51fb\u8005\u7684\u52a3\u52bf\u662f\u7d2f\u79ef\u7684\uff0c\u56e0\u4e3a \\( \\frac{q}{p} < 1 \\) \uff0c\u6240\u4ee5 \\( \\left( \\frac{q}{p} \\right)^{n+1} \\) \u4f1a\u6025\u901f\u8d8b\u8fd1\u4e8e0\u3002 5. \u5982\u679c\u653b\u51fb\u8005\u7b97\u529b\u63a5\u8fd150%\uff1f \u00b6 \u82e5 \\( q = 0.4 \\) \uff0840%\u7b97\u529b\uff09\uff0c\u5219\uff1a \\[ P_{\\text{\u9006\u8f6c}} = \\left( \\frac{0.4}{0.6} \\right)^{n+1} = \\left( \\frac{2}{3} \\right)^{n+1} \\] \u786e\u8ba4\u6570 \\( n \\) \u9006\u8f6c\u6982\u7387 1 \\( \\left( \\frac{2}{3} \\right)^2 \\approx 44.4\\% \\) 6 \\( \\left( \\frac{2}{3} \\right)^7 \\approx 5.8\\% \\) 12 \\( \\left( \\frac{2}{3} \\right)^{13} \\approx 0.5\\% \\) \u5373\u4f7f\u653b\u51fb\u8005\u62e5\u670940%\u7b97\u529b\uff0c6\u6b21\u786e\u8ba4\u540e\u9006\u8f6c\u6982\u7387\u4ecd\u4ec5 5.8% \uff0c12\u6b21\u540e\u964d\u81f3 0.5% \u3002 \u4f46\u73b0\u5b9e\u4e2d\uff0c\u653b\u51fb\u8005\u5f88\u96be\u957f\u671f\u7ef4\u6301\u9ad8\u7b97\u529b\uff08\u6210\u672c\u8fc7\u9ad8\uff09\u3002 6. \u5b9e\u9645\u5e94\u7528\u4e2d\u7684\u201c6\u6b21\u786e\u8ba4\u201d \u00b6 \u6bd4\u7279\u5e01\u9009\u62e96\u6b21\u786e\u8ba4\uff0c\u662f\u56e0\u4e3a\u5b83\u5728**\u5b89\u5168\u6027\u4e0e\u7b49\u5f85\u65f6\u95f4**\u4e4b\u95f4\u53d6\u5f97\u4e86\u5e73\u8861\uff1a 3\u6b21\u786e\u8ba4 \uff1a\u9006\u8f6c\u6982\u7387\u7ea60.39%\uff08\u9002\u5408\u5c0f\u989d\u4ea4\u6613\uff09\u3002 6\u6b21\u786e\u8ba4 \uff1a\u9006\u8f6c\u6982\u7387\u7ea60.006%\uff08\u9002\u5408\u5927\u989d\u4ea4\u6613\uff09\u3002 12\u6b21\u786e\u8ba4 \uff1a\u8fd1\u4e4e\u7edd\u5bf9\u5b89\u5168\uff08\u673a\u6784\u7ea7\u9700\u6c42\uff09\u3002 \u6700\u7ec8\u7ed3\u8bba \u00b6 6\u6b21\u786e\u8ba4\u7684\u5b89\u5168\u6027\u662f\u6570\u5b66\u4fdd\u8bc1\u7684 \uff0c\u9006\u8f6c\u6982\u7387\u6781\u4f4e\uff08\u9664\u975e51%\u653b\u51fb\uff09\u3002 \u6838\u5fc3\u516c\u5f0f\uff1a \\(P_{\\text{\u9006\u8f6c}} = \\left( \\frac{\\text{\u653b\u51fb\u8005\u7b97\u529b\u5360\u6bd4}}{\\text{\u8bda\u5b9e\u7b97\u529b\u5360\u6bd4}} \\right)^{\\text{\u786e\u8ba4\u6570}+1}\\) \u7528\u6237\u5efa\u8bae \uff1a \u5c0f\u989d\u4ea4\u6613\uff1a1-3\u6b21\u786e\u8ba4\u5373\u53ef\u3002 \u5927\u989d\u4ea4\u6613\uff1a\u7b49\u5f856\u6b21\u786e\u8ba4\u3002 \u8d85\u9ad8\u5b89\u5168\u9700\u6c42\uff1a12+\u6b21\u786e\u8ba4\u3002 \u8fd9\u79cd\u6a21\u578b\u786e\u4fdd\u4e86\u6bd4\u7279\u5e01\u5728\u53bb\u4e2d\u5fc3\u5316\u73af\u5883\u4e0b\uff0c\u65e2\u80fd\u62b5\u6297\u653b\u51fb\uff0c\u53c8\u80fd\u4fdd\u6301\u5408\u7406\u7684\u4ea4\u6613\u786e\u8ba4\u901f\u5ea6\u3002","title":"Theory"},{"location":"bitcoin/theory/#6","text":"\u8981\u7406\u89e3\u4e3a\u4ec0\u4e486\u6b21\u786e\u8ba4\u540e\u4ea4\u6613\u51e0\u4e4e\u4e0d\u53ef\u9006\uff0c\u6211\u4eec\u9700\u8981\u7528 \u6982\u7387\u8bba \u548c \u6cca\u677e\u8fc7\u7a0b \u6765\u5efa\u6a21\u6bd4\u7279\u5e01\u7684\u533a\u5757\u751f\u6210\u7ade\u4e89\u3002\u4ee5\u4e0b\u662f\u5177\u4f53\u8ba1\u7b97\u6b65\u9aa4\uff1a","title":"6\u6b21\u786e\u8ba4\u80cc\u540e\u7684\u6570\u5b66\u8ba1\u7b97\uff08\u8be6\u7ec6\u63a8\u5bfc\uff09"},{"location":"bitcoin/theory/#1","text":"\u8bda\u5b9e\u77ff\u5de5\u7b97\u529b\u5360\u6bd4 \uff1a \\( p \\) \uff08\u4f8b\u5982 \\( p = 0.7 \\) \u8868\u793a70%\u7b97\u529b\uff09\u3002 \u653b\u51fb\u8005\u7b97\u529b\u5360\u6bd4 \uff1a \\( q \\) \uff08\u4f8b\u5982 \\( q = 0.3 \\) \uff0c\u4e14 \\( p + q = 1 \\) \uff09\u3002 \u786e\u8ba4\u6570\uff08n\uff09 \uff1a\u653b\u51fb\u8005\u9700\u8981\u4ece\u4ea4\u6613\u6240\u5728\u533a\u5757\u4e4b\u524d\u91cd\u65b0\u6316\u51fa \\( n+1 \\) \u4e2a\u533a\u5757\uff0c\u624d\u80fd\u8986\u76d6\u539f\u94fe\u3002 \u533a\u5757\u751f\u6210\u901f\u7387 \uff1a\u6bd4\u7279\u5e01\u5e73\u574710\u5206\u949f\u4e00\u4e2a\u533a\u5757\uff0c\u4f46\u653b\u51fb\u8005\u548c\u8bda\u5b9e\u7f51\u7edc\u662f\u5e76\u884c\u6316\u77ff\uff0c\u9075\u5faa \u6cca\u677e\u5206\u5e03 \u3002","title":"1. \u5047\u8bbe\u4e0e\u5b9a\u4e49"},{"location":"bitcoin/theory/#2","text":"\u653b\u51fb\u8005\u9700\u8981\u6bd4\u8bda\u5b9e\u7f51\u7edc\u66f4\u5feb\u6316\u51fa \\( n+1 \\) \u4e2a\u533a\u5757\u3002\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a \u201c\u8d4c\u5f92\u7834\u4ea7\u95ee\u9898\u201d \uff08Gambler's Ruin Problem\uff09\uff0c\u5176\u89e3\u4e3a\uff1a \\[ P_{\\text{\u9006\u8f6c}} = \\begin{cases} \\left( \\frac{q}{p} \\right)^{n+1} & \\text{if } q < p \\quad (\\text{\u653b\u51fb\u8005\u7b97\u529b < 50%}) \\\\ 1 & \\text{if } q \\geq p \\quad (\\text{51%\u653b\u51fb}) \\end{cases} \\]","title":"2. \u653b\u51fb\u8005\u6210\u529f\u9006\u8f6c\u4ea4\u6613\u7684\u6982\u7387"},{"location":"bitcoin/theory/#_1","text":"\u5982\u679c\u653b\u51fb\u8005\u7b97\u529b \\( q < 50\\% \\) \uff0c\u9006\u8f6c\u6982\u7387\u968f \\( n \\) \u6307\u6570\u7ea7\u4e0b\u964d \u3002 \u5982\u679c \\( q \\geq 50\\% \\) \uff0c\u653b\u51fb\u8005\u6700\u7ec8\u4e00\u5b9a\u80fd\u9006\u8f6c\u4ea4\u6613\uff0851%\u653b\u51fb\uff09\u3002","title":"\u5173\u952e\u7ed3\u8bba\uff1a"},{"location":"bitcoin/theory/#3","text":"\u5047\u8bbe\uff1a \u8bda\u5b9e\u7b97\u529b \\( p = 0.8 \\) \uff0880%\uff09\uff0c\u653b\u51fb\u8005\u7b97\u529b \\( q = 0.2 \\) \uff0820%\uff09\u3002 \u6211\u4eec\u8ba1\u7b97\u4e0d\u540c\u786e\u8ba4\u6570 \\( n \\) \u4e0b\u7684\u9006\u8f6c\u6982\u7387\uff1a \u786e\u8ba4\u6570 \\( n \\) \u9006\u8f6c\u6982\u7387 \\( P = \\left( \\frac{0.2}{0.8} \\right)^{n+1} \\) \u5b89\u5168\u7ea7\u522b 1 \\( (0.25)^2 = 6.25\\% \\) \u9ad8\u98ce\u9669 3 \\( (0.25)^4 = 0.39\\% \\) \u4e2d\u7b49\u98ce\u9669 6 \\( (0.25)^7 \\approx 0.006\\% \\) \u6781\u4f4e\u98ce\u9669 12 \\( (0.25)^{13} \\approx 1.5 \\times 10^{-8}\\% \\) \u8fd1\u4e4e\u4e0d\u53ef\u80fd","title":"3. \u5177\u4f53\u8ba1\u7b97\u793a\u4f8b"},{"location":"bitcoin/theory/#_2","text":"6\u6b21\u786e\u8ba4\u540e\uff0c\u653b\u51fb\u8005\u4ec5\u6709 0.006% \u7684\u6210\u529f\u6982\u7387\uff08\u7ea61/15,000\uff09\u3002 12\u6b21\u786e\u8ba4\u540e\uff0c\u6982\u7387\u4f4e\u81f3\u53ef\u5ffd\u7565\u4e0d\u8ba1\uff08 \\( 1.5 \\times 10^{-8}\\% \\) \uff09\u3002","title":"\u89e3\u8bfb\uff1a"},{"location":"bitcoin/theory/#4","text":"\u6bcf\u6b21\u65b0\u589e\u786e\u8ba4\uff0c\u653b\u51fb\u8005\u9700\u8981\u591a\u6316\u4e00\u4e2a\u533a\u5757\uff0c\u800c\u8bda\u5b9e\u7f51\u7edc\u4e5f\u5728\u540c\u6b65\u589e\u957f\u3002 \u653b\u51fb\u8005\u7684\u52a3\u52bf\u662f\u7d2f\u79ef\u7684\uff0c\u56e0\u4e3a \\( \\frac{q}{p} < 1 \\) \uff0c\u6240\u4ee5 \\( \\left( \\frac{q}{p} \\right)^{n+1} \\) \u4f1a\u6025\u901f\u8d8b\u8fd1\u4e8e0\u3002","title":"4. \u4e3a\u4ec0\u4e48\u6307\u6570\u7ea7\u4e0b\u964d\uff1f"},{"location":"bitcoin/theory/#5-50","text":"\u82e5 \\( q = 0.4 \\) \uff0840%\u7b97\u529b\uff09\uff0c\u5219\uff1a \\[ P_{\\text{\u9006\u8f6c}} = \\left( \\frac{0.4}{0.6} \\right)^{n+1} = \\left( \\frac{2}{3} \\right)^{n+1} \\] \u786e\u8ba4\u6570 \\( n \\) \u9006\u8f6c\u6982\u7387 1 \\( \\left( \\frac{2}{3} \\right)^2 \\approx 44.4\\% \\) 6 \\( \\left( \\frac{2}{3} \\right)^7 \\approx 5.8\\% \\) 12 \\( \\left( \\frac{2}{3} \\right)^{13} \\approx 0.5\\% \\) \u5373\u4f7f\u653b\u51fb\u8005\u62e5\u670940%\u7b97\u529b\uff0c6\u6b21\u786e\u8ba4\u540e\u9006\u8f6c\u6982\u7387\u4ecd\u4ec5 5.8% \uff0c12\u6b21\u540e\u964d\u81f3 0.5% \u3002 \u4f46\u73b0\u5b9e\u4e2d\uff0c\u653b\u51fb\u8005\u5f88\u96be\u957f\u671f\u7ef4\u6301\u9ad8\u7b97\u529b\uff08\u6210\u672c\u8fc7\u9ad8\uff09\u3002","title":"5. \u5982\u679c\u653b\u51fb\u8005\u7b97\u529b\u63a5\u8fd150%\uff1f"},{"location":"bitcoin/theory/#6-6","text":"\u6bd4\u7279\u5e01\u9009\u62e96\u6b21\u786e\u8ba4\uff0c\u662f\u56e0\u4e3a\u5b83\u5728**\u5b89\u5168\u6027\u4e0e\u7b49\u5f85\u65f6\u95f4**\u4e4b\u95f4\u53d6\u5f97\u4e86\u5e73\u8861\uff1a 3\u6b21\u786e\u8ba4 \uff1a\u9006\u8f6c\u6982\u7387\u7ea60.39%\uff08\u9002\u5408\u5c0f\u989d\u4ea4\u6613\uff09\u3002 6\u6b21\u786e\u8ba4 \uff1a\u9006\u8f6c\u6982\u7387\u7ea60.006%\uff08\u9002\u5408\u5927\u989d\u4ea4\u6613\uff09\u3002 12\u6b21\u786e\u8ba4 \uff1a\u8fd1\u4e4e\u7edd\u5bf9\u5b89\u5168\uff08\u673a\u6784\u7ea7\u9700\u6c42\uff09\u3002","title":"6. \u5b9e\u9645\u5e94\u7528\u4e2d\u7684\u201c6\u6b21\u786e\u8ba4\u201d"},{"location":"bitcoin/theory/#_3","text":"6\u6b21\u786e\u8ba4\u7684\u5b89\u5168\u6027\u662f\u6570\u5b66\u4fdd\u8bc1\u7684 \uff0c\u9006\u8f6c\u6982\u7387\u6781\u4f4e\uff08\u9664\u975e51%\u653b\u51fb\uff09\u3002 \u6838\u5fc3\u516c\u5f0f\uff1a \\(P_{\\text{\u9006\u8f6c}} = \\left( \\frac{\\text{\u653b\u51fb\u8005\u7b97\u529b\u5360\u6bd4}}{\\text{\u8bda\u5b9e\u7b97\u529b\u5360\u6bd4}} \\right)^{\\text{\u786e\u8ba4\u6570}+1}\\) \u7528\u6237\u5efa\u8bae \uff1a \u5c0f\u989d\u4ea4\u6613\uff1a1-3\u6b21\u786e\u8ba4\u5373\u53ef\u3002 \u5927\u989d\u4ea4\u6613\uff1a\u7b49\u5f856\u6b21\u786e\u8ba4\u3002 \u8d85\u9ad8\u5b89\u5168\u9700\u6c42\uff1a12+\u6b21\u786e\u8ba4\u3002 \u8fd9\u79cd\u6a21\u578b\u786e\u4fdd\u4e86\u6bd4\u7279\u5e01\u5728\u53bb\u4e2d\u5fc3\u5316\u73af\u5883\u4e0b\uff0c\u65e2\u80fd\u62b5\u6297\u653b\u51fb\uff0c\u53c8\u80fd\u4fdd\u6301\u5408\u7406\u7684\u4ea4\u6613\u786e\u8ba4\u901f\u5ea6\u3002","title":"\u6700\u7ec8\u7ed3\u8bba"},{"location":"cc/cudac/","text":"4090 \u7684cuda\u7279\u6027 \u00b6 \u57fa\u672capi \u00b6 \u5185\u5b58\u7ba1\u7406 \u00b6 cudaMalloc\uff1a\u5728\u8bbe\u5907\uff08GPU\uff09\u4e0a\u5206\u914d\u5185\u5b58\u3002 cudaFree\uff1a\u91ca\u653e\u8bbe\u5907\u4e0a\u7684\u5185\u5b58\u3002 cudaMemcpy\uff1a\u5728\u4e3b\u673a\uff08CPU\uff09\u548c\u8bbe\u5907\u4e4b\u95f4\u590d\u5236\u5185\u5b58\u3002 \u540c\u6b65 \u00b6 cudaDeviceSynchronize\uff1a\u7b49\u5f85\u8bbe\u5907\u4e0a\u7684\u6240\u6709\u5148\u524d\u53d1\u5e03\u7684\u4efb\u52a1\u5b8c\u6210\u3002 __syncthreads()\uff1a\u5728\u4e00\u4e2a\u7ebf\u7a0b\u5757\u5185\u540c\u6b65\u6240\u6709\u7ebf\u7a0b\u3002 \u8bbe\u5907\u7ba1\u7406 \u00b6 cudaSetDevice\uff1a\u8bbe\u7f6e\u5f53\u524d\u4f7f\u7528\u7684GPU\u8bbe\u5907\u3002 cudaGetDeviceProperties\uff1a\u83b7\u53d6\u8bbe\u5907\u7684\u5c5e\u6027\u3002 \u9519\u8bef\u5904\u7406 \u00b6 cudaGetLastError\uff1a\u8fd4\u56de\u4e0a\u4e00\u4e2aCUDA\u8c03\u7528\u7684\u9519\u8bef\u72b6\u6001\u3002 cudaGetErrorString\uff1a\u8fd4\u56de\u9519\u8bef\u4ee3\u7801\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u63cf\u8ff0\u3002 \u6d41\uff08Stream\uff09\u7ba1\u7406 \u00b6 cudaStreamCreate\uff1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6d41\u3002 cudaStreamDestroy\uff1a\u9500\u6bc1\u4e00\u4e2a\u6d41\u3002 cudaStreamSynchronize\uff1a\u7b49\u5f85\u4e00\u4e2a\u6d41\u4e2d\u7684\u6240\u6709\u64cd\u4f5c\u5b8c\u6210\u3002 \u4e8b\u4ef6\uff08Event\uff09\u7ba1\u7406 \u00b6 cudaEventCreate\uff1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4e8b\u4ef6\u3002 cudaEventRecord\uff1a\u5728\u4e00\u4e2a\u6d41\u4e2d\u8bb0\u5f55\u4e00\u4e2a\u4e8b\u4ef6\u3002 cudaEventSynchronize\uff1a\u7b49\u5f85\u4e00\u4e2a\u4e8b\u4ef6\u5b8c\u6210\u3002 \u539f\u5b50\u64cd\u4f5c \u00b6 atomicAdd\uff1a\u539f\u5b50\u5730\u589e\u52a0\u4e00\u4e2a\u503c\u3002 atomicCAS\uff1a\u539f\u5b50\u5730\u6bd4\u8f83\u5e76\u4ea4\u6362\u4e00\u4e2a\u503c\u3002 \u4ece\u6307\u4ee4\u89d2\u5ea6\u7406\u89e3 \u00b6 ptx \u72ec\u7acb\u4e8e\u7279\u5b9agpu\u67b6\u6784 nvcc \u7f16\u8bd1 .cu \u6587\u4ef6 ===> .ptx \u4ee3\u7801 .ptx -> gpu\u67b6\u6784\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 \u9a71\u52a8\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u5b8c\u6210\uff0c\u6216\u8005\u7f16\u8bd1\u65f6\u901a\u8fc7\u6307\u5b9a\u76ee\u6807\u67b6\u6784 -arch=sm_75 \u5b8c\u6210 ptx\u6307\u4ee4 \u00b6 PTX\u6307\u4ee4\u96c6\u5305\u62ec\u7b97\u672f\u6307\u4ee4\u3001\u5185\u5b58\u8bbf\u95ee\u6307\u4ee4\u3001\u63a7\u5236\u6d41\u6307\u4ee4\u7b49\u3002\u4f8b\u5982\uff1a add.f32\uff1a\u6d6e\u70b9\u6570\u52a0\u6cd5\u3002 ld.global\uff1a\u4ece\u5168\u5c40\u5185\u5b58\u52a0\u8f7d\u6570\u636e\u3002 st.shared\uff1a\u5b58\u50a8\u6570\u636e\u5230\u5171\u4eab\u5185\u5b58\u3002 bar.sync\uff1a\u7ebf\u7a0b\u5757\u5185\u7684\u540c\u6b65\u5c4f\u969c\u3002 \u4f18\u5316\u548c\u8c03\u5ea6\uff1a \u5728PTX\u5230\u4e8c\u8fdb\u5236\u4ee3\u7801\u7684\u8f6c\u6362\u8fc7\u7a0b\u4e2d\uff0c\u7f16\u8bd1\u5668\u4f1a\u8fdb\u884c\u5404\u79cd\u4f18\u5316\uff0c\u5982\u6307\u4ee4\u8c03\u5ea6\u3001\u5bc4\u5b58\u5668\u5206\u914d\u7b49\uff0c\u4ee5\u63d0\u9ad8\u4ee3\u7801\u7684\u6267\u884c\u6548\u7387\u3002 \u8fd9\u4e9b\u4f18\u5316\u65e8\u5728\u6700\u5927\u5316GPU\u7684\u5e76\u884c\u8ba1\u7b97\u80fd\u529b\uff0c\u51cf\u5c11\u5185\u5b58\u8bbf\u95ee\u5ef6\u8fdf\u548c\u7ebf\u7a0b\u7b49\u5f85\u65f6\u95f4\u3002 \u8fd0\u884c\u65f6\u52a0\u8f7d\uff1a \u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0cCUDA\u9a71\u52a8\u7a0b\u5e8f\u4f1a\u52a0\u8f7d\u4e8c\u8fdb\u5236\u4ee3\u7801\u5230GPU\uff0c\u5e76\u7ba1\u7406\u7ebf\u7a0b\u7684\u8c03\u5ea6\u548c\u6267\u884c\u3002 PTX\u4ee3\u7801\u4e5f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u7531\u9a71\u52a8\u7a0b\u5e8f\u8fdb\u884c\u5373\u65f6\u7f16\u8bd1\uff08JIT\uff09\uff0c\u4ee5\u9002\u5e94\u4e0d\u540c\u7684GPU\u67b6\u6784\u3002 \u5177\u4f53\u6307\u4ee4\uff1a \u7b97\u672f\u6307\u4ee4\uff1a add\uff1a\u6574\u6570\u52a0\u6cd5\u3002 sub\uff1a\u6574\u6570\u51cf\u6cd5\u3002 mul\uff1a\u6574\u6570\u4e58\u6cd5\u3002 mad\uff1a\u4e58\u52a0\uff08multiply-add\uff09\u3002 fadd\uff1a\u6d6e\u70b9\u6570\u52a0\u6cd5\u3002 fmul\uff1a\u6d6e\u70b9\u6570\u4e58\u6cd5\u3002 \u5185\u5b58\u8bbf\u95ee\u6307\u4ee4\uff1a ld\uff1a\u4ece\u5185\u5b58\u52a0\u8f7d\u6570\u636e\u3002 st\uff1a\u5c06\u6570\u636e\u5b58\u50a8\u5230\u5185\u5b58\u3002 ld.global\uff1a\u4ece\u5168\u5c40\u5185\u5b58\u52a0\u8f7d\u6570\u636e\u3002 st.shared\uff1a\u5c06\u6570\u636e\u5b58\u50a8\u5230\u5171\u4eab\u5185\u5b58\u3002 \u63a7\u5236\u6d41\u6307\u4ee4\uff1a bra\uff1a\u65e0\u6761\u4ef6\u8df3\u8f6c\u3002 setp\uff1a\u8bbe\u7f6e\u8c13\u8bcd\u5bc4\u5b58\u5668\u3002 @p\uff1a\u57fa\u4e8e\u8c13\u8bcd\u7684\u6761\u4ef6\u6267\u884c\u3002 \u540c\u6b65\u6307\u4ee4\uff1a bar.sync\uff1a\u7ebf\u7a0b\u5757\u5185\u7684\u540c\u6b65\u5c4f\u969c\u3002 membar\uff1a\u5185\u5b58\u5c4f\u969c\uff0c\u786e\u4fdd\u5185\u5b58\u64cd\u4f5c\u7684\u987a\u5e8f\u3002 \u539f\u5b50\u64cd\u4f5c\u6307\u4ee4\uff1a atom.add\uff1a\u539f\u5b50\u52a0\u6cd5\u3002 atom.cas\uff1a\u539f\u5b50\u6bd4\u8f83\u5e76\u4ea4\u6362\u3002 \u8f6c\u6362\u6307\u4ee4\uff1a cvt\uff1a\u7c7b\u578b\u8f6c\u6362\uff08\u5982\u6574\u6570\u5230\u6d6e\u70b9\u6570\uff09\u3002 float2int\uff1a\u6d6e\u70b9\u6570\u5230\u6574\u6570\u7684\u8f6c\u6362\u3002 \u7279\u6b8a\u6307\u4ee4\uff1a tex\uff1a\u7eb9\u7406\u5185\u5b58\u8bbf\u95ee\u3002 s2r\uff1a\u7279\u6b8a\u5bc4\u5b58\u5668\u8bbf\u95ee\u3002 \u903b\u8f91\u6307\u4ee4\uff1a and\uff1a\u6309\u4f4d\u4e0e\u3002 or\uff1a\u6309\u4f4d\u6216\u3002 not\uff1a\u6309\u4f4d\u975e\u3002 \u7ee7\u7eed\u5b66\u4e60 \u00b6 \u4e00\u4e9b\u51fd\u6570 #include <ATen/Tensor.h> #include <ATen/Functions.h> #include <torch/csrc/utils/pybind.h> void square_cuda_forward ( void * input , void * output , int size ); at :: Tensor square_forward ( const at :: Tensor & input ) { auto output = at :: zeros_like ( input ); square_cuda_forward ( input . data_ptr (), output . data_ptr (), input . numel ()); return output ; } PYBIND11_MODULE ( TORCH_EXTENSION_NAME , m ) { m . def ( \"square_forward\" , & square_forward , \"Square forward (CUDA)\" ); } os . environ [ \"TORCH_CUDA_ARCH_LIST\" ] = \"8.9\" start = time . time () square_cuda = load ( name = \"square_cuda\" , sources = [ f \" { dir_path } /square_kernel.cu\" ], verbose = True , build_directory = build_dir ) end = time . time () print ( f \"Time taken: { end - start } seconds\" ) tilelang \u5b66\u4e60 \u00b6 from : https://leiblog.wang/Debug-Tools-for-TileLang/ ctypes \u8c03\u7528\u7684\u7406\u8bba\u5f00\u9500\u5e94\u8be5\u5728 500ns ~ 5\u00b5s \u4e4b\u95f4\uff0c\u57fa\u672c\u53ef\u5ffd\u7565\u3002 best practice \u00b6 https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/","title":"4090 \u7684cuda\u7279\u6027"},{"location":"cc/cudac/#4090-cuda","text":"","title":"4090 \u7684cuda\u7279\u6027"},{"location":"cc/cudac/#api","text":"","title":"\u57fa\u672capi"},{"location":"cc/cudac/#_1","text":"cudaMalloc\uff1a\u5728\u8bbe\u5907\uff08GPU\uff09\u4e0a\u5206\u914d\u5185\u5b58\u3002 cudaFree\uff1a\u91ca\u653e\u8bbe\u5907\u4e0a\u7684\u5185\u5b58\u3002 cudaMemcpy\uff1a\u5728\u4e3b\u673a\uff08CPU\uff09\u548c\u8bbe\u5907\u4e4b\u95f4\u590d\u5236\u5185\u5b58\u3002","title":"\u5185\u5b58\u7ba1\u7406"},{"location":"cc/cudac/#_2","text":"cudaDeviceSynchronize\uff1a\u7b49\u5f85\u8bbe\u5907\u4e0a\u7684\u6240\u6709\u5148\u524d\u53d1\u5e03\u7684\u4efb\u52a1\u5b8c\u6210\u3002 __syncthreads()\uff1a\u5728\u4e00\u4e2a\u7ebf\u7a0b\u5757\u5185\u540c\u6b65\u6240\u6709\u7ebf\u7a0b\u3002","title":"\u540c\u6b65"},{"location":"cc/cudac/#_3","text":"cudaSetDevice\uff1a\u8bbe\u7f6e\u5f53\u524d\u4f7f\u7528\u7684GPU\u8bbe\u5907\u3002 cudaGetDeviceProperties\uff1a\u83b7\u53d6\u8bbe\u5907\u7684\u5c5e\u6027\u3002","title":"\u8bbe\u5907\u7ba1\u7406"},{"location":"cc/cudac/#_4","text":"cudaGetLastError\uff1a\u8fd4\u56de\u4e0a\u4e00\u4e2aCUDA\u8c03\u7528\u7684\u9519\u8bef\u72b6\u6001\u3002 cudaGetErrorString\uff1a\u8fd4\u56de\u9519\u8bef\u4ee3\u7801\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u63cf\u8ff0\u3002","title":"\u9519\u8bef\u5904\u7406"},{"location":"cc/cudac/#stream","text":"cudaStreamCreate\uff1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6d41\u3002 cudaStreamDestroy\uff1a\u9500\u6bc1\u4e00\u4e2a\u6d41\u3002 cudaStreamSynchronize\uff1a\u7b49\u5f85\u4e00\u4e2a\u6d41\u4e2d\u7684\u6240\u6709\u64cd\u4f5c\u5b8c\u6210\u3002","title":"\u6d41\uff08Stream\uff09\u7ba1\u7406"},{"location":"cc/cudac/#event","text":"cudaEventCreate\uff1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4e8b\u4ef6\u3002 cudaEventRecord\uff1a\u5728\u4e00\u4e2a\u6d41\u4e2d\u8bb0\u5f55\u4e00\u4e2a\u4e8b\u4ef6\u3002 cudaEventSynchronize\uff1a\u7b49\u5f85\u4e00\u4e2a\u4e8b\u4ef6\u5b8c\u6210\u3002","title":"\u4e8b\u4ef6\uff08Event\uff09\u7ba1\u7406"},{"location":"cc/cudac/#_5","text":"atomicAdd\uff1a\u539f\u5b50\u5730\u589e\u52a0\u4e00\u4e2a\u503c\u3002 atomicCAS\uff1a\u539f\u5b50\u5730\u6bd4\u8f83\u5e76\u4ea4\u6362\u4e00\u4e2a\u503c\u3002","title":"\u539f\u5b50\u64cd\u4f5c"},{"location":"cc/cudac/#_6","text":"ptx \u72ec\u7acb\u4e8e\u7279\u5b9agpu\u67b6\u6784 nvcc \u7f16\u8bd1 .cu \u6587\u4ef6 ===> .ptx \u4ee3\u7801 .ptx -> gpu\u67b6\u6784\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 \u9a71\u52a8\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u5b8c\u6210\uff0c\u6216\u8005\u7f16\u8bd1\u65f6\u901a\u8fc7\u6307\u5b9a\u76ee\u6807\u67b6\u6784 -arch=sm_75 \u5b8c\u6210","title":"\u4ece\u6307\u4ee4\u89d2\u5ea6\u7406\u89e3"},{"location":"cc/cudac/#ptx","text":"PTX\u6307\u4ee4\u96c6\u5305\u62ec\u7b97\u672f\u6307\u4ee4\u3001\u5185\u5b58\u8bbf\u95ee\u6307\u4ee4\u3001\u63a7\u5236\u6d41\u6307\u4ee4\u7b49\u3002\u4f8b\u5982\uff1a add.f32\uff1a\u6d6e\u70b9\u6570\u52a0\u6cd5\u3002 ld.global\uff1a\u4ece\u5168\u5c40\u5185\u5b58\u52a0\u8f7d\u6570\u636e\u3002 st.shared\uff1a\u5b58\u50a8\u6570\u636e\u5230\u5171\u4eab\u5185\u5b58\u3002 bar.sync\uff1a\u7ebf\u7a0b\u5757\u5185\u7684\u540c\u6b65\u5c4f\u969c\u3002 \u4f18\u5316\u548c\u8c03\u5ea6\uff1a \u5728PTX\u5230\u4e8c\u8fdb\u5236\u4ee3\u7801\u7684\u8f6c\u6362\u8fc7\u7a0b\u4e2d\uff0c\u7f16\u8bd1\u5668\u4f1a\u8fdb\u884c\u5404\u79cd\u4f18\u5316\uff0c\u5982\u6307\u4ee4\u8c03\u5ea6\u3001\u5bc4\u5b58\u5668\u5206\u914d\u7b49\uff0c\u4ee5\u63d0\u9ad8\u4ee3\u7801\u7684\u6267\u884c\u6548\u7387\u3002 \u8fd9\u4e9b\u4f18\u5316\u65e8\u5728\u6700\u5927\u5316GPU\u7684\u5e76\u884c\u8ba1\u7b97\u80fd\u529b\uff0c\u51cf\u5c11\u5185\u5b58\u8bbf\u95ee\u5ef6\u8fdf\u548c\u7ebf\u7a0b\u7b49\u5f85\u65f6\u95f4\u3002 \u8fd0\u884c\u65f6\u52a0\u8f7d\uff1a \u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0cCUDA\u9a71\u52a8\u7a0b\u5e8f\u4f1a\u52a0\u8f7d\u4e8c\u8fdb\u5236\u4ee3\u7801\u5230GPU\uff0c\u5e76\u7ba1\u7406\u7ebf\u7a0b\u7684\u8c03\u5ea6\u548c\u6267\u884c\u3002 PTX\u4ee3\u7801\u4e5f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u7531\u9a71\u52a8\u7a0b\u5e8f\u8fdb\u884c\u5373\u65f6\u7f16\u8bd1\uff08JIT\uff09\uff0c\u4ee5\u9002\u5e94\u4e0d\u540c\u7684GPU\u67b6\u6784\u3002 \u5177\u4f53\u6307\u4ee4\uff1a \u7b97\u672f\u6307\u4ee4\uff1a add\uff1a\u6574\u6570\u52a0\u6cd5\u3002 sub\uff1a\u6574\u6570\u51cf\u6cd5\u3002 mul\uff1a\u6574\u6570\u4e58\u6cd5\u3002 mad\uff1a\u4e58\u52a0\uff08multiply-add\uff09\u3002 fadd\uff1a\u6d6e\u70b9\u6570\u52a0\u6cd5\u3002 fmul\uff1a\u6d6e\u70b9\u6570\u4e58\u6cd5\u3002 \u5185\u5b58\u8bbf\u95ee\u6307\u4ee4\uff1a ld\uff1a\u4ece\u5185\u5b58\u52a0\u8f7d\u6570\u636e\u3002 st\uff1a\u5c06\u6570\u636e\u5b58\u50a8\u5230\u5185\u5b58\u3002 ld.global\uff1a\u4ece\u5168\u5c40\u5185\u5b58\u52a0\u8f7d\u6570\u636e\u3002 st.shared\uff1a\u5c06\u6570\u636e\u5b58\u50a8\u5230\u5171\u4eab\u5185\u5b58\u3002 \u63a7\u5236\u6d41\u6307\u4ee4\uff1a bra\uff1a\u65e0\u6761\u4ef6\u8df3\u8f6c\u3002 setp\uff1a\u8bbe\u7f6e\u8c13\u8bcd\u5bc4\u5b58\u5668\u3002 @p\uff1a\u57fa\u4e8e\u8c13\u8bcd\u7684\u6761\u4ef6\u6267\u884c\u3002 \u540c\u6b65\u6307\u4ee4\uff1a bar.sync\uff1a\u7ebf\u7a0b\u5757\u5185\u7684\u540c\u6b65\u5c4f\u969c\u3002 membar\uff1a\u5185\u5b58\u5c4f\u969c\uff0c\u786e\u4fdd\u5185\u5b58\u64cd\u4f5c\u7684\u987a\u5e8f\u3002 \u539f\u5b50\u64cd\u4f5c\u6307\u4ee4\uff1a atom.add\uff1a\u539f\u5b50\u52a0\u6cd5\u3002 atom.cas\uff1a\u539f\u5b50\u6bd4\u8f83\u5e76\u4ea4\u6362\u3002 \u8f6c\u6362\u6307\u4ee4\uff1a cvt\uff1a\u7c7b\u578b\u8f6c\u6362\uff08\u5982\u6574\u6570\u5230\u6d6e\u70b9\u6570\uff09\u3002 float2int\uff1a\u6d6e\u70b9\u6570\u5230\u6574\u6570\u7684\u8f6c\u6362\u3002 \u7279\u6b8a\u6307\u4ee4\uff1a tex\uff1a\u7eb9\u7406\u5185\u5b58\u8bbf\u95ee\u3002 s2r\uff1a\u7279\u6b8a\u5bc4\u5b58\u5668\u8bbf\u95ee\u3002 \u903b\u8f91\u6307\u4ee4\uff1a and\uff1a\u6309\u4f4d\u4e0e\u3002 or\uff1a\u6309\u4f4d\u6216\u3002 not\uff1a\u6309\u4f4d\u975e\u3002","title":"ptx\u6307\u4ee4"},{"location":"cc/cudac/#_7","text":"\u4e00\u4e9b\u51fd\u6570 #include <ATen/Tensor.h> #include <ATen/Functions.h> #include <torch/csrc/utils/pybind.h> void square_cuda_forward ( void * input , void * output , int size ); at :: Tensor square_forward ( const at :: Tensor & input ) { auto output = at :: zeros_like ( input ); square_cuda_forward ( input . data_ptr (), output . data_ptr (), input . numel ()); return output ; } PYBIND11_MODULE ( TORCH_EXTENSION_NAME , m ) { m . def ( \"square_forward\" , & square_forward , \"Square forward (CUDA)\" ); } os . environ [ \"TORCH_CUDA_ARCH_LIST\" ] = \"8.9\" start = time . time () square_cuda = load ( name = \"square_cuda\" , sources = [ f \" { dir_path } /square_kernel.cu\" ], verbose = True , build_directory = build_dir ) end = time . time () print ( f \"Time taken: { end - start } seconds\" )","title":"\u7ee7\u7eed\u5b66\u4e60"},{"location":"cc/cudac/#tilelang","text":"from : https://leiblog.wang/Debug-Tools-for-TileLang/ ctypes \u8c03\u7528\u7684\u7406\u8bba\u5f00\u9500\u5e94\u8be5\u5728 500ns ~ 5\u00b5s \u4e4b\u95f4\uff0c\u57fa\u672c\u53ef\u5ffd\u7565\u3002","title":"tilelang \u5b66\u4e60"},{"location":"cc/cudac/#best-practice","text":"https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/","title":"best practice"},{"location":"cc/mix/","text":"mix \u00b6 from : https://zhuanlan.zhihu.com/p/460825741 \u7528\u9014\uff1a\u5c06\u82e5\u5e72\u529f\u80fd\u72ec\u7acb\u7684\u7c7b\u901a\u8fc7\u7ee7\u627f\u7684\u65b9\u5f0f\u5b9e\u73b0\u6a21\u5757\u590d\u7528\u7684C++\u6a21\u677f\u7f16\u7a0b\u6280\u5de7 template < typename ... Mixins > class MixinClass : public Mixins ... { public : MixinClass () : Mixins ...() {} // ... }; \u5c06\u6a21\u677f\u53c2\u6570\u4f5c\u4e3a\u6d3e\u751f\u7c7b\u7684\u57fa\u7c7b template < typename ... Mixins > class Point : public Mixins ... { public : double x , y ; Point () : Mixins ()..., x ( 0.0 ), y ( 0.0 ) {} Point ( double x , double y ) : Mixins ()..., x ( x ), y ( y ) {} }; class Label { public : std :: string label ; Label () : label ( \"\" ) {} }; class Color { public : unsigned char red = 0 , green = 0 , blue = 0 ; }; using MyPoint = Point < Label , Color > ; #include <iostream> using namespace std ; struct Number { typedef int value_type ; int n ; void set ( int v ) { n = v ; } int get () const { return n ; } }; template < typename BASE , typename T = typename BASE :: value_type > struct Undoable { typedef T value_type ; BASE base ; T before ; void set ( T v ) { before = base . get (); base . set ( v ); } void undo () { base . set ( before ); } T get () const { return base . get (); } }; template < typename BASE , typename T = typename BASE :: value_type > struct Redoable { typedef T value_type ; BASE base ; T after ; void set ( T v ) { after = v ; base . set ( v ); } void redo () { base . set ( after ); } T get () const { return base . get (); } }; typedef Redoable < Undoable < Number > > ReUndoableNumber ; int main () { ReUndoableNumber mynum ; mynum . set ( 42 ); mynum . set ( 84 ); cout << mynum . get () << '\\n' ; // 84 mynum . undo (); cout << mynum . get () << '\\n' ; // 42 mynum . redo (); cout << mynum . get () << '\\n' ; // back to 84 } \u8fd8\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u5b9e\u73b0\u53ef\u8ddf\u8e2a\u7684\u5f02\u5e38,\u4f46\u662f\u6682\u65f6\u4e0dcare\u4e86","title":"Mix"},{"location":"cc/mix/#mix","text":"from : https://zhuanlan.zhihu.com/p/460825741 \u7528\u9014\uff1a\u5c06\u82e5\u5e72\u529f\u80fd\u72ec\u7acb\u7684\u7c7b\u901a\u8fc7\u7ee7\u627f\u7684\u65b9\u5f0f\u5b9e\u73b0\u6a21\u5757\u590d\u7528\u7684C++\u6a21\u677f\u7f16\u7a0b\u6280\u5de7 template < typename ... Mixins > class MixinClass : public Mixins ... { public : MixinClass () : Mixins ...() {} // ... }; \u5c06\u6a21\u677f\u53c2\u6570\u4f5c\u4e3a\u6d3e\u751f\u7c7b\u7684\u57fa\u7c7b template < typename ... Mixins > class Point : public Mixins ... { public : double x , y ; Point () : Mixins ()..., x ( 0.0 ), y ( 0.0 ) {} Point ( double x , double y ) : Mixins ()..., x ( x ), y ( y ) {} }; class Label { public : std :: string label ; Label () : label ( \"\" ) {} }; class Color { public : unsigned char red = 0 , green = 0 , blue = 0 ; }; using MyPoint = Point < Label , Color > ; #include <iostream> using namespace std ; struct Number { typedef int value_type ; int n ; void set ( int v ) { n = v ; } int get () const { return n ; } }; template < typename BASE , typename T = typename BASE :: value_type > struct Undoable { typedef T value_type ; BASE base ; T before ; void set ( T v ) { before = base . get (); base . set ( v ); } void undo () { base . set ( before ); } T get () const { return base . get (); } }; template < typename BASE , typename T = typename BASE :: value_type > struct Redoable { typedef T value_type ; BASE base ; T after ; void set ( T v ) { after = v ; base . set ( v ); } void redo () { base . set ( after ); } T get () const { return base . get (); } }; typedef Redoable < Undoable < Number > > ReUndoableNumber ; int main () { ReUndoableNumber mynum ; mynum . set ( 42 ); mynum . set ( 84 ); cout << mynum . get () << '\\n' ; // 84 mynum . undo (); cout << mynum . get () << '\\n' ; // 42 mynum . redo (); cout << mynum . get () << '\\n' ; // back to 84 } \u8fd8\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u5b9e\u73b0\u53ef\u8ddf\u8e2a\u7684\u5f02\u5e38,\u4f46\u662f\u6682\u65f6\u4e0dcare\u4e86","title":"mix"},{"location":"cc/smart_point/","text":"\u667a\u80fd\u6307\u9488 \u00b6 #include <iostream> #include <cstring> #include <atomic> // ------------------- UniquePtr \u5b9e\u73b0 ------------------- template < typename T > class UniquePtr { private : T * ptr ; public : explicit UniquePtr ( T * p = nullptr ) : ptr ( p ) {} ~ UniquePtr () { delete ptr ; } UniquePtr ( const UniquePtr & ) = delete ; UniquePtr & operator = ( const UniquePtr & ) = delete ; UniquePtr ( UniquePtr && other ) noexcept : ptr ( other . ptr ) { other . ptr = nullptr ; } UniquePtr & operator = ( UniquePtr && other ) noexcept { if ( this != & other ) { delete ptr ; ptr = other . ptr ; other . ptr = nullptr ; } return * this ; } T * operator -> () const { return ptr ; } T & operator * () const { return * ptr ; } T * get () const { return ptr ; } }; // ------------------- SharedPtr \u5b9e\u73b0 ------------------- template < typename T > class SharedPtr { private : T * ptr ; std :: atomic < int >* count ; public : explicit SharedPtr ( T * p = nullptr ) : ptr ( p ), count ( new std :: atomic < int > ( p ? 1 : 0 )) {} ~ SharedPtr () { if ( -- ( * count ) == 0 ) { delete ptr ; delete count ; } } SharedPtr ( const SharedPtr & other ) : ptr ( other . ptr ), count ( other . count ) { ++ ( * count ); } SharedPtr & operator = ( const SharedPtr & other ) { if ( this != & other ) { if ( -- ( * count ) == 0 ) { delete ptr ; delete count ; } ptr = other . ptr ; count = other . count ; ++ ( * count ); } return * this ; } T * operator -> () const { return ptr ; } T & operator * () const { return * ptr ; } T * get () const { return ptr ; } }; // ------------------- MyString \u5b9e\u73b0 ------------------- class MyString { private : char * data ; size_t length ; public : MyString ( const char * str = \"\" ) { length = std :: strlen ( str ); data = new char [ length + 1 ]; std :: strcpy ( data , str ); } MyString ( const MyString & other ) { length = other . length ; data = new char [ length + 1 ]; std :: strcpy ( data , other . data ); } MyString & operator = ( const MyString & other ) { if ( this != & other ) { delete [] data ; length = other . length ; data = new char [ length + 1 ]; std :: strcpy ( data , other . data ); } return * this ; } MyString ( MyString && other ) noexcept : data ( other . data ), length ( other . length ) { other . data = nullptr ; other . length = 0 ; } MyString & operator = ( MyString && other ) noexcept { if ( this != & other ) { delete [] data ; data = other . data ; length = other . length ; other . data = nullptr ; other . length = 0 ; } return * this ; } ~ MyString () { delete [] data ; } const char * c_str () const { return data ; } }; // ------------------- \u6d4b\u8bd5\u4ee3\u7801 ------------------- int main () { UniquePtr < int > uPtr ( new int ( 10 )); std :: cout << \"UniquePtr: \" << * uPtr << std :: endl ; SharedPtr < int > sPtr1 ( new int ( 20 )); SharedPtr < int > sPtr2 = sPtr1 ; std :: cout << \"SharedPtr: \" << * sPtr1 << std :: endl ; MyString str1 ( \"Hello, World!\" ); MyString str2 = str1 ; std :: cout << \"MyString: \" << str2 . c_str () << std :: endl ; return 0 ; } template < typename T > constexpr typename std :: remove_reference < T >:: type && move ( T && arg ) noexcept { return static_cast < typename std :: remove_reference < T >:: type &&> ( arg ); } std::move \u65e0\u6761\u4ef6 \u8f6c\u6362\u4e3a\u53f3\u503c\u3002 std::forward \u6709\u6761\u4ef6 \u8f6c\u6362\u4e3a\u53f3\u503c\uff0c\u4ec5\u7528\u4e8e \u5b8c\u7f8e\u8f6c\u53d1\uff08\u914d\u5408\u6a21\u677f\uff09\u3002 template < typename T > void foo ( T && arg ) { T new_value = std :: forward < T > ( arg ); // \u4fdd\u6301\u5de6\u503c/\u53f3\u503c\u5c5e\u6027 } \u4e07\u80fd\u5f15\u7528\u548c\u53f3\u503c\u5f15\u7528 \u00b6 \u7ed1\u5b9a\u53f3\u503c\uff08\u6ca1\u6709\u540d\u5b57\u7684\u4e34\u65f6\u5bf9\u8c61\uff09 \u7684\u5f15\u7528\uff0c\u5141\u8bb8 \u79fb\u52a8\u8bed\u4e49\u3002 1. \u4e13\u95e8\u7528\u4e8e\u53f3\u503c\uff08int&& \u53ea\u80fd\u7ed1\u5b9a 10\uff0c\u4e0d\u80fd\u7ed1\u5b9a int a;\uff09\u3002 2. \u901a\u5e38\u7528\u4e8e\u79fb\u52a8\u6784\u9020\u3001\u79fb\u52a8\u8d4b\u503c\uff0c\u907f\u514d\u62f7\u8d1d\uff0c\u63d0\u9ad8\u6027\u80fd\u3002 void foo ( int && x ) { // \u53f3\u503c\u5f15\u7528 std :: cout << x << std :: endl ; } int main () { int a = 10 ; foo ( 10 ); // \u2705 \u53f3\u503c OK foo ( a ); // \u274c \u5de6\u503c\u4e0d\u80fd\u4f20\u7ed9 int&& } \u5f53 T&& \u51fa\u73b0\u5728\u51fd\u6570\u6a21\u677f\u4e2d\uff0c\u5e76\u4e14 T \u662f\u6a21\u677f\u53c2\u6570\uff0c\u5b83\u53d8\u6210 \u4e07\u80fd\u5f15\u7528\uff0c\u53ef\u4ee5\u63a5\u53d7\u5de6\u503c\u548c\u53f3\u503c\u3002 1. T&& \u5728\u6a21\u677f\u53c2\u6570\u4e2d\u65f6\u662f\u4e07\u80fd\u5f15\u7528\uff0c\u53ef\u4ee5\u63a5\u53d7\u5de6\u503c\u548c\u53f3\u503c\u3002 2. \u9700\u8981 std::forward (arg) \u6765\u4fdd\u6301\u539f\u6709\u7684\u5de6\u503c/\u53f3\u503c\u7279\u6027\u3002 3. \u7528\u4e8e\u6cdb\u578b\u7f16\u7a0b\uff0c\u4f7f\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u5404\u79cd\u7c7b\u578b\u7684\u53c2\u6570\u3002 template < typename T > void wrapper ( T && arg ) { // T&& \u662f\u4e07\u80fd\u5f15\u7528 foo ( std :: forward < T > ( arg )); // \u4fdd\u6301\u5de6\u503c\u6216\u53f3\u503c\u7684\u7279\u6027 } int main () { int a = 10 ; wrapper ( a ); // \u4f20\u5165\u5de6\u503c\uff0cT = int& wrapper ( 20 ); // \u4f20\u5165\u53f3\u503c\uff0cT = int } template < typename T , typename ... Args > void emplace_back ( Args && ... args ) { data . push_back ( T ( std :: forward < Args > ( args )...)); } \u76f4\u63a5\u5728\u5bb9\u5668\u4e2d\u6784\u9020\u5bf9\u8c61\uff0c\u907f\u514d\u4e86\u62f7\u8d1d\u548c\u79fb\u52a8\u64cd\u4f5c\u3002 vec.emplace_back(1, 2.5, \"Hello\"); // \u76f4\u63a5\u5728\u5bb9\u5668\u4e2d\u6784\u9020\uff0c\u907f\u514d\u4e34\u65f6\u5bf9\u8c61 \u5728\u9ad8\u6027\u80fd\u5e94\u7528\u4e2d\uff0c\u4f7f\u7528 emplace_back \u53ef\u4ee5\u663e\u8457\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u62f7\u8d1d\uff0c\u63d0\u9ad8\u4ee3\u7801\u7684\u6548\u7387 #include <iostream> template < typename T > class SharedPtr { private : T * ptr ; int * ref_count ; public : explicit SharedPtr ( T * p = nullptr ) : ptr ( p ), ref_count ( new int ( 1 )) {} ~ SharedPtr () { if ( -- ( * ref_count ) == 0 ) { delete ptr ; delete ref_count ; } } SharedPtr ( const SharedPtr & other ) noexcept : ptr ( other . ptr ), ref_count ( other . ref_count ) { ++ ( * ref_count ); } SharedPtr & operator = ( const SharedPtr & other ) noexcept { if ( this != & other ) { if ( -- ( * ref_count ) == 0 ) { delete ptr ; delete ref_count ; } ptr = other . ptr ; ref_count = other . ref_count ; ++ ( * ref_count ); } return * this ; } T * get () const { return ptr ; } T * operator -> () const { return ptr ; } T & operator * () const { return * ptr ; } int use_count () const { return * ref_count ; } }; struct Test { void show () { std :: cout << \"SharedPtr works! \\n \" ; } }; int main () { SharedPtr < Test > p1 ( new Test ()); SharedPtr < Test > p2 = p1 ; p2 -> show (); std :: cout << \"Reference count: \" << p1 . use_count () << std :: endl ; return 0 ; } #include <iostream> template < typename T > class SharedPtr ; // \u524d\u5411\u58f0\u660e template < typename T > class WeakPtr { private : T * ptr ; int * ref_count ; int * weak_count ; // \u989d\u5916\u7684\u5f15\u7528\u8ba1\u6570\uff0c\u7528\u6765\u7ba1\u7406 weak_ptr \u7684\u6570\u91cf public : WeakPtr () : ptr ( nullptr ), ref_count ( nullptr ), weak_count ( nullptr ) {} WeakPtr ( const SharedPtr < T >& shared ) : ptr ( shared . ptr ), ref_count ( shared . ref_count ), weak_count ( shared . weak_count ) { if ( weak_count ) { ++ ( * weak_count ); // \u589e\u52a0 weak_ptr \u6570\u91cf } } ~ WeakPtr () { if ( weak_count && -- ( * weak_count ) == 0 ) { delete weak_count ; } } // lock() \u65b9\u6cd5\uff1a\u8fd4\u56de\u4e00\u4e2a shared_ptr\uff0c\u5982\u679c\u8d44\u6e90\u5df2\u7ecf\u88ab\u9500\u6bc1\uff0c\u8fd4\u56de\u7a7a\u7684 shared_ptr SharedPtr < T > lock () const ; // \u83b7\u53d6\u5bf9\u8c61\u662f\u5426\u6709\u6548 bool expired () const { return * ref_count == 0 ; } }; template < typename T > class SharedPtr { private : T * ptr ; int * ref_count ; // \u5f15\u7528\u8ba1\u6570 int * weak_count ; // weak_ptr \u5f15\u7528\u8ba1\u6570 public : explicit SharedPtr ( T * p = nullptr ) : ptr ( p ), ref_count ( new int ( 1 )), weak_count ( new int ( 0 )) {} ~ SharedPtr () { if ( -- ( * ref_count ) == 0 ) { delete ptr ; delete ref_count ; if ( * weak_count == 0 ) { delete weak_count ; } } } SharedPtr ( const SharedPtr & other ) noexcept : ptr ( other . ptr ), ref_count ( other . ref_count ), weak_count ( other . weak_count ) { ++ ( * ref_count ); } SharedPtr & operator = ( const SharedPtr & other ) noexcept { if ( this != & other ) { if ( -- ( * ref_count ) == 0 ) { delete ptr ; delete ref_count ; if ( * weak_count == 0 ) { delete weak_count ; } } ptr = other . ptr ; ref_count = other . ref_count ; weak_count = other . weak_count ; ++ ( * ref_count ); } return * this ; } SharedPtr ( SharedPtr && other ) noexcept : ptr ( other . ptr ), ref_count ( other . ref_count ), weak_count ( other . weak_count ) { other . ptr = nullptr ; other . ref_count = nullptr ; other . weak_count = nullptr ; } SharedPtr & operator = ( SharedPtr && other ) noexcept { if ( this != & other ) { if ( -- ( * ref_count ) == 0 ) { delete ptr ; delete ref_count ; if ( * weak_count == 0 ) { delete weak_count ; } } ptr = other . ptr ; ref_count = other . ref_count ; weak_count = other . weak_count ; other . ptr = nullptr ; other . ref_count = nullptr ; other . weak_count = nullptr ; } return * this ; } friend class WeakPtr < T > ; // \u8fd4\u56de\u539f\u59cb\u6307\u9488 T * get () const { return ptr ; } int use_count () const { return * ref_count ; } }; // weak_ptr::lock \u5b9e\u73b0 template < typename T > SharedPtr < T > WeakPtr < T >:: lock () const { if ( * ref_count > 0 ) { return SharedPtr < T > ( * this ); // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 shared_ptr } else { return SharedPtr < T > (); // \u8fd4\u56de\u4e00\u4e2a\u7a7a\u7684 shared_ptr } } struct Test { void show () { std :: cout << \"Test class works! \\n \" ; } }; int main () { SharedPtr < Test > sp1 ( new Test ()); { WeakPtr < Test > wp1 ( sp1 ); // wp1 \u89c2\u5bdf sp1 if ( ! wp1 . expired ()) { SharedPtr < Test > sp2 = wp1 . lock (); // \u4ece weak_ptr \u83b7\u53d6 shared_ptr sp2 -> show (); // \u8f93\u51fa\uff1aTest class works! } } // wp1 \u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u5f31\u5f15\u7528\u4e0d\u518d\u5f15\u7528\u8d44\u6e90 if ( sp1 . use_count () == 0 ) { std :: cout << \"sp1 has no references left.\" << std :: endl ; } return 0 ; }","title":"Smart point"},{"location":"cc/smart_point/#_1","text":"#include <iostream> #include <cstring> #include <atomic> // ------------------- UniquePtr \u5b9e\u73b0 ------------------- template < typename T > class UniquePtr { private : T * ptr ; public : explicit UniquePtr ( T * p = nullptr ) : ptr ( p ) {} ~ UniquePtr () { delete ptr ; } UniquePtr ( const UniquePtr & ) = delete ; UniquePtr & operator = ( const UniquePtr & ) = delete ; UniquePtr ( UniquePtr && other ) noexcept : ptr ( other . ptr ) { other . ptr = nullptr ; } UniquePtr & operator = ( UniquePtr && other ) noexcept { if ( this != & other ) { delete ptr ; ptr = other . ptr ; other . ptr = nullptr ; } return * this ; } T * operator -> () const { return ptr ; } T & operator * () const { return * ptr ; } T * get () const { return ptr ; } }; // ------------------- SharedPtr \u5b9e\u73b0 ------------------- template < typename T > class SharedPtr { private : T * ptr ; std :: atomic < int >* count ; public : explicit SharedPtr ( T * p = nullptr ) : ptr ( p ), count ( new std :: atomic < int > ( p ? 1 : 0 )) {} ~ SharedPtr () { if ( -- ( * count ) == 0 ) { delete ptr ; delete count ; } } SharedPtr ( const SharedPtr & other ) : ptr ( other . ptr ), count ( other . count ) { ++ ( * count ); } SharedPtr & operator = ( const SharedPtr & other ) { if ( this != & other ) { if ( -- ( * count ) == 0 ) { delete ptr ; delete count ; } ptr = other . ptr ; count = other . count ; ++ ( * count ); } return * this ; } T * operator -> () const { return ptr ; } T & operator * () const { return * ptr ; } T * get () const { return ptr ; } }; // ------------------- MyString \u5b9e\u73b0 ------------------- class MyString { private : char * data ; size_t length ; public : MyString ( const char * str = \"\" ) { length = std :: strlen ( str ); data = new char [ length + 1 ]; std :: strcpy ( data , str ); } MyString ( const MyString & other ) { length = other . length ; data = new char [ length + 1 ]; std :: strcpy ( data , other . data ); } MyString & operator = ( const MyString & other ) { if ( this != & other ) { delete [] data ; length = other . length ; data = new char [ length + 1 ]; std :: strcpy ( data , other . data ); } return * this ; } MyString ( MyString && other ) noexcept : data ( other . data ), length ( other . length ) { other . data = nullptr ; other . length = 0 ; } MyString & operator = ( MyString && other ) noexcept { if ( this != & other ) { delete [] data ; data = other . data ; length = other . length ; other . data = nullptr ; other . length = 0 ; } return * this ; } ~ MyString () { delete [] data ; } const char * c_str () const { return data ; } }; // ------------------- \u6d4b\u8bd5\u4ee3\u7801 ------------------- int main () { UniquePtr < int > uPtr ( new int ( 10 )); std :: cout << \"UniquePtr: \" << * uPtr << std :: endl ; SharedPtr < int > sPtr1 ( new int ( 20 )); SharedPtr < int > sPtr2 = sPtr1 ; std :: cout << \"SharedPtr: \" << * sPtr1 << std :: endl ; MyString str1 ( \"Hello, World!\" ); MyString str2 = str1 ; std :: cout << \"MyString: \" << str2 . c_str () << std :: endl ; return 0 ; } template < typename T > constexpr typename std :: remove_reference < T >:: type && move ( T && arg ) noexcept { return static_cast < typename std :: remove_reference < T >:: type &&> ( arg ); } std::move \u65e0\u6761\u4ef6 \u8f6c\u6362\u4e3a\u53f3\u503c\u3002 std::forward \u6709\u6761\u4ef6 \u8f6c\u6362\u4e3a\u53f3\u503c\uff0c\u4ec5\u7528\u4e8e \u5b8c\u7f8e\u8f6c\u53d1\uff08\u914d\u5408\u6a21\u677f\uff09\u3002 template < typename T > void foo ( T && arg ) { T new_value = std :: forward < T > ( arg ); // \u4fdd\u6301\u5de6\u503c/\u53f3\u503c\u5c5e\u6027 }","title":"\u667a\u80fd\u6307\u9488"},{"location":"cc/smart_point/#_2","text":"\u7ed1\u5b9a\u53f3\u503c\uff08\u6ca1\u6709\u540d\u5b57\u7684\u4e34\u65f6\u5bf9\u8c61\uff09 \u7684\u5f15\u7528\uff0c\u5141\u8bb8 \u79fb\u52a8\u8bed\u4e49\u3002 1. \u4e13\u95e8\u7528\u4e8e\u53f3\u503c\uff08int&& \u53ea\u80fd\u7ed1\u5b9a 10\uff0c\u4e0d\u80fd\u7ed1\u5b9a int a;\uff09\u3002 2. \u901a\u5e38\u7528\u4e8e\u79fb\u52a8\u6784\u9020\u3001\u79fb\u52a8\u8d4b\u503c\uff0c\u907f\u514d\u62f7\u8d1d\uff0c\u63d0\u9ad8\u6027\u80fd\u3002 void foo ( int && x ) { // \u53f3\u503c\u5f15\u7528 std :: cout << x << std :: endl ; } int main () { int a = 10 ; foo ( 10 ); // \u2705 \u53f3\u503c OK foo ( a ); // \u274c \u5de6\u503c\u4e0d\u80fd\u4f20\u7ed9 int&& } \u5f53 T&& \u51fa\u73b0\u5728\u51fd\u6570\u6a21\u677f\u4e2d\uff0c\u5e76\u4e14 T \u662f\u6a21\u677f\u53c2\u6570\uff0c\u5b83\u53d8\u6210 \u4e07\u80fd\u5f15\u7528\uff0c\u53ef\u4ee5\u63a5\u53d7\u5de6\u503c\u548c\u53f3\u503c\u3002 1. T&& \u5728\u6a21\u677f\u53c2\u6570\u4e2d\u65f6\u662f\u4e07\u80fd\u5f15\u7528\uff0c\u53ef\u4ee5\u63a5\u53d7\u5de6\u503c\u548c\u53f3\u503c\u3002 2. \u9700\u8981 std::forward (arg) \u6765\u4fdd\u6301\u539f\u6709\u7684\u5de6\u503c/\u53f3\u503c\u7279\u6027\u3002 3. \u7528\u4e8e\u6cdb\u578b\u7f16\u7a0b\uff0c\u4f7f\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u5404\u79cd\u7c7b\u578b\u7684\u53c2\u6570\u3002 template < typename T > void wrapper ( T && arg ) { // T&& \u662f\u4e07\u80fd\u5f15\u7528 foo ( std :: forward < T > ( arg )); // \u4fdd\u6301\u5de6\u503c\u6216\u53f3\u503c\u7684\u7279\u6027 } int main () { int a = 10 ; wrapper ( a ); // \u4f20\u5165\u5de6\u503c\uff0cT = int& wrapper ( 20 ); // \u4f20\u5165\u53f3\u503c\uff0cT = int } template < typename T , typename ... Args > void emplace_back ( Args && ... args ) { data . push_back ( T ( std :: forward < Args > ( args )...)); } \u76f4\u63a5\u5728\u5bb9\u5668\u4e2d\u6784\u9020\u5bf9\u8c61\uff0c\u907f\u514d\u4e86\u62f7\u8d1d\u548c\u79fb\u52a8\u64cd\u4f5c\u3002 vec.emplace_back(1, 2.5, \"Hello\"); // \u76f4\u63a5\u5728\u5bb9\u5668\u4e2d\u6784\u9020\uff0c\u907f\u514d\u4e34\u65f6\u5bf9\u8c61 \u5728\u9ad8\u6027\u80fd\u5e94\u7528\u4e2d\uff0c\u4f7f\u7528 emplace_back \u53ef\u4ee5\u663e\u8457\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u62f7\u8d1d\uff0c\u63d0\u9ad8\u4ee3\u7801\u7684\u6548\u7387 #include <iostream> template < typename T > class SharedPtr { private : T * ptr ; int * ref_count ; public : explicit SharedPtr ( T * p = nullptr ) : ptr ( p ), ref_count ( new int ( 1 )) {} ~ SharedPtr () { if ( -- ( * ref_count ) == 0 ) { delete ptr ; delete ref_count ; } } SharedPtr ( const SharedPtr & other ) noexcept : ptr ( other . ptr ), ref_count ( other . ref_count ) { ++ ( * ref_count ); } SharedPtr & operator = ( const SharedPtr & other ) noexcept { if ( this != & other ) { if ( -- ( * ref_count ) == 0 ) { delete ptr ; delete ref_count ; } ptr = other . ptr ; ref_count = other . ref_count ; ++ ( * ref_count ); } return * this ; } T * get () const { return ptr ; } T * operator -> () const { return ptr ; } T & operator * () const { return * ptr ; } int use_count () const { return * ref_count ; } }; struct Test { void show () { std :: cout << \"SharedPtr works! \\n \" ; } }; int main () { SharedPtr < Test > p1 ( new Test ()); SharedPtr < Test > p2 = p1 ; p2 -> show (); std :: cout << \"Reference count: \" << p1 . use_count () << std :: endl ; return 0 ; } #include <iostream> template < typename T > class SharedPtr ; // \u524d\u5411\u58f0\u660e template < typename T > class WeakPtr { private : T * ptr ; int * ref_count ; int * weak_count ; // \u989d\u5916\u7684\u5f15\u7528\u8ba1\u6570\uff0c\u7528\u6765\u7ba1\u7406 weak_ptr \u7684\u6570\u91cf public : WeakPtr () : ptr ( nullptr ), ref_count ( nullptr ), weak_count ( nullptr ) {} WeakPtr ( const SharedPtr < T >& shared ) : ptr ( shared . ptr ), ref_count ( shared . ref_count ), weak_count ( shared . weak_count ) { if ( weak_count ) { ++ ( * weak_count ); // \u589e\u52a0 weak_ptr \u6570\u91cf } } ~ WeakPtr () { if ( weak_count && -- ( * weak_count ) == 0 ) { delete weak_count ; } } // lock() \u65b9\u6cd5\uff1a\u8fd4\u56de\u4e00\u4e2a shared_ptr\uff0c\u5982\u679c\u8d44\u6e90\u5df2\u7ecf\u88ab\u9500\u6bc1\uff0c\u8fd4\u56de\u7a7a\u7684 shared_ptr SharedPtr < T > lock () const ; // \u83b7\u53d6\u5bf9\u8c61\u662f\u5426\u6709\u6548 bool expired () const { return * ref_count == 0 ; } }; template < typename T > class SharedPtr { private : T * ptr ; int * ref_count ; // \u5f15\u7528\u8ba1\u6570 int * weak_count ; // weak_ptr \u5f15\u7528\u8ba1\u6570 public : explicit SharedPtr ( T * p = nullptr ) : ptr ( p ), ref_count ( new int ( 1 )), weak_count ( new int ( 0 )) {} ~ SharedPtr () { if ( -- ( * ref_count ) == 0 ) { delete ptr ; delete ref_count ; if ( * weak_count == 0 ) { delete weak_count ; } } } SharedPtr ( const SharedPtr & other ) noexcept : ptr ( other . ptr ), ref_count ( other . ref_count ), weak_count ( other . weak_count ) { ++ ( * ref_count ); } SharedPtr & operator = ( const SharedPtr & other ) noexcept { if ( this != & other ) { if ( -- ( * ref_count ) == 0 ) { delete ptr ; delete ref_count ; if ( * weak_count == 0 ) { delete weak_count ; } } ptr = other . ptr ; ref_count = other . ref_count ; weak_count = other . weak_count ; ++ ( * ref_count ); } return * this ; } SharedPtr ( SharedPtr && other ) noexcept : ptr ( other . ptr ), ref_count ( other . ref_count ), weak_count ( other . weak_count ) { other . ptr = nullptr ; other . ref_count = nullptr ; other . weak_count = nullptr ; } SharedPtr & operator = ( SharedPtr && other ) noexcept { if ( this != & other ) { if ( -- ( * ref_count ) == 0 ) { delete ptr ; delete ref_count ; if ( * weak_count == 0 ) { delete weak_count ; } } ptr = other . ptr ; ref_count = other . ref_count ; weak_count = other . weak_count ; other . ptr = nullptr ; other . ref_count = nullptr ; other . weak_count = nullptr ; } return * this ; } friend class WeakPtr < T > ; // \u8fd4\u56de\u539f\u59cb\u6307\u9488 T * get () const { return ptr ; } int use_count () const { return * ref_count ; } }; // weak_ptr::lock \u5b9e\u73b0 template < typename T > SharedPtr < T > WeakPtr < T >:: lock () const { if ( * ref_count > 0 ) { return SharedPtr < T > ( * this ); // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 shared_ptr } else { return SharedPtr < T > (); // \u8fd4\u56de\u4e00\u4e2a\u7a7a\u7684 shared_ptr } } struct Test { void show () { std :: cout << \"Test class works! \\n \" ; } }; int main () { SharedPtr < Test > sp1 ( new Test ()); { WeakPtr < Test > wp1 ( sp1 ); // wp1 \u89c2\u5bdf sp1 if ( ! wp1 . expired ()) { SharedPtr < Test > sp2 = wp1 . lock (); // \u4ece weak_ptr \u83b7\u53d6 shared_ptr sp2 -> show (); // \u8f93\u51fa\uff1aTest class works! } } // wp1 \u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u5f31\u5f15\u7528\u4e0d\u518d\u5f15\u7528\u8d44\u6e90 if ( sp1 . use_count () == 0 ) { std :: cout << \"sp1 has no references left.\" << std :: endl ; } return 0 ; }","title":"\u4e07\u80fd\u5f15\u7528\u548c\u53f3\u503c\u5f15\u7528"},{"location":"cc/type_erasure/","text":"std :: any a ; // a is empty a = 4.3 ; // a has value 4.3 of type double a = 42 ; // a has value 42 of type int a = std :: string { \"hi\" }; // a has value \"hi\" of type std::string if ( a . type () == typeid ( std :: string )) { std :: string s = std :: any_cast < std :: string > ( a ); UseString ( s ); } else if ( a . type () == typeid ( int )) { UseInt ( std :: any_cast < int > ( a )); } std::any\u53ef\u4ee5\u7528\u6765\u8868\u793a\u4efb\u4f55\u53ef\u62f7\u8d1d\u6784\u9020\u7684\u5355\u503c\u7c7b\u578b,\u5bf9\u7c7b\u578b\u7684\u6570\u636e\u8fdb\u884c\u4e86\u62bd\u8c61\u3002\u9664\u4e86\u5bf9\u7c7b\u578b\u7684\u6570\u636e\u8fdb\u884c\u62bd\u8c61\u5916\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u7c7b\u578b\u7684\u884c\u4e3a\u8fdb\u884c\u62bd\u8c61\uff0c\u4f8b\u5982std::function\u53ef\u4ee5\u7528\u6765\u8868\u793a\u6240\u6709\u7684\u53ef\u88ab\u8c03\u7528\u7684\u5bf9\u8c61\uff1a\u666e\u901a\u51fd\u6570\u3001\u6210\u5458\u51fd\u6570\u3001\u51fd\u6570\u5bf9\u8c61\u3001lambda\u8868\u8fbe\u5f0f\u3002 \u5177\u4f53\u5b9e\u73b0\u662f: class Any { // Holds either pointer to a heap object or the contained object itself. union Storage { constexpr Storage () : ptr { nullptr } {} // Prevent trivial copies of this type, buffer might hold a non-POD. Storage ( const Storage & ) = delete ; Storage & operator = ( const Storage & ) = delete ; void * ptr ; std :: aligned_storage_t < sizeof ( ptr ), alignof ( void * ) > buffer ; }; Storage storage_ ; }; \u8fd9\u4e2a\u65b9\u6cd5\u7684\u4f18\u70b9\u662f\uff1a 1. \u5c0f\u5bf9\u8c61\u4f18\u5316\uff1a\u76f4\u63a5\u5b58\u50a8\u5728 buffer \u4e2d\uff08\u5f53\u5bf9\u8c61\u5927\u5c0f\u4e0d\u8d85\u8fc7\u6307\u9488\u5927\u5c0f\u65f6\uff09 2. \u5927\u5bf9\u8c61\u5b58\u50a8\uff1a\u4f7f\u7528 ptr \u6307\u5411\u5806\u4e0a\u5206\u914d\u7684\u5185\u5b58 class Any { union Storage { /*...*/ }; // \u7528\u4e8e\u5b58\u50a8\u7c7b\u578b\u4fe1\u606f const std :: type_info * type_info_ ; // \u7c7b\u578b\u64e6\u9664\u7684\u5173\u952e\uff1a\u51fd\u6570\u6307\u9488\u8868 struct VTable { void ( * destroy )( Storage & ); void ( * copy )( Storage & , const Storage & ); void ( * move )( Storage & , Storage & ); const std :: type_info & ( * type )(); }; const VTable * vtable_ ; Storage storage_ ; }; \u5de5\u4f5c\u539f\u7406 \u5f53\u5b58\u50a8\u4e00\u4e2a\u65b0\u503c\u65f6\uff1a \u6839\u636e\u503c\u7684\u5927\u5c0f\u9009\u62e9\u5b58\u50a8\u7b56\u7565 \u521b\u5efa\u5bf9\u5e94\u7c7b\u578b\u7684 VTable \u4fdd\u5b58\u7c7b\u578b\u4fe1\u606f \u5728 storage_ \u4e2d\u5b58\u50a8\u6570\u636e \u7c7b\u578b\u64e6\u9664\u7684\u6838\u5fc3\u5728\u4e8e\uff1a \u7075\u6d3b\u7684\u5b58\u50a8\u7b56\u7565\uff08union\uff09 \u865a\u51fd\u6570\u8868\uff08VTable\uff09\u8bb0\u5f55\u7c7b\u578b\u76f8\u5173\u7684\u64cd\u4f5c \u8fd0\u884c\u65f6\u7c7b\u578b\u4fe1\u606f\uff08type_info\uff09 \u65b0\u7684\u7406\u89e3 \u00b6 template < std :: size_t Len , std :: size_t Align = alignof ( std :: max_align_t ) > struct aligned_storage { using type = typename std :: aligned_storage < Len , Align >:: type ; }; #include <iostream> #include <type_traits> class Any { private : union Storage { void * ptr ; std :: aligned_storage_t < sizeof ( void * ), alignof ( void * ) > buffer ; constexpr Storage () : ptr ( nullptr ) {} ~ Storage () {} }; Storage storage_ ; size_t size_ ; void ( * destroyer_ )( void * ); // \u7528\u4e8e\u9500\u6bc1\u5b58\u50a8\u7684\u5bf9\u8c61 public : // \u6784\u9020\u51fd\u6570 template < typename T > Any ( T && value ) { size_ = sizeof ( T ); destroyer_ = []( void * ptr ) { delete static_cast < T *> ( ptr ); }; // \u4f7f\u7528 aligned_storage_t \u5b58\u50a8\u5bf9\u8c61 new ( & storage_ . buffer ) T ( std :: forward < T > ( value )); } // \u79fb\u52a8\u6784\u9020\u51fd\u6570 Any ( Any && other ) noexcept { size_ = other . size_ ; destroyer_ = other . destroyer_ ; new ( & storage_ . buffer ) void * ( std :: move ( other . storage_ . ptr )); other . size_ = 0 ; other . destroyer_ = nullptr ; } // \u6790\u6784\u51fd\u6570 ~ Any () { if ( destroyer_ ) { destroyer_ ( & storage_ . buffer ); } } // \u83b7\u53d6\u5b58\u50a8\u5bf9\u8c61 template < typename T > T & get () { return * reinterpret_cast < T *> ( & storage_ . buffer ); } }; int main () { Any a1 = 42 ; // \u5b58\u50a8\u4e00\u4e2a int Any a2 = std :: string ( \"Hello World\" ); // \u5b58\u50a8\u4e00\u4e2a string std :: cout << \"Stored int: \" << a1 . get < int > () << std :: endl ; std :: cout << \"Stored string: \" << a2 . get < std :: string > () << std :: endl ; return 0 ; } \u6700\u540e\u7528\u7684\u65f6\u5019 \u518d\u53bb\u5b8c\u5168\u7406\u89e3\u5427\u3002","title":"Type erasure"},{"location":"cc/type_erasure/#_1","text":"template < std :: size_t Len , std :: size_t Align = alignof ( std :: max_align_t ) > struct aligned_storage { using type = typename std :: aligned_storage < Len , Align >:: type ; }; #include <iostream> #include <type_traits> class Any { private : union Storage { void * ptr ; std :: aligned_storage_t < sizeof ( void * ), alignof ( void * ) > buffer ; constexpr Storage () : ptr ( nullptr ) {} ~ Storage () {} }; Storage storage_ ; size_t size_ ; void ( * destroyer_ )( void * ); // \u7528\u4e8e\u9500\u6bc1\u5b58\u50a8\u7684\u5bf9\u8c61 public : // \u6784\u9020\u51fd\u6570 template < typename T > Any ( T && value ) { size_ = sizeof ( T ); destroyer_ = []( void * ptr ) { delete static_cast < T *> ( ptr ); }; // \u4f7f\u7528 aligned_storage_t \u5b58\u50a8\u5bf9\u8c61 new ( & storage_ . buffer ) T ( std :: forward < T > ( value )); } // \u79fb\u52a8\u6784\u9020\u51fd\u6570 Any ( Any && other ) noexcept { size_ = other . size_ ; destroyer_ = other . destroyer_ ; new ( & storage_ . buffer ) void * ( std :: move ( other . storage_ . ptr )); other . size_ = 0 ; other . destroyer_ = nullptr ; } // \u6790\u6784\u51fd\u6570 ~ Any () { if ( destroyer_ ) { destroyer_ ( & storage_ . buffer ); } } // \u83b7\u53d6\u5b58\u50a8\u5bf9\u8c61 template < typename T > T & get () { return * reinterpret_cast < T *> ( & storage_ . buffer ); } }; int main () { Any a1 = 42 ; // \u5b58\u50a8\u4e00\u4e2a int Any a2 = std :: string ( \"Hello World\" ); // \u5b58\u50a8\u4e00\u4e2a string std :: cout << \"Stored int: \" << a1 . get < int > () << std :: endl ; std :: cout << \"Stored string: \" << a2 . get < std :: string > () << std :: endl ; return 0 ; } \u6700\u540e\u7528\u7684\u65f6\u5019 \u518d\u53bb\u5b8c\u5168\u7406\u89e3\u5427\u3002","title":"\u65b0\u7684\u7406\u89e3"},{"location":"cuda/cmd/","text":"PTX/SASS\u6307\u4ee4\u5feb\u901f\u6307\u5357 \u00b6 PTX (Parallel Thread Execution) \u548c SASS (Streaming ASSembly) \u662fNVIDIA GPU\u7684\u4e24\u79cd\u6307\u4ee4\u96c6\u8868\u793a\uff0c\u4e86\u89e3\u5b83\u4eec\u5bf9CUDA\u6df1\u5ea6\u4f18\u5316\u975e\u5e38\u91cd\u8981\u3002 1. PTX\u4e0eSASS\u7684\u533a\u522b \u00b6 \u7279\u6027 PTX SASS \u7ea7\u522b \u865a\u62df\u6307\u4ee4\u96c6(\u7c7b\u4f3cLLVM IR) \u539f\u751f\u673a\u5668\u6307\u4ee4 \u53ef\u8bfb\u6027 \u8f83\u9ad8\uff0c\u7c7b\u4f3c\u6c47\u7f16 \u8f83\u4f4e\uff0c\u9ad8\u5ea6\u4f18\u5316 \u7a33\u5b9a\u6027 \u8de8\u67b6\u6784\u517c\u5bb9 \u67b6\u6784\u7279\u5b9a \u83b7\u53d6\u65b9\u5f0f -keep \u7f16\u8bd1\u9009\u9879\u6216cuobjdump Nsight Compute\u6216cuobjdump 2. \u6838\u5fc3PTX\u6307\u4ee4\u7c7b\u522b \u00b6 \u8ba1\u7b97\u6307\u4ee4 \u00b6 add , sub , mul , mad (\u4e58\u52a0) fma (\u878d\u5408\u4e58\u52a0) div , rcp (\u5012\u6570), sqrt , rsqrt (\u5e73\u65b9\u6839\u5012\u6570) min , max , abs , neg and , or , xor , not (\u4f4d\u8fd0\u7b97) shl , shr (\u79fb\u4f4d) \u63a7\u5236\u6d41\u6307\u4ee4 \u00b6 @p \u8c13\u8bcd\u6267\u884c (\u5982 @p add.rn.f32 ) bra (\u5206\u652f) call (\u51fd\u6570\u8c03\u7528) ret (\u8fd4\u56de) \u5185\u5b58\u6307\u4ee4 \u00b6 ld (\u52a0\u8f7d) st (\u5b58\u50a8) atom (\u539f\u5b50\u64cd\u4f5c) bar (\u5c4f\u969c\u540c\u6b65) ldparam (\u53c2\u6570\u52a0\u8f7d) \u7279\u6b8a\u6307\u4ee4 \u00b6 mov (\u5bc4\u5b58\u5668\u79fb\u52a8) cvt (\u7c7b\u578b\u8f6c\u6362) setp (\u8bbe\u7f6e\u8c13\u8bcd) selp (\u8c13\u8bcd\u9009\u62e9) 3. \u5e38\u89c1SASS\u6307\u4ee4\u793a\u4f8b \u00b6 SASS\u6307\u4ee4\u66f4\u5e95\u5c42\u4e14\u67b6\u6784\u76f8\u5173(\u968fGPU\u4ee3\u9645\u53d8\u5316): Volta/Turing/Ampere\u67b6\u6784\u5e38\u89c1\u6307\u4ee4 \u00b6 IADD3 (\u4e09\u64cd\u4f5c\u6570\u6574\u6570\u52a0) FADD (\u6d6e\u70b9\u52a0) FMUL (\u6d6e\u70b9\u4e58) FFMA (\u878d\u5408\u6d6e\u70b9\u4e58\u52a0) MOV (\u79fb\u52a8) LDG (\u5168\u5c40\u5185\u5b58\u52a0\u8f7d) STS (\u5171\u4eab\u5185\u5b58\u5b58\u50a8) BRA (\u5206\u652f) BAR (\u5c4f\u969c) 4. \u5982\u4f55\u67e5\u770bPTX/SASS\u4ee3\u7801 \u00b6 \u7f16\u8bd1\u65f6\u4fdd\u7559PTX \u00b6 nvcc -keep mykernel.cu # \u751f\u6210.ptx\u6587\u4ef6 \u4f7f\u7528cuobjdump\u67e5\u770bSASS \u00b6 cuobjdump -sass myexecutable \u4f7f\u7528Nsight Compute\u67e5\u770b \u00b6 ncu --print-instruction-mix ./myprogram 5. \u5feb\u901f\u5b66\u4e60\u5efa\u8bae \u00b6 \u4ecePTX\u5f00\u59cb \uff1a\u5148\u7406\u89e3PTX\u6307\u4ee4\uff0c\u518d\u8fc7\u6e21\u5230SASS \u6bd4\u8f83\u4e0d\u540c\u4f18\u5316\u7ea7\u522b \uff1a\u7528 -O0 \u548c -O3 \u7f16\u8bd1\u6bd4\u8f83PTX\u5dee\u5f02 \u5173\u6ce8\u5173\u952e\u6307\u4ee4 \uff1a LD/ST \u5185\u5b58\u6307\u4ee4 FMA \u8ba1\u7b97\u6307\u4ee4 BAR \u540c\u6b65\u6307\u4ee4 \u4f7f\u7528\u53ef\u89c6\u5316\u5de5\u5177 \uff1a ncu-ui ./myprogram # \u56fe\u5f62\u754c\u9762\u67e5\u770b\u6307\u4ee4\u6df7\u5408 6. \u5b9e\u7528\u5b66\u4e60\u8d44\u6e90 \u00b6 \u5b98\u65b9\u6587\u6863 \uff1a PTX ISA\u53c2\u8003 CUDA\u4e8c\u8fdb\u5236\u5de5\u5177\u6307\u5357 \u5173\u952e\u624b\u518c\u7ae0\u8282 \uff1a PTX\u5bc4\u5b58\u5668\u7c7b\u578b(.b8, .u16, .f32\u7b49) \u5bfb\u5740\u6a21\u5f0f(\u5bc4\u5b58\u5668/\u7acb\u5373\u6570/\u95f4\u63a5) \u8c13\u8bcd\u6267\u884c\u7cfb\u7edf \u5b9e\u9645\u6848\u4f8b\u5b66\u4e60 \uff1a cuobjdump -ptx myexecutable | less # \u6d4f\u89c8PTX\u4ee3\u7801 ncu --set details -k mykernel ./myprogram # \u8be6\u7ec6\u5185\u6838\u5206\u6790 \u638c\u63e1\u8fd9\u4e9b\u6307\u4ee4\u540e\uff0c\u4f60\u5c06\u80fd\u66f4\u597d\u5730\u7406\u89e3CUDA\u5185\u6838\u7684\u5b9e\u9645\u6267\u884c\u884c\u4e3a\uff0c\u5e76\u8fdb\u884c\u66f4\u6709\u6548\u7684\u4f18\u5316\u3002 NVIDIA RTX 4090 (Ada Lovelace\u67b6\u6784) \u7684\u7279\u6b8a\u6307\u4ee4\u4e0e\u9ad8\u6548\u4f18\u5316 \u00b6 RTX 4090\u91c7\u7528\u7684Ada Lovelace\u67b6\u6784\u786e\u5b9e\u5f15\u5165\u4e86\u4e00\u4e9b\u7279\u6b8a\u6307\u4ee4\u548c\u4f18\u5316\u7279\u6027\uff0c\u4ee5\u4e0b\u662f\u5173\u952e\u5185\u5bb9\uff1a \u4e00\u3001Ada Lovelace\u67b6\u6784\u7279\u6709\u7684\u65b0\u6307\u4ee4 \u00b6 1. \u7b2c\u4e09\u4ee3Tensor Core\u589e\u5f3a\u6307\u4ee4 \u00b6 HMMA2 (\u6df7\u5408\u7cbe\u5ea6\u77e9\u9635\u4e58\u52a0) - \u652f\u6301\u65b0\u578bFP8\u683c\u5f0f IMMA2 (\u6574\u6570\u77e9\u9635\u4e58\u52a0) - \u52a0\u901fINT8/INT4\u63a8\u7406 DP4A \u589e\u5f3a\u7248 - \u66f4\u9ad8\u6548\u7684INT8\u70b9\u79ef\u8fd0\u7b97 2. \u65b0\u7684Shader Execution Reordering (SER)\u6307\u4ee4 \u00b6 REORDER \u6307\u4ee4 - \u52a8\u6001\u91cd\u6392\u7740\u8272\u5668\u6267\u884c\u987a\u5e8f COHERENCE \u63a7\u5236\u6307\u4ee4 - \u6539\u8fdb\u5149\u7ebf\u8ffd\u8e2a\u7684\u5185\u5b58\u4e00\u81f4\u6027 3. \u7b2c\u516b\u4ee3NVDLA\u589e\u5f3a \u00b6 DL2 \u524d\u7f00\u6307\u4ee4 - \u6df1\u5ea6\u5b66\u4e60\u52a0\u901f\u6307\u4ee4\u96c6\u6269\u5c55 SMEMD - \u5171\u4eab\u5185\u5b58\u76f4\u63a5\u6570\u636e\u4ea4\u6362\u6307\u4ee4 \u4e8c\u3001\u9488\u5bf9RTX 4090\u7684\u9ad8\u6548\u6307\u4ee4\u4f7f\u7528 \u00b6 \u8ba1\u7b97\u5bc6\u96c6\u578b\u4efb\u52a1\u4f18\u5316 \u00b6 FP32\u77e9\u9635\u8fd0\u7b97 \uff1a // \u4f7f\u7528\u65b0\u7684FFMA.PRED\u6307\u4ee4 @ p FFMA.PRED.RN.FTZ R0 , R1 , R2 , R0 ; // \u5e26\u8c13\u8bcd\u7684\u878d\u5408\u4e58\u52a0 INT8\u63a8\u7406\u52a0\u901f \uff1a // \u4f7f\u7528IMMA.8816\u6307\u4ee4 IMMA.8816.S8.S8.S32 R0 , R1 , R2 , R0 ; // INT8\u77e9\u9635\u4e58\u52a0 \u5185\u5b58\u8bbf\u95ee\u4f18\u5316 \u00b6 \u65b0\u7684LDG.128\u6307\u4ee4 \uff1a LDG.128.SYS R0 , [ R1 ]; // 128-bit\u5168\u5c40\u5185\u5b58\u52a0\u8f7d \u589e\u5f3a\u7684L2\u7f13\u5b58\u63a7\u5236 \uff1a PREFETCH.L2 [ R1 ]; // \u4e3b\u52a8L2\u9884\u53d6 MEMBAR.GL.SYS ; // \u6539\u8fdb\u7684\u5185\u5b58\u5c4f\u969c \u4e09\u3001\u5b9e\u9645\u4f18\u5316\u6848\u4f8b \u00b6 \u5149\u7ebf\u8ffd\u8e2a\u4f18\u5316 \u00b6 // \u4f7f\u7528\u65b0\u7684RT\u6838\u5fc3\u6307\u4ee4 RT.TRACE.ACCEL R0 , [ R1 ] , R2 ; // \u52a0\u901f\u7684\u5149\u7ebf\u8ffd\u8e2a\u67e5\u8be2 RT.REORDER.START ; // \u5f00\u59cb\u6267\u884c\u91cd\u6392 AI\u63a8\u7406\u4f18\u5316 \u00b6 // FP8\u77e9\u9635\u8fd0\u7b97 HMMA2.1688.FP8.FP8.FP32 R0 , R1 , R2 , R0 ; \u56db\u3001\u67e5\u770b4090\u7279\u5b9a\u6307\u4ee4\u7684\u65b9\u6cd5 \u00b6 \u4f7f\u7528Nsight Compute \uff1a ncu --arch sm_89 --query-metrics \u68c0\u67e5\u7279\u5b9a\u5185\u6838 \uff1a ncu --kernel-name MyKernel --set full --metrics smsp__inst_executed.avg.per_cycle_active ./myapp PTX\u5230SASS\u8f6c\u6362\u89c2\u5bdf \uff1a cuobjdump -arch = sm_89 -ptx -sass mykernel.o \u4e94\u3001\u5173\u952e\u4f18\u5316\u5efa\u8bae \u00b6 \u4f18\u5148\u4f7f\u7528Tensor Core \uff1a \u5c3d\u91cf\u5c06\u8ba1\u7b97\u8f6c\u6362\u4e3aFP16/FP8/INT8\u77e9\u9635\u8fd0\u7b97 \u4f7f\u7528 mma.sync \u6307\u4ee4\u96c6 \u5229\u7528\u65b0\u7684\u5185\u5b58\u5c42\u6b21 \uff1a __global__ void kernel () { __builtin_prefetch ( ptr , 1 ); // \u4f7f\u7528\u786c\u4ef6\u9884\u53d6 } SER\u7279\u6027\u5e94\u7528 \uff1a // \u5728\u5149\u7ebf\u8ffd\u8e2a\u5185\u6838\u4e2d\u542f\u7528 __attribute__ (( reorder_with_hint ( high_priority ))) \u4f7f\u7528\u65b0\u7684CUDA 12.x\u7279\u6027 \uff1a #pragma unroll 2 // \u5229\u7528\u589e\u5f3a\u7684\u5faa\u73af\u5c55\u5f00 RTX 4090\u7684\u8fd9\u4e9b\u65b0\u6307\u4ee4\u9700\u8981\u914d\u5408CUDA 12.x\u53ca\u4ee5\u4e0a\u7248\u672c\u4f7f\u7528\uff0c\u5efa\u8bae\u53c2\u8003NVIDIA\u7684\u300aAda Lovelace\u67b6\u6784\u767d\u76ae\u4e66\u300b\u83b7\u53d6\u6700\u65b0\u6307\u4ee4\u7ec6\u8282\u3002","title":"PTX/SASS\u6307\u4ee4\u5feb\u901f\u6307\u5357"},{"location":"cuda/cmd/#ptxsass","text":"PTX (Parallel Thread Execution) \u548c SASS (Streaming ASSembly) \u662fNVIDIA GPU\u7684\u4e24\u79cd\u6307\u4ee4\u96c6\u8868\u793a\uff0c\u4e86\u89e3\u5b83\u4eec\u5bf9CUDA\u6df1\u5ea6\u4f18\u5316\u975e\u5e38\u91cd\u8981\u3002","title":"PTX/SASS\u6307\u4ee4\u5feb\u901f\u6307\u5357"},{"location":"cuda/cmd/#1-ptxsass","text":"\u7279\u6027 PTX SASS \u7ea7\u522b \u865a\u62df\u6307\u4ee4\u96c6(\u7c7b\u4f3cLLVM IR) \u539f\u751f\u673a\u5668\u6307\u4ee4 \u53ef\u8bfb\u6027 \u8f83\u9ad8\uff0c\u7c7b\u4f3c\u6c47\u7f16 \u8f83\u4f4e\uff0c\u9ad8\u5ea6\u4f18\u5316 \u7a33\u5b9a\u6027 \u8de8\u67b6\u6784\u517c\u5bb9 \u67b6\u6784\u7279\u5b9a \u83b7\u53d6\u65b9\u5f0f -keep \u7f16\u8bd1\u9009\u9879\u6216cuobjdump Nsight Compute\u6216cuobjdump","title":"1. PTX\u4e0eSASS\u7684\u533a\u522b"},{"location":"cuda/cmd/#2-ptx","text":"","title":"2. \u6838\u5fc3PTX\u6307\u4ee4\u7c7b\u522b"},{"location":"cuda/cmd/#_1","text":"add , sub , mul , mad (\u4e58\u52a0) fma (\u878d\u5408\u4e58\u52a0) div , rcp (\u5012\u6570), sqrt , rsqrt (\u5e73\u65b9\u6839\u5012\u6570) min , max , abs , neg and , or , xor , not (\u4f4d\u8fd0\u7b97) shl , shr (\u79fb\u4f4d)","title":"\u8ba1\u7b97\u6307\u4ee4"},{"location":"cuda/cmd/#_2","text":"@p \u8c13\u8bcd\u6267\u884c (\u5982 @p add.rn.f32 ) bra (\u5206\u652f) call (\u51fd\u6570\u8c03\u7528) ret (\u8fd4\u56de)","title":"\u63a7\u5236\u6d41\u6307\u4ee4"},{"location":"cuda/cmd/#_3","text":"ld (\u52a0\u8f7d) st (\u5b58\u50a8) atom (\u539f\u5b50\u64cd\u4f5c) bar (\u5c4f\u969c\u540c\u6b65) ldparam (\u53c2\u6570\u52a0\u8f7d)","title":"\u5185\u5b58\u6307\u4ee4"},{"location":"cuda/cmd/#_4","text":"mov (\u5bc4\u5b58\u5668\u79fb\u52a8) cvt (\u7c7b\u578b\u8f6c\u6362) setp (\u8bbe\u7f6e\u8c13\u8bcd) selp (\u8c13\u8bcd\u9009\u62e9)","title":"\u7279\u6b8a\u6307\u4ee4"},{"location":"cuda/cmd/#3-sass","text":"SASS\u6307\u4ee4\u66f4\u5e95\u5c42\u4e14\u67b6\u6784\u76f8\u5173(\u968fGPU\u4ee3\u9645\u53d8\u5316):","title":"3. \u5e38\u89c1SASS\u6307\u4ee4\u793a\u4f8b"},{"location":"cuda/cmd/#voltaturingampere","text":"IADD3 (\u4e09\u64cd\u4f5c\u6570\u6574\u6570\u52a0) FADD (\u6d6e\u70b9\u52a0) FMUL (\u6d6e\u70b9\u4e58) FFMA (\u878d\u5408\u6d6e\u70b9\u4e58\u52a0) MOV (\u79fb\u52a8) LDG (\u5168\u5c40\u5185\u5b58\u52a0\u8f7d) STS (\u5171\u4eab\u5185\u5b58\u5b58\u50a8) BRA (\u5206\u652f) BAR (\u5c4f\u969c)","title":"Volta/Turing/Ampere\u67b6\u6784\u5e38\u89c1\u6307\u4ee4"},{"location":"cuda/cmd/#4-ptxsass","text":"","title":"4. \u5982\u4f55\u67e5\u770bPTX/SASS\u4ee3\u7801"},{"location":"cuda/cmd/#ptx","text":"nvcc -keep mykernel.cu # \u751f\u6210.ptx\u6587\u4ef6","title":"\u7f16\u8bd1\u65f6\u4fdd\u7559PTX"},{"location":"cuda/cmd/#cuobjdumpsass","text":"cuobjdump -sass myexecutable","title":"\u4f7f\u7528cuobjdump\u67e5\u770bSASS"},{"location":"cuda/cmd/#nsight-compute","text":"ncu --print-instruction-mix ./myprogram","title":"\u4f7f\u7528Nsight Compute\u67e5\u770b"},{"location":"cuda/cmd/#5","text":"\u4ecePTX\u5f00\u59cb \uff1a\u5148\u7406\u89e3PTX\u6307\u4ee4\uff0c\u518d\u8fc7\u6e21\u5230SASS \u6bd4\u8f83\u4e0d\u540c\u4f18\u5316\u7ea7\u522b \uff1a\u7528 -O0 \u548c -O3 \u7f16\u8bd1\u6bd4\u8f83PTX\u5dee\u5f02 \u5173\u6ce8\u5173\u952e\u6307\u4ee4 \uff1a LD/ST \u5185\u5b58\u6307\u4ee4 FMA \u8ba1\u7b97\u6307\u4ee4 BAR \u540c\u6b65\u6307\u4ee4 \u4f7f\u7528\u53ef\u89c6\u5316\u5de5\u5177 \uff1a ncu-ui ./myprogram # \u56fe\u5f62\u754c\u9762\u67e5\u770b\u6307\u4ee4\u6df7\u5408","title":"5. \u5feb\u901f\u5b66\u4e60\u5efa\u8bae"},{"location":"cuda/cmd/#6","text":"\u5b98\u65b9\u6587\u6863 \uff1a PTX ISA\u53c2\u8003 CUDA\u4e8c\u8fdb\u5236\u5de5\u5177\u6307\u5357 \u5173\u952e\u624b\u518c\u7ae0\u8282 \uff1a PTX\u5bc4\u5b58\u5668\u7c7b\u578b(.b8, .u16, .f32\u7b49) \u5bfb\u5740\u6a21\u5f0f(\u5bc4\u5b58\u5668/\u7acb\u5373\u6570/\u95f4\u63a5) \u8c13\u8bcd\u6267\u884c\u7cfb\u7edf \u5b9e\u9645\u6848\u4f8b\u5b66\u4e60 \uff1a cuobjdump -ptx myexecutable | less # \u6d4f\u89c8PTX\u4ee3\u7801 ncu --set details -k mykernel ./myprogram # \u8be6\u7ec6\u5185\u6838\u5206\u6790 \u638c\u63e1\u8fd9\u4e9b\u6307\u4ee4\u540e\uff0c\u4f60\u5c06\u80fd\u66f4\u597d\u5730\u7406\u89e3CUDA\u5185\u6838\u7684\u5b9e\u9645\u6267\u884c\u884c\u4e3a\uff0c\u5e76\u8fdb\u884c\u66f4\u6709\u6548\u7684\u4f18\u5316\u3002","title":"6. \u5b9e\u7528\u5b66\u4e60\u8d44\u6e90"},{"location":"cuda/cmd/#nvidia-rtx-4090-ada-lovelace","text":"RTX 4090\u91c7\u7528\u7684Ada Lovelace\u67b6\u6784\u786e\u5b9e\u5f15\u5165\u4e86\u4e00\u4e9b\u7279\u6b8a\u6307\u4ee4\u548c\u4f18\u5316\u7279\u6027\uff0c\u4ee5\u4e0b\u662f\u5173\u952e\u5185\u5bb9\uff1a","title":"NVIDIA RTX 4090 (Ada Lovelace\u67b6\u6784) \u7684\u7279\u6b8a\u6307\u4ee4\u4e0e\u9ad8\u6548\u4f18\u5316"},{"location":"cuda/cmd/#ada-lovelace","text":"","title":"\u4e00\u3001Ada Lovelace\u67b6\u6784\u7279\u6709\u7684\u65b0\u6307\u4ee4"},{"location":"cuda/cmd/#1-tensor-core","text":"HMMA2 (\u6df7\u5408\u7cbe\u5ea6\u77e9\u9635\u4e58\u52a0) - \u652f\u6301\u65b0\u578bFP8\u683c\u5f0f IMMA2 (\u6574\u6570\u77e9\u9635\u4e58\u52a0) - \u52a0\u901fINT8/INT4\u63a8\u7406 DP4A \u589e\u5f3a\u7248 - \u66f4\u9ad8\u6548\u7684INT8\u70b9\u79ef\u8fd0\u7b97","title":"1. \u7b2c\u4e09\u4ee3Tensor Core\u589e\u5f3a\u6307\u4ee4"},{"location":"cuda/cmd/#2-shader-execution-reordering-ser","text":"REORDER \u6307\u4ee4 - \u52a8\u6001\u91cd\u6392\u7740\u8272\u5668\u6267\u884c\u987a\u5e8f COHERENCE \u63a7\u5236\u6307\u4ee4 - \u6539\u8fdb\u5149\u7ebf\u8ffd\u8e2a\u7684\u5185\u5b58\u4e00\u81f4\u6027","title":"2. \u65b0\u7684Shader Execution Reordering (SER)\u6307\u4ee4"},{"location":"cuda/cmd/#3-nvdla","text":"DL2 \u524d\u7f00\u6307\u4ee4 - \u6df1\u5ea6\u5b66\u4e60\u52a0\u901f\u6307\u4ee4\u96c6\u6269\u5c55 SMEMD - \u5171\u4eab\u5185\u5b58\u76f4\u63a5\u6570\u636e\u4ea4\u6362\u6307\u4ee4","title":"3. \u7b2c\u516b\u4ee3NVDLA\u589e\u5f3a"},{"location":"cuda/cmd/#rtx-4090","text":"","title":"\u4e8c\u3001\u9488\u5bf9RTX 4090\u7684\u9ad8\u6548\u6307\u4ee4\u4f7f\u7528"},{"location":"cuda/cmd/#_5","text":"FP32\u77e9\u9635\u8fd0\u7b97 \uff1a // \u4f7f\u7528\u65b0\u7684FFMA.PRED\u6307\u4ee4 @ p FFMA.PRED.RN.FTZ R0 , R1 , R2 , R0 ; // \u5e26\u8c13\u8bcd\u7684\u878d\u5408\u4e58\u52a0 INT8\u63a8\u7406\u52a0\u901f \uff1a // \u4f7f\u7528IMMA.8816\u6307\u4ee4 IMMA.8816.S8.S8.S32 R0 , R1 , R2 , R0 ; // INT8\u77e9\u9635\u4e58\u52a0","title":"\u8ba1\u7b97\u5bc6\u96c6\u578b\u4efb\u52a1\u4f18\u5316"},{"location":"cuda/cmd/#_6","text":"\u65b0\u7684LDG.128\u6307\u4ee4 \uff1a LDG.128.SYS R0 , [ R1 ]; // 128-bit\u5168\u5c40\u5185\u5b58\u52a0\u8f7d \u589e\u5f3a\u7684L2\u7f13\u5b58\u63a7\u5236 \uff1a PREFETCH.L2 [ R1 ]; // \u4e3b\u52a8L2\u9884\u53d6 MEMBAR.GL.SYS ; // \u6539\u8fdb\u7684\u5185\u5b58\u5c4f\u969c","title":"\u5185\u5b58\u8bbf\u95ee\u4f18\u5316"},{"location":"cuda/cmd/#_7","text":"","title":"\u4e09\u3001\u5b9e\u9645\u4f18\u5316\u6848\u4f8b"},{"location":"cuda/cmd/#_8","text":"// \u4f7f\u7528\u65b0\u7684RT\u6838\u5fc3\u6307\u4ee4 RT.TRACE.ACCEL R0 , [ R1 ] , R2 ; // \u52a0\u901f\u7684\u5149\u7ebf\u8ffd\u8e2a\u67e5\u8be2 RT.REORDER.START ; // \u5f00\u59cb\u6267\u884c\u91cd\u6392","title":"\u5149\u7ebf\u8ffd\u8e2a\u4f18\u5316"},{"location":"cuda/cmd/#ai","text":"// FP8\u77e9\u9635\u8fd0\u7b97 HMMA2.1688.FP8.FP8.FP32 R0 , R1 , R2 , R0 ;","title":"AI\u63a8\u7406\u4f18\u5316"},{"location":"cuda/cmd/#4090","text":"\u4f7f\u7528Nsight Compute \uff1a ncu --arch sm_89 --query-metrics \u68c0\u67e5\u7279\u5b9a\u5185\u6838 \uff1a ncu --kernel-name MyKernel --set full --metrics smsp__inst_executed.avg.per_cycle_active ./myapp PTX\u5230SASS\u8f6c\u6362\u89c2\u5bdf \uff1a cuobjdump -arch = sm_89 -ptx -sass mykernel.o","title":"\u56db\u3001\u67e5\u770b4090\u7279\u5b9a\u6307\u4ee4\u7684\u65b9\u6cd5"},{"location":"cuda/cmd/#_9","text":"\u4f18\u5148\u4f7f\u7528Tensor Core \uff1a \u5c3d\u91cf\u5c06\u8ba1\u7b97\u8f6c\u6362\u4e3aFP16/FP8/INT8\u77e9\u9635\u8fd0\u7b97 \u4f7f\u7528 mma.sync \u6307\u4ee4\u96c6 \u5229\u7528\u65b0\u7684\u5185\u5b58\u5c42\u6b21 \uff1a __global__ void kernel () { __builtin_prefetch ( ptr , 1 ); // \u4f7f\u7528\u786c\u4ef6\u9884\u53d6 } SER\u7279\u6027\u5e94\u7528 \uff1a // \u5728\u5149\u7ebf\u8ffd\u8e2a\u5185\u6838\u4e2d\u542f\u7528 __attribute__ (( reorder_with_hint ( high_priority ))) \u4f7f\u7528\u65b0\u7684CUDA 12.x\u7279\u6027 \uff1a #pragma unroll 2 // \u5229\u7528\u589e\u5f3a\u7684\u5faa\u73af\u5c55\u5f00 RTX 4090\u7684\u8fd9\u4e9b\u65b0\u6307\u4ee4\u9700\u8981\u914d\u5408CUDA 12.x\u53ca\u4ee5\u4e0a\u7248\u672c\u4f7f\u7528\uff0c\u5efa\u8bae\u53c2\u8003NVIDIA\u7684\u300aAda Lovelace\u67b6\u6784\u767d\u76ae\u4e66\u300b\u83b7\u53d6\u6700\u65b0\u6307\u4ee4\u7ec6\u8282\u3002","title":"\u4e94\u3001\u5173\u952e\u4f18\u5316\u5efa\u8bae"},{"location":"cuda/other/","text":"mps : MPS \u662f CUDA \u7684 Multi-Process Service\uff08\u591a\u8fdb\u7a0b\u670d\u52a1\uff09\uff0c\u5b83\u5141\u8bb8\u591a\u4e2a CUDA \u5e94\u7528\u7a0b\u5e8f\u5171\u4eab GPU \u8d44\u6e90\uff0c\u4ece\u800c\u63d0\u9ad8 GPU \u7684\u5229\u7528\u7387\u548c\u541e\u5410\u91cf\u3002MPS \u53ef\u4ee5\u5e2e\u52a9\u51cf\u5c11\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u5f00\u9500\uff0c\u5e76\u5141\u8bb8\u591a\u4e2a\u8fdb\u7a0b\u540c\u65f6\u6267\u884c GPU \u4efb\u52a1\u3002 rdma : RDMA\uff08Remote Direct Memory Access\uff09\u662f\u4e00\u79cd\u7f51\u7edc\u901a\u4fe1\u6280\u672f\uff0c\u5b83\u5141\u8bb8\u5728\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u4e4b\u95f4\u76f4\u63a5\u8bbf\u95ee\u5185\u5b58\uff0c\u800c\u4e0d\u9700\u8981\u901a\u8fc7\u7f51\u7edc\u8fdb\u884c\u6570\u636e\u4f20\u8f93\u3002RDMA \u6280\u672f\u53ef\u4ee5\u63d0\u9ad8\u6570\u636e\u4f20\u8f93\u7684\u6548\u7387\u548c\u6027\u80fd\u3002","title":"Other"},{"location":"cuda/profile/","text":"\u5728\u547d\u4ee4\u884c\u6a21\u5f0f\u4e0b\u67e5\u770bCUDA\u7a0b\u5e8f\u6027\u80fd \u00b6 \u8981\u5728\u547d\u4ee4\u884c\u6a21\u5f0f\u4e0b\u67e5\u770bCUDA\u7a0b\u5e8f\u7684\u6027\u80fd\uff0c\u7279\u522b\u662f\u6bcf\u6761\u6307\u4ee4\u7684\u8017\u65f6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u51e0\u79cd\u65b9\u6cd5\uff1a 1. \u4f7f\u7528nvprof (NVIDIA Profiler) \u00b6 nvprof\u662fNVIDIA\u63d0\u4f9b\u7684\u547d\u4ee4\u884c\u6027\u80fd\u5206\u6790\u5de5\u5177\uff0c\u53ef\u4ee5\u8be6\u7ec6\u5206\u6790CUDA\u5185\u6838\u548cAPI\u8c03\u7528\u3002 nvprof ./your_cuda_program \u5e38\u7528\u9009\u9879\uff1a \u00b6 --print-gpu-trace \uff1a\u663e\u793aGPU\u6d3b\u52a8\u7684\u65f6\u95f4\u7ebf --metrics all \uff1a\u663e\u793a\u6240\u6709\u53ef\u7528\u6307\u6807 --events all \uff1a\u8bb0\u5f55\u6240\u6709\u4e8b\u4ef6 --analysis-metrics \uff1a\u63d0\u4f9b\u66f4\u8be6\u7ec6\u7684\u5206\u6790 \u4f8b\u5982\uff0c\u67e5\u770b\u6bcf\u6761\u6307\u4ee4\u7684\u8017\u65f6\uff1a nvprof --print-gpu-trace --metrics inst_executed ./your_cuda_program 2. \u4f7f\u7528Nsight Compute (ncu) \u00b6 Nsight Compute\u662f\u66f4\u73b0\u4ee3\u7684CUDA\u5185\u6838\u5206\u6790\u5de5\u5177\uff0c\u63d0\u4f9b\u6307\u4ee4\u7ea7\u5206\u6790\uff1a ncu --set full ./your_cuda_program sudo apt install nvidia-modprobe sudo usermod -a -G video $USER reboot \u5e38\u7528\u9009\u9879\uff1a \u00b6 --section SpeedOfLight \uff1a\u663e\u793a\u8ba1\u7b97\u548c\u5185\u5b58\u541e\u5410\u91cf --section InstructionStats \uff1a\u663e\u793a\u6307\u4ee4\u7edf\u8ba1 --section SchedulerStats \uff1a\u663e\u793a\u8c03\u5ea6\u5668\u7edf\u8ba1 --kernel-regex pattern \uff1a\u53ea\u5206\u6790\u5339\u914d\u7684\u5185\u6838 \u4f8b\u5982\uff0c\u5206\u6790\u7279\u5b9a\u5185\u6838\u7684\u6307\u4ee4\u8017\u65f6\uff1a ncu --kernel-name myKernel --section InstructionStats ./your_cuda_program 3. \u4f7f\u7528Nsight Systems (nsys) \u00b6 \u5bf9\u4e8e\u7cfb\u7edf\u7ea7\u5206\u6790\uff0c\u5305\u62ecCPU\u548cGPU\u6d3b\u52a8\uff1a nsys profile ./your_cuda_program 4. \u5728\u4ee3\u7801\u4e2d\u6dfb\u52a0\u65f6\u95f4\u6d4b\u91cf \u00b6 \u4f60\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u624b\u52a8\u6dfb\u52a0\u65f6\u95f4\u6d4b\u91cf\uff1a cudaEvent_t start , stop ; cudaEventCreate ( & start ); cudaEventCreate ( & stop ); cudaEventRecord ( start ); // \u8981\u6d4b\u91cf\u7684CUDA\u4ee3\u7801 myKernel <<< grid , block >>> (...); cudaEventRecord ( stop ); cudaEventSynchronize ( stop ); float milliseconds = 0 ; cudaEventElapsedTime ( & milliseconds , start , stop ); printf ( \"Kernel time: %f ms \\n \" , milliseconds ); 5. \u67e5\u770bPTX/SASS\u6307\u4ee4 \u00b6 \u8981\u67e5\u770b\u5b9e\u9645\u7684\u6307\u4ee4\u7ea7\u6027\u80fd\uff0c\u4f60\u9700\u8981\u5206\u6790PTX\u6216SASS\u4ee3\u7801\uff1a cuobjdump -sass your_cuda_program \u7136\u540e\u7ed3\u5408Nsight Compute\u7684\u5206\u6790\u7ed3\u679c\u6765\u7406\u89e3\u6bcf\u6761\u6307\u4ee4\u7684\u6027\u80fd\u3002 \u6ce8\u610f\u4e8b\u9879 \u00b6 \u786e\u4fdd\u4f60\u7684\u7a0b\u5e8f\u662f\u4f7f\u7528\u8c03\u8bd5\u7b26\u53f7\u7f16\u8bd1\u7684\uff08 -G \u6216 -lineinfo \u9009\u9879\uff09 \u5206\u6790\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u6027\u80fd\uff0c\u56e0\u6b64\u7ed3\u679c\u4ec5\u4f9b\u53c2\u8003 \u5bf9\u4e8e\u6307\u4ee4\u7ea7\u5206\u6790\uff0cNsight Compute\u901a\u5e38\u6bd4nvprof\u63d0\u4f9b\u66f4\u8be6\u7ec6\u7684\u4fe1\u606f CUDA\u6027\u80fd\u5206\u6790\u5de5\u5177\u4f18\u7f3a\u70b9\u5bf9\u6bd4 \u00b6 \u4ee5\u4e0b\u662f\u5404\u79cdCUDA\u6027\u80fd\u5206\u6790\u65b9\u6cd5\u7684\u4f18\u7f3a\u70b9\u6bd4\u8f83\uff0c\u5e2e\u52a9\u4f60\u6839\u636e\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u5de5\u5177\uff1a 1. nvprof (NVIDIA Profiler) \u00b6 \u4f18\u70b9 \uff1a - \u7b80\u5355\u6613\u7528\uff0c\u57fa\u672c\u6027\u80fd\u6570\u636e\u4e00\u76ee\u4e86\u7136 - \u652f\u6301\u6240\u6709CUDA\u7248\u672c\uff08\u867d\u7136\u65b0\u7248\u672c\u5df2\u5f03\u7528\uff0c\u4f46\u4ecd\u5e7f\u6cdb\u4f7f\u7528\uff09 - \u53ef\u4ee5\u6536\u96c6\u5404\u79cd\u786c\u4ef6\u8ba1\u6570\u5668 - \u63d0\u4f9bAPI\u8c03\u7528\u548c\u5185\u6838\u6267\u884c\u7684\u65f6\u95f4\u7ebf \u7f3a\u70b9 \uff1a - \u5728\u8f83\u65b0CUDA\u7248\u672c\u4e2d\u5df2\u6807\u8bb0\u4e3a\u5f03\u7528\uff08\u63a8\u8350\u4f7f\u7528Nsight\u5de5\u5177\uff09 - \u6307\u4ee4\u7ea7\u5206\u6790\u4e0d\u591f\u8be6\u7ec6 - \u5bf9Ampere\u67b6\u6784\u53ca\u66f4\u65b0\u7684GPU\u652f\u6301\u6709\u9650 - \u7528\u6237\u754c\u9762\u76f8\u5bf9\u7b80\u5355 2. Nsight Compute (ncu) \u00b6 \u4f18\u70b9 \uff1a - \u63d0\u4f9b\u6700\u8be6\u7ec6\u7684\u6307\u4ee4\u7ea7\u6027\u80fd\u5206\u6790 - \u652f\u6301\u6700\u65b0\u7684GPU\u67b6\u6784\u7279\u6027 - \u53ef\u4ee5\u5206\u6790\u5355\u4e2a\u5185\u6838\u7684SASS\u6307\u4ee4\u6027\u80fd - \u63d0\u4f9b\u4e30\u5bcc\u7684\u6027\u80fd\u6307\u6807\u548c\u74f6\u9888\u5206\u6790 - \u652f\u6301\u4ea4\u4e92\u5f0f\u5206\u6790\u6a21\u5f0f \u7f3a\u70b9 \uff1a - \u5b66\u4e60\u66f2\u7ebf\u8f83\u9661\u5ced - \u8be6\u7ec6\u5206\u6790\u4f1a\u663e\u8457\u589e\u52a0\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4 - \u8f93\u51fa\u4fe1\u606f\u91cf\u5927\uff0c\u9700\u8981\u4e13\u4e1a\u77e5\u8bc6\u89e3\u8bfb - \u4e3b\u8981\u5173\u6ce8\u5185\u6838\u6027\u80fd\uff0c\u7cfb\u7edf\u7ea7\u5206\u6790\u8f83\u5f31 3. Nsight Systems (nsys) \u00b6 \u4f18\u70b9 \uff1a - \u63d0\u4f9b\u5b8c\u6574\u7684\u7cfb\u7edf\u7ea7\u89c6\u56fe\uff08CPU+GPU+\u5185\u5b58\u7b49\uff09 - \u65f6\u95f4\u7ebf\u53ef\u89c6\u5316\u975e\u5e38\u5f3a\u5927 - \u5f00\u9500\u76f8\u5bf9\u8f83\u5c0f\uff0c\u9002\u5408\u5206\u6790\u6574\u4e2a\u5e94\u7528 - \u652f\u6301\u591a\u8fdb\u7a0b\u548c\u591aGPU\u5206\u6790 - \u53ef\u4ee5\u8bc6\u522bCPU-GPU\u540c\u6b65\u95ee\u9898 \u7f3a\u70b9 \uff1a - \u4e0d\u63d0\u4f9b\u6307\u4ee4\u7ea7\u5206\u6790\u7ec6\u8282 - \u5bf9\u4e8e\u7eaf\u5185\u6838\u4f18\u5316\u5e2e\u52a9\u6709\u9650 - \u751f\u6210\u7684\u62a5\u544a\u6587\u4ef6\u53ef\u80fd\u5f88\u5927 - \u9700\u8981GUI\uff08nsight-sys\uff09\u83b7\u5f97\u6700\u4f73\u4f53\u9a8c 4. \u4ee3\u7801\u5185\u624b\u52a8\u8ba1\u65f6 \u00b6 \u4f18\u70b9 \uff1a - \u7cbe\u786e\u63a7\u5236\u6d4b\u91cf\u8303\u56f4 - \u65e0\u9700\u989d\u5916\u5de5\u5177\u4f9d\u8d56 - \u53ef\u4ee5\u96c6\u6210\u5230\u81ea\u52a8\u5316\u6d4b\u8bd5\u4e2d - \u9002\u5408\u751f\u4ea7\u73af\u5883\u76d1\u63a7 \u7f3a\u70b9 \uff1a - \u53ea\u63d0\u4f9b\u7c97\u7c92\u5ea6\u65f6\u95f4\u6d4b\u91cf - \u65e0\u6cd5\u83b7\u53d6\u786c\u4ef6\u6027\u80fd\u8ba1\u6570\u5668 - \u9700\u8981\u4fee\u6539\u4ee3\u7801 - \u6d4b\u91cf\u672c\u8eab\u53ef\u80fd\u5f15\u5165\u5f00\u9500 5. PTX/SASS\u6307\u4ee4\u5206\u6790 (cuobjdump) \u00b6 \u4f18\u70b9 \uff1a - \u67e5\u770b\u5b9e\u9645\u6267\u884c\u7684\u673a\u5668\u6307\u4ee4 - \u7406\u89e3\u7f16\u8bd1\u5668\u4f18\u5316\u7ed3\u679c - \u5e2e\u52a9\u8fdb\u884c\u6781\u7aef\u4f18\u5316 \u7f3a\u70b9 \uff1a - \u9700\u8981\u6df1\u539a\u7684GPU\u67b6\u6784\u77e5\u8bc6 - \u65e0\u6cd5\u76f4\u63a5\u5173\u8054\u5230\u6e90\u4ee3\u7801 - \u4e0d\u63d0\u4f9b\u6027\u80fd\u6570\u636e - \u5206\u6790\u8fc7\u7a0b\u7e41\u7410 \u5de5\u5177\u9009\u62e9\u5efa\u8bae \u00b6 \u5206\u6790\u9700\u6c42 \u63a8\u8350\u5de5\u5177 \u5feb\u901f\u83b7\u53d6\u57fa\u672c\u6027\u80fd\u6570\u636e nvprof \u6df1\u5165\u5206\u6790\u5185\u6838\u74f6\u9888 Nsight Compute \u7cfb\u7edf\u7ea7\u6027\u80fd\u5206\u6790 Nsight Systems \u957f\u671f\u6027\u80fd\u76d1\u63a7 \u4ee3\u7801\u5185\u8ba1\u65f6 \u6781\u7aef\u4f18\u5316/\u6307\u4ee4\u5206\u6790 cuobjdump + Nsight Compute \u5bf9\u4e8e\u4f60\u7684\u5177\u4f53\u9700\u6c42\"\u67e5\u770b\u6bcf\u4e00\u6761\u6307\u4ee4\u7684\u8017\u65f6\"\uff0c Nsight Compute (ncu) \u662f\u6700\u5408\u9002\u7684\u9009\u62e9\uff0c\u5b83\u80fd\u63d0\u4f9b\u6700\u8be6\u7ec6\u7684\u6307\u4ee4\u7ea7\u6027\u80fd\u5206\u6790\uff0c\u5305\u62ec\u6307\u4ee4\u541e\u5410\u91cf\u3001\u505c\u987f\u5468\u671f\u7b49\u4fe1\u606f\u3002 sudo vim /etc/modprobe.d/nvidia-profiler.conf # options nvidia NVreg_RestrictProfilingToAdminUsers=0 sudo update-initramfs -u sudo reboot","title":"\u5728\u547d\u4ee4\u884c\u6a21\u5f0f\u4e0b\u67e5\u770bCUDA\u7a0b\u5e8f\u6027\u80fd"},{"location":"cuda/profile/#cuda","text":"\u8981\u5728\u547d\u4ee4\u884c\u6a21\u5f0f\u4e0b\u67e5\u770bCUDA\u7a0b\u5e8f\u7684\u6027\u80fd\uff0c\u7279\u522b\u662f\u6bcf\u6761\u6307\u4ee4\u7684\u8017\u65f6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u51e0\u79cd\u65b9\u6cd5\uff1a","title":"\u5728\u547d\u4ee4\u884c\u6a21\u5f0f\u4e0b\u67e5\u770bCUDA\u7a0b\u5e8f\u6027\u80fd"},{"location":"cuda/profile/#1-nvprof-nvidia-profiler","text":"nvprof\u662fNVIDIA\u63d0\u4f9b\u7684\u547d\u4ee4\u884c\u6027\u80fd\u5206\u6790\u5de5\u5177\uff0c\u53ef\u4ee5\u8be6\u7ec6\u5206\u6790CUDA\u5185\u6838\u548cAPI\u8c03\u7528\u3002 nvprof ./your_cuda_program","title":"1. \u4f7f\u7528nvprof (NVIDIA Profiler)"},{"location":"cuda/profile/#_1","text":"--print-gpu-trace \uff1a\u663e\u793aGPU\u6d3b\u52a8\u7684\u65f6\u95f4\u7ebf --metrics all \uff1a\u663e\u793a\u6240\u6709\u53ef\u7528\u6307\u6807 --events all \uff1a\u8bb0\u5f55\u6240\u6709\u4e8b\u4ef6 --analysis-metrics \uff1a\u63d0\u4f9b\u66f4\u8be6\u7ec6\u7684\u5206\u6790 \u4f8b\u5982\uff0c\u67e5\u770b\u6bcf\u6761\u6307\u4ee4\u7684\u8017\u65f6\uff1a nvprof --print-gpu-trace --metrics inst_executed ./your_cuda_program","title":"\u5e38\u7528\u9009\u9879\uff1a"},{"location":"cuda/profile/#2-nsight-compute-ncu","text":"Nsight Compute\u662f\u66f4\u73b0\u4ee3\u7684CUDA\u5185\u6838\u5206\u6790\u5de5\u5177\uff0c\u63d0\u4f9b\u6307\u4ee4\u7ea7\u5206\u6790\uff1a ncu --set full ./your_cuda_program sudo apt install nvidia-modprobe sudo usermod -a -G video $USER reboot","title":"2. \u4f7f\u7528Nsight Compute (ncu)"},{"location":"cuda/profile/#_2","text":"--section SpeedOfLight \uff1a\u663e\u793a\u8ba1\u7b97\u548c\u5185\u5b58\u541e\u5410\u91cf --section InstructionStats \uff1a\u663e\u793a\u6307\u4ee4\u7edf\u8ba1 --section SchedulerStats \uff1a\u663e\u793a\u8c03\u5ea6\u5668\u7edf\u8ba1 --kernel-regex pattern \uff1a\u53ea\u5206\u6790\u5339\u914d\u7684\u5185\u6838 \u4f8b\u5982\uff0c\u5206\u6790\u7279\u5b9a\u5185\u6838\u7684\u6307\u4ee4\u8017\u65f6\uff1a ncu --kernel-name myKernel --section InstructionStats ./your_cuda_program","title":"\u5e38\u7528\u9009\u9879\uff1a"},{"location":"cuda/profile/#3-nsight-systems-nsys","text":"\u5bf9\u4e8e\u7cfb\u7edf\u7ea7\u5206\u6790\uff0c\u5305\u62ecCPU\u548cGPU\u6d3b\u52a8\uff1a nsys profile ./your_cuda_program","title":"3. \u4f7f\u7528Nsight Systems (nsys)"},{"location":"cuda/profile/#4","text":"\u4f60\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u624b\u52a8\u6dfb\u52a0\u65f6\u95f4\u6d4b\u91cf\uff1a cudaEvent_t start , stop ; cudaEventCreate ( & start ); cudaEventCreate ( & stop ); cudaEventRecord ( start ); // \u8981\u6d4b\u91cf\u7684CUDA\u4ee3\u7801 myKernel <<< grid , block >>> (...); cudaEventRecord ( stop ); cudaEventSynchronize ( stop ); float milliseconds = 0 ; cudaEventElapsedTime ( & milliseconds , start , stop ); printf ( \"Kernel time: %f ms \\n \" , milliseconds );","title":"4. \u5728\u4ee3\u7801\u4e2d\u6dfb\u52a0\u65f6\u95f4\u6d4b\u91cf"},{"location":"cuda/profile/#5-ptxsass","text":"\u8981\u67e5\u770b\u5b9e\u9645\u7684\u6307\u4ee4\u7ea7\u6027\u80fd\uff0c\u4f60\u9700\u8981\u5206\u6790PTX\u6216SASS\u4ee3\u7801\uff1a cuobjdump -sass your_cuda_program \u7136\u540e\u7ed3\u5408Nsight Compute\u7684\u5206\u6790\u7ed3\u679c\u6765\u7406\u89e3\u6bcf\u6761\u6307\u4ee4\u7684\u6027\u80fd\u3002","title":"5. \u67e5\u770bPTX/SASS\u6307\u4ee4"},{"location":"cuda/profile/#_3","text":"\u786e\u4fdd\u4f60\u7684\u7a0b\u5e8f\u662f\u4f7f\u7528\u8c03\u8bd5\u7b26\u53f7\u7f16\u8bd1\u7684\uff08 -G \u6216 -lineinfo \u9009\u9879\uff09 \u5206\u6790\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u6027\u80fd\uff0c\u56e0\u6b64\u7ed3\u679c\u4ec5\u4f9b\u53c2\u8003 \u5bf9\u4e8e\u6307\u4ee4\u7ea7\u5206\u6790\uff0cNsight Compute\u901a\u5e38\u6bd4nvprof\u63d0\u4f9b\u66f4\u8be6\u7ec6\u7684\u4fe1\u606f","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"cuda/profile/#cuda_1","text":"\u4ee5\u4e0b\u662f\u5404\u79cdCUDA\u6027\u80fd\u5206\u6790\u65b9\u6cd5\u7684\u4f18\u7f3a\u70b9\u6bd4\u8f83\uff0c\u5e2e\u52a9\u4f60\u6839\u636e\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u5de5\u5177\uff1a","title":"CUDA\u6027\u80fd\u5206\u6790\u5de5\u5177\u4f18\u7f3a\u70b9\u5bf9\u6bd4"},{"location":"cuda/profile/#1-nvprof-nvidia-profiler_1","text":"\u4f18\u70b9 \uff1a - \u7b80\u5355\u6613\u7528\uff0c\u57fa\u672c\u6027\u80fd\u6570\u636e\u4e00\u76ee\u4e86\u7136 - \u652f\u6301\u6240\u6709CUDA\u7248\u672c\uff08\u867d\u7136\u65b0\u7248\u672c\u5df2\u5f03\u7528\uff0c\u4f46\u4ecd\u5e7f\u6cdb\u4f7f\u7528\uff09 - \u53ef\u4ee5\u6536\u96c6\u5404\u79cd\u786c\u4ef6\u8ba1\u6570\u5668 - \u63d0\u4f9bAPI\u8c03\u7528\u548c\u5185\u6838\u6267\u884c\u7684\u65f6\u95f4\u7ebf \u7f3a\u70b9 \uff1a - \u5728\u8f83\u65b0CUDA\u7248\u672c\u4e2d\u5df2\u6807\u8bb0\u4e3a\u5f03\u7528\uff08\u63a8\u8350\u4f7f\u7528Nsight\u5de5\u5177\uff09 - \u6307\u4ee4\u7ea7\u5206\u6790\u4e0d\u591f\u8be6\u7ec6 - \u5bf9Ampere\u67b6\u6784\u53ca\u66f4\u65b0\u7684GPU\u652f\u6301\u6709\u9650 - \u7528\u6237\u754c\u9762\u76f8\u5bf9\u7b80\u5355","title":"1. nvprof (NVIDIA Profiler)"},{"location":"cuda/profile/#2-nsight-compute-ncu_1","text":"\u4f18\u70b9 \uff1a - \u63d0\u4f9b\u6700\u8be6\u7ec6\u7684\u6307\u4ee4\u7ea7\u6027\u80fd\u5206\u6790 - \u652f\u6301\u6700\u65b0\u7684GPU\u67b6\u6784\u7279\u6027 - \u53ef\u4ee5\u5206\u6790\u5355\u4e2a\u5185\u6838\u7684SASS\u6307\u4ee4\u6027\u80fd - \u63d0\u4f9b\u4e30\u5bcc\u7684\u6027\u80fd\u6307\u6807\u548c\u74f6\u9888\u5206\u6790 - \u652f\u6301\u4ea4\u4e92\u5f0f\u5206\u6790\u6a21\u5f0f \u7f3a\u70b9 \uff1a - \u5b66\u4e60\u66f2\u7ebf\u8f83\u9661\u5ced - \u8be6\u7ec6\u5206\u6790\u4f1a\u663e\u8457\u589e\u52a0\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4 - \u8f93\u51fa\u4fe1\u606f\u91cf\u5927\uff0c\u9700\u8981\u4e13\u4e1a\u77e5\u8bc6\u89e3\u8bfb - \u4e3b\u8981\u5173\u6ce8\u5185\u6838\u6027\u80fd\uff0c\u7cfb\u7edf\u7ea7\u5206\u6790\u8f83\u5f31","title":"2. Nsight Compute (ncu)"},{"location":"cuda/profile/#3-nsight-systems-nsys_1","text":"\u4f18\u70b9 \uff1a - \u63d0\u4f9b\u5b8c\u6574\u7684\u7cfb\u7edf\u7ea7\u89c6\u56fe\uff08CPU+GPU+\u5185\u5b58\u7b49\uff09 - \u65f6\u95f4\u7ebf\u53ef\u89c6\u5316\u975e\u5e38\u5f3a\u5927 - \u5f00\u9500\u76f8\u5bf9\u8f83\u5c0f\uff0c\u9002\u5408\u5206\u6790\u6574\u4e2a\u5e94\u7528 - \u652f\u6301\u591a\u8fdb\u7a0b\u548c\u591aGPU\u5206\u6790 - \u53ef\u4ee5\u8bc6\u522bCPU-GPU\u540c\u6b65\u95ee\u9898 \u7f3a\u70b9 \uff1a - \u4e0d\u63d0\u4f9b\u6307\u4ee4\u7ea7\u5206\u6790\u7ec6\u8282 - \u5bf9\u4e8e\u7eaf\u5185\u6838\u4f18\u5316\u5e2e\u52a9\u6709\u9650 - \u751f\u6210\u7684\u62a5\u544a\u6587\u4ef6\u53ef\u80fd\u5f88\u5927 - \u9700\u8981GUI\uff08nsight-sys\uff09\u83b7\u5f97\u6700\u4f73\u4f53\u9a8c","title":"3. Nsight Systems (nsys)"},{"location":"cuda/profile/#4_1","text":"\u4f18\u70b9 \uff1a - \u7cbe\u786e\u63a7\u5236\u6d4b\u91cf\u8303\u56f4 - \u65e0\u9700\u989d\u5916\u5de5\u5177\u4f9d\u8d56 - \u53ef\u4ee5\u96c6\u6210\u5230\u81ea\u52a8\u5316\u6d4b\u8bd5\u4e2d - \u9002\u5408\u751f\u4ea7\u73af\u5883\u76d1\u63a7 \u7f3a\u70b9 \uff1a - \u53ea\u63d0\u4f9b\u7c97\u7c92\u5ea6\u65f6\u95f4\u6d4b\u91cf - \u65e0\u6cd5\u83b7\u53d6\u786c\u4ef6\u6027\u80fd\u8ba1\u6570\u5668 - \u9700\u8981\u4fee\u6539\u4ee3\u7801 - \u6d4b\u91cf\u672c\u8eab\u53ef\u80fd\u5f15\u5165\u5f00\u9500","title":"4. \u4ee3\u7801\u5185\u624b\u52a8\u8ba1\u65f6"},{"location":"cuda/profile/#5-ptxsass-cuobjdump","text":"\u4f18\u70b9 \uff1a - \u67e5\u770b\u5b9e\u9645\u6267\u884c\u7684\u673a\u5668\u6307\u4ee4 - \u7406\u89e3\u7f16\u8bd1\u5668\u4f18\u5316\u7ed3\u679c - \u5e2e\u52a9\u8fdb\u884c\u6781\u7aef\u4f18\u5316 \u7f3a\u70b9 \uff1a - \u9700\u8981\u6df1\u539a\u7684GPU\u67b6\u6784\u77e5\u8bc6 - \u65e0\u6cd5\u76f4\u63a5\u5173\u8054\u5230\u6e90\u4ee3\u7801 - \u4e0d\u63d0\u4f9b\u6027\u80fd\u6570\u636e - \u5206\u6790\u8fc7\u7a0b\u7e41\u7410","title":"5. PTX/SASS\u6307\u4ee4\u5206\u6790 (cuobjdump)"},{"location":"cuda/profile/#_4","text":"\u5206\u6790\u9700\u6c42 \u63a8\u8350\u5de5\u5177 \u5feb\u901f\u83b7\u53d6\u57fa\u672c\u6027\u80fd\u6570\u636e nvprof \u6df1\u5165\u5206\u6790\u5185\u6838\u74f6\u9888 Nsight Compute \u7cfb\u7edf\u7ea7\u6027\u80fd\u5206\u6790 Nsight Systems \u957f\u671f\u6027\u80fd\u76d1\u63a7 \u4ee3\u7801\u5185\u8ba1\u65f6 \u6781\u7aef\u4f18\u5316/\u6307\u4ee4\u5206\u6790 cuobjdump + Nsight Compute \u5bf9\u4e8e\u4f60\u7684\u5177\u4f53\u9700\u6c42\"\u67e5\u770b\u6bcf\u4e00\u6761\u6307\u4ee4\u7684\u8017\u65f6\"\uff0c Nsight Compute (ncu) \u662f\u6700\u5408\u9002\u7684\u9009\u62e9\uff0c\u5b83\u80fd\u63d0\u4f9b\u6700\u8be6\u7ec6\u7684\u6307\u4ee4\u7ea7\u6027\u80fd\u5206\u6790\uff0c\u5305\u62ec\u6307\u4ee4\u541e\u5410\u91cf\u3001\u505c\u987f\u5468\u671f\u7b49\u4fe1\u606f\u3002 sudo vim /etc/modprobe.d/nvidia-profiler.conf # options nvidia NVreg_RestrictProfilingToAdminUsers=0 sudo update-initramfs -u sudo reboot","title":"\u5de5\u5177\u9009\u62e9\u5efa\u8bae"},{"location":"cuda/tilelang/","text":"tilelang \u00b6","title":"tilelang"},{"location":"cuda/tilelang/#tilelang","text":"","title":"tilelang"},{"location":"daily/0327/","text":"todo \u00b6 \u5b66\u4e60 code/skiplist gpubenchmark \u00b6 https://github.com/RRZE-HPC/gpu-benches/tree/master llvm \u00b6 https://llvm-study-notes.readthedocs.io/en/latest/ cuda content \u00b6 cuda-gdb cuda-memcheck ncu --target-processes all -o profile_output python3 elu.py \u5206\u6790 profile_output.ncu-rep \u7ed3\u679c \u53ef\u4ee5\u8f6c\u4e3a csv \u6587\u4ef6: ncu --import profile_output.ncu-rep --csv --page raw > profile_output.csv \u770b\u6765\u4fe1\u606f\u5e94\u8be5\u975e\u5e38\u5168 ncu --import profile_output.ncu-rep --page details ncu --import profile_output.ncu-rep --export profile_output.html","title":"0327"},{"location":"daily/0327/#todo","text":"\u5b66\u4e60 code/skiplist","title":"todo"},{"location":"daily/0327/#gpubenchmark","text":"https://github.com/RRZE-HPC/gpu-benches/tree/master","title":"gpubenchmark"},{"location":"daily/0327/#llvm","text":"https://llvm-study-notes.readthedocs.io/en/latest/","title":"llvm"},{"location":"daily/0327/#cuda-content","text":"cuda-gdb cuda-memcheck ncu --target-processes all -o profile_output python3 elu.py \u5206\u6790 profile_output.ncu-rep \u7ed3\u679c \u53ef\u4ee5\u8f6c\u4e3a csv \u6587\u4ef6: ncu --import profile_output.ncu-rep --csv --page raw > profile_output.csv \u770b\u6765\u4fe1\u606f\u5e94\u8be5\u975e\u5e38\u5168 ncu --import profile_output.ncu-rep --page details ncu --import profile_output.ncu-rep --export profile_output.html","title":"cuda content"},{"location":"daily/0328/","text":"vae-3d conv \u00b6 Wan-VAE \u5206\u5757\u56e0\u679c3D\u5377\u79ef from https://zhuanlan.zhihu.com/p/29268015945 class CausalConv3d ( nn . Conv3d ): \"\"\" Causal 3d convolusion. \"\"\" def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) self . _padding = ( self . padding [ 2 ], self . padding [ 2 ], self . padding [ 1 ], self . padding [ 1 ], 2 * self . padding [ 0 ], 0 ) self . padding = ( 0 , 0 , 0 ) def forward ( self , x , cache_x = None ): padding = list ( self . _padding ) if cache_x is not None and self . _padding [ 4 ] > 0 : cache_x = cache_x . to ( x . device ) x = torch . cat ([ cache_x , x ], dim = 2 ) padding [ 4 ] -= cache_x . shape [ 2 ] x = F . pad ( x , padding ) return super () . forward ( x ) (Pdb) p self.decoder WanDecoder3d( (nonlinearity): SiLU() (conv_in): WanCausalConv3d(16, 384, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (mid_block): WanMidBlock( (attentions): ModuleList( (0): WanAttentionBlock( (norm): WanRMS_norm() (to_qkv): Conv2d(384, 1152, kernel_size=(1, 1), stride=(1, 1)) (proj): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1)) ) ) (resnets): ModuleList( (0-1): 2 x WanResidualBlock( (nonlinearity): SiLU() (norm1): WanRMS_norm() (conv1): WanCausalConv3d(384, 384, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (norm2): WanRMS_norm() (dropout): Dropout(p=0.0, inplace=False) (conv2): WanCausalConv3d(384, 384, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (conv_shortcut): Identity() ) ) ) (up_blocks): ModuleList( (0): WanUpBlock( (resnets): ModuleList( (0-1): 2 x WanResidualBlock( (nonlinearity): SiLU() (norm1): WanRMS_norm() (conv1): WanCausalConv3d(384, 384, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (norm2): WanRMS_norm() (dropout): Dropout(p=0.0, inplace=False) (conv2): WanCausalConv3d(384, 384, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (conv_shortcut): Identity() ) ) (upsamplers): ModuleList( (0): WanResample( (resample): Sequential( (0): WanUpsample(scale_factor=(2.0, 2.0), mode='nearest-exact') (1): Conv2d(384, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) ) (time_conv): WanCausalConv3d(384, 768, kernel_size=(3, 1, 1), stride=(1, 1, 1)) ) ) ) (1): WanUpBlock( (resnets): ModuleList( (0): WanResidualBlock( (nonlinearity): SiLU() (norm1): WanRMS_norm() (conv1): WanCausalConv3d(192, 384, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (norm2): WanRMS_norm() (dropout): Dropout(p=0.0, inplace=False) (conv2): WanCausalConv3d(384, 384, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (conv_shortcut): WanCausalConv3d(192, 384, kernel_size=(1, 1, 1), stride=(1, 1, 1)) ) (1): WanResidualBlock( (nonlinearity): SiLU() (norm1): WanRMS_norm() (conv1): WanCausalConv3d(384, 384, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (norm2): WanRMS_norm() (dropout): Dropout(p=0.0, inplace=False) (conv2): WanCausalConv3d(384, 384, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (conv_shortcut): Identity() ) ) (upsamplers): ModuleList( (0): WanResample( (resample): Sequential( (0): WanUpsample(scale_factor=(2.0, 2.0), mode='nearest-exact') (1): Conv2d(384, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) ) (time_conv): WanCausalConv3d(384, 768, kernel_size=(3, 1, 1), stride=(1, 1, 1)) ) ) ) (2): WanUpBlock( (resnets): ModuleList( (0-1): 2 x WanResidualBlock( (nonlinearity): SiLU() (norm1): WanRMS_norm() (conv1): WanCausalConv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (norm2): WanRMS_norm() (dropout): Dropout(p=0.0, inplace=False) (conv2): WanCausalConv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (conv_shortcut): Identity() ) ) (upsamplers): ModuleList( (0): WanResample( (resample): Sequential( (0): WanUpsample(scale_factor=(2.0, 2.0), mode='nearest-exact') (1): Conv2d(192, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) ) ) ) ) (3): WanUpBlock( (resnets): ModuleList( (0-1): 2 x WanResidualBlock( (nonlinearity): SiLU() (norm1): WanRMS_norm() (conv1): WanCausalConv3d(96, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (norm2): WanRMS_norm() (dropout): Dropout(p=0.0, inplace=False) (conv2): WanCausalConv3d(96, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (conv_shortcut): Identity() ) ) ) ) (norm_out): WanRMS_norm() (conv_out): WanCausalConv3d(96, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1)) ) 3D\u56e0\u679cVAE\u67b6\u6784 cache\u5377\u79ef\u8f93\u5165\uff0c\u6d41\u5f0f\u63a8\u7406\uff0c\u6bcf\u6b21\u63a8\u7406\u4e00\u6bb5\uff0c\u663e\u5b58\u5360\u7528\u663e\u8457\u51cf\u5c11 Wan-VAE \u53ef\u4ee5\u7f16\u7801\u548c\u89e3\u7801\u4e0d\u9650\u5236\u957f\u5ea6\u76841080P\u89c6\u9891\uff0c\u800c\u4e0d\u4f1a\u4e22\u5931\u5386\u53f2\u65f6\u95f4\u4fe1\u606f\uff0c\u4f7f\u5176\u7279\u522b\u9002\u5408\u89c6\u9891\u751f\u6210\u4efb\u52a1 class WanCausalConv3d ( nn . Conv3d ): r \"\"\" A custom 3D causal convolution layer with feature caching support. This layer extends the standard Conv3D layer by ensuring causality in the time dimension and handling feature caching for efficient inference. Args: in_channels (int): Number of channels in the input image out_channels (int): Number of channels produced by the convolution kernel_size (int or tuple): Size of the convolving kernel stride (int or tuple, optional): Stride of the convolution. Default: 1 padding (int or tuple, optional): Zero-padding added to all three sides of the input. Default: 0 \"\"\" def __init__ ( self , in_channels : int , out_channels : int , kernel_size : Union [ int , Tuple [ int , int , int ]], stride : Union [ int , Tuple [ int , int , int ]] = 1 , padding : Union [ int , Tuple [ int , int , int ]] = 0 , ) -> None : super () . __init__ ( in_channels = in_channels , out_channels = out_channels , kernel_size = kernel_size , stride = stride , padding = padding , ) # Set up causal padding self . _padding = ( self . padding [ 2 ], self . padding [ 2 ], self . padding [ 1 ], self . padding [ 1 ], 2 * self . padding [ 0 ], 0 ) self . padding = ( 0 , 0 , 0 ) def forward ( self , x , cache_x = None ): padding = list ( self . _padding ) if cache_x is not None and self . _padding [ 4 ] > 0 : cache_x = cache_x . to ( x . device ) x = torch . cat ([ cache_x , x ], dim = 2 ) padding [ 4 ] -= cache_x . shape [ 2 ] x = F . pad ( x , padding ) return super () . forward ( x ) class WanMidBlock ( nn . Module ): def __init__ ( self , dim : int , dropout : float = 0.0 , non_linearity : str = \"silu\" , num_layers : int = 1 ): super () . __init__ () self . dim = dim # Create the components resnets = [ WanResidualBlock ( dim , dim , dropout , non_linearity )] attentions = [] for _ in range ( num_layers ): attentions . append ( WanAttentionBlock ( dim )) resnets . append ( WanResidualBlock ( dim , dim , dropout , non_linearity )) self . attentions = nn . ModuleList ( attentions ) self . resnets = nn . ModuleList ( resnets ) self . gradient_checkpointing = False def forward ( self , x , feat_cache = None , feat_idx = [ 0 ]): # First residual block x = self . resnets [ 0 ]( x , feat_cache , feat_idx ) # Process through attention and residual blocks for attn , resnet in zip ( self . attentions , self . resnets [ 1 :]): if attn is not None : x = attn ( x ) x = resnet ( x , feat_cache , feat_idx ) return x class WanResidualBlock ( nn . Module ): r \"\"\" A custom residual block module. Args: in_dim (int): Number of input channels. out_dim (int): Number of output channels. dropout (float, optional): Dropout rate for the dropout layer. Default is 0.0. non_linearity (str, optional): Type of non-linearity to use. Default is \"silu\". \"\"\" def __init__ ( self , in_dim : int , out_dim : int , dropout : float = 0.0 , non_linearity : str = \"silu\" , ) -> None : super () . __init__ () self . in_dim = in_dim self . out_dim = out_dim self . nonlinearity = get_activation ( non_linearity ) # layers self . norm1 = WanRMS_norm ( in_dim , images = False ) self . conv1 = WanCausalConv3d ( in_dim , out_dim , 3 , padding = 1 ) self . norm2 = WanRMS_norm ( out_dim , images = False ) self . dropout = nn . Dropout ( dropout ) self . conv2 = WanCausalConv3d ( out_dim , out_dim , 3 , padding = 1 ) self . conv_shortcut = WanCausalConv3d ( in_dim , out_dim , 1 ) if in_dim != out_dim else nn . Identity () def forward ( self , x , feat_cache = None , feat_idx = [ 0 ]): # Apply shortcut connection h = self . conv_shortcut ( x ) # First normalization and activation x = self . norm1 ( x ) x = self . nonlinearity ( x ) if feat_cache is not None : idx = feat_idx [ 0 ] cache_x = x [:, :, - CACHE_T :, :, :] . clone () if cache_x . shape [ 2 ] < 2 and feat_cache [ idx ] is not None : cache_x = torch . cat ([ feat_cache [ idx ][:, :, - 1 , :, :] . unsqueeze ( 2 ) . to ( cache_x . device ), cache_x ], dim = 2 ) x = self . conv1 ( x , feat_cache [ idx ]) feat_cache [ idx ] = cache_x feat_idx [ 0 ] += 1 else : x = self . conv1 ( x ) # Second normalization and activation x = self . norm2 ( x ) x = self . nonlinearity ( x ) # Dropout x = self . dropout ( x ) if feat_cache is not None : idx = feat_idx [ 0 ] cache_x = x [:, :, - CACHE_T :, :, :] . clone () if cache_x . shape [ 2 ] < 2 and feat_cache [ idx ] is not None : cache_x = torch . cat ([ feat_cache [ idx ][:, :, - 1 , :, :] . unsqueeze ( 2 ) . to ( cache_x . device ), cache_x ], dim = 2 ) x = self . conv2 ( x , feat_cache [ idx ]) feat_cache [ idx ] = cache_x feat_idx [ 0 ] += 1 else : x = self . conv2 ( x ) # Add residual connection return x + h def _decode ( self , z : torch . Tensor , return_dict : bool = True ) -> Union [ DecoderOutput , torch . Tensor ]: self . clear_cache () iter_ = z . shape [ 2 ] x = self . post_quant_conv ( z ) breakpoint () for i in range ( iter_ ): self . _conv_idx = [ 0 ] if i == 0 : # \u9010\u5e27\u53bb\u505a\u7684\u5904\u7406 out = self . decoder ( x [:, :, i : i + 1 , :, :], feat_cache = self . _feat_map , feat_idx = self . _conv_idx ) else : out_ = self . decoder ( x [:, :, i : i + 1 , :, :], feat_cache = self . _feat_map , feat_idx = self . _conv_idx ) out = torch . cat ([ out , out_ ], 2 ) out = torch . clamp ( out , min =- 1.0 , max = 1.0 ) self . clear_cache () if not return_dict : return ( out ,) return DecoderOutput ( sample = out ) class WanDecoder3d ( nn . Module ): def __init__ ( self , dim = 128 , z_dim = 4 , dim_mult = [ 1 , 2 , 4 , 4 ], num_res_blocks = 2 , attn_scales = [], temperal_upsample = [ False , True , True ], dropout = 0.0 , non_linearity : str = \"silu\" , ): super () . __init__ () self . dim = dim self . z_dim = z_dim self . dim_mult = dim_mult self . num_res_blocks = num_res_blocks self . attn_scales = attn_scales self . temperal_upsample = temperal_upsample self . nonlinearity = get_activation ( non_linearity ) # dimensions dims = [ dim * u for u in [ dim_mult [ - 1 ]] + dim_mult [:: - 1 ]] scale = 1.0 / 2 ** ( len ( dim_mult ) - 2 ) # init block self . conv_in = WanCausalConv3d ( z_dim , dims [ 0 ], 3 , padding = 1 ) # middle blocks self . mid_block = WanMidBlock ( dims [ 0 ], dropout , non_linearity , num_layers = 1 ) # upsample blocks self . up_blocks = nn . ModuleList ([]) for i , ( in_dim , out_dim ) in enumerate ( zip ( dims [: - 1 ], dims [ 1 :])): # residual (+attention) blocks if i > 0 : in_dim = in_dim // 2 # Determine if we need upsampling upsample_mode = None if i != len ( dim_mult ) - 1 : upsample_mode = \"upsample3d\" if temperal_upsample [ i ] else \"upsample2d\" # Create and add the upsampling block up_block = WanUpBlock ( in_dim = in_dim , out_dim = out_dim , num_res_blocks = num_res_blocks , dropout = dropout , upsample_mode = upsample_mode , non_linearity = non_linearity , ) self . up_blocks . append ( up_block ) # Update scale for next iteration if upsample_mode is not None : scale *= 2.0 # output blocks self . norm_out = WanRMS_norm ( out_dim , images = False ) self . conv_out = WanCausalConv3d ( out_dim , 3 , 3 , padding = 1 ) self . gradient_checkpointing = False def forward ( self , x , feat_cache = None , feat_idx = [ 0 ]): ## conv1 if feat_cache is not None : idx = feat_idx [ 0 ] cache_x = x [:, :, - CACHE_T :, :, :] . clone () if cache_x . shape [ 2 ] < 2 and feat_cache [ idx ] is not None : # cache last frame of last two chunk cache_x = torch . cat ([ feat_cache [ idx ][:, :, - 1 , :, :] . unsqueeze ( 2 ) . to ( cache_x . device ), cache_x ], dim = 2 ) x = self . conv_in ( x , feat_cache [ idx ]) feat_cache [ idx ] = cache_x feat_idx [ 0 ] += 1 else : x = self . conv_in ( x ) ## middle x = self . mid_block ( x , feat_cache , feat_idx ) ## upsamples for up_block in self . up_blocks : x = up_block ( x , feat_cache , feat_idx ) ## head x = self . norm_out ( x ) x = self . nonlinearity ( x ) if feat_cache is not None : idx = feat_idx [ 0 ] cache_x = x [:, :, - CACHE_T :, :, :] . clone () if cache_x . shape [ 2 ] < 2 and feat_cache [ idx ] is not None : # cache last frame of last two chunk cache_x = torch . cat ([ feat_cache [ idx ][:, :, - 1 , :, :] . unsqueeze ( 2 ) . to ( cache_x . device ), cache_x ], dim = 2 ) x = self . conv_out ( x , feat_cache [ idx ]) feat_cache [ idx ] = cache_x feat_idx [ 0 ] += 1 else : x = self . conv_out ( x ) return x graph LR subgraph \"\u65f6\u95f4\u7ef4\u5ea6\" T1[t-2] --> T2[t-1] --> T3[t] end subgraph \"\u56e0\u679c\u5377\u79ef\" T1 --> O[\u8f93\u51fat] T2 --> O T3 --> O style O fill:#f96 end class WanUpBlock ( nn . Module ): def __init__ ( self , in_dim : int , out_dim : int , num_res_blocks : int , dropout : float = 0.0 , upsample_mode : Optional [ str ] = None , non_linearity : str = \"silu\" , ): super () . __init__ () self . in_dim = in_dim self . out_dim = out_dim # Create layers list resnets = [] # Add residual blocks and attention if needed current_dim = in_dim for _ in range ( num_res_blocks + 1 ): resnets . append ( WanResidualBlock ( current_dim , out_dim , dropout , non_linearity )) current_dim = out_dim self . resnets = nn . ModuleList ( resnets ) # Add upsampling layer if needed self . upsamplers = None if upsample_mode is not None : self . upsamplers = nn . ModuleList ([ WanResample ( out_dim , mode = upsample_mode )]) self . gradient_checkpointing = False def forward ( self , x , feat_cache = None , feat_idx = [ 0 ]): for resnet in self . resnets : if feat_cache is not None : x = resnet ( x , feat_cache , feat_idx ) else : x = resnet ( x ) if self . upsamplers is not None : if feat_cache is not None : x = self . upsamplers [ 0 ]( x , feat_cache , feat_idx ) else : x = self . upsamplers [ 0 ]( x ) return x \u73b0\u5728\u6700\u5927\u7684\u95ee\u9898\u5c31\u662f feat_cache \u8c8c\u4f3c\u6bcf\u4e00\u8f6e\u90fd\u4f1a\u6709\u4e00\u4e2acache\u8fc7\u7a0b\uff1f\u800c\u4e14\u5728\u4e00\u4e2a self.decoder \u5c31\u4f1a\u51e0\u4e4e\u6253\u6ee125\u4e2afeat_cache\u4f4d\u7f6e\u3002 \u8fd9\u91cc\u7684\u52a8\u6001\u5f88\u591a.\u5177\u4f53\u5185\u5bb9\u5305\u62ec. \u4ed6\u7684shape\u4e5f\u5f88\u5947\u602a. paper: https://files.alicdn.com/tpsservice/5c9de1c74de03972b7aa657e5a54756b.pdf \u6574\u4f53\u7ed3\u6784\u53c2\u8003\uff1a \u7b2c\u4e8c\u538b\u7f29\u5e27\u7684\u5185\u5bb9 x.shape: torch.Size([1, 16, 1, 90, 128]) before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] feat_cache torch.Size([1, 16, 2, 90, 128]) before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] \u7b2c\u4e09\u538b\u7f29\u5e27 x.shape: torch.Size([1, 16, 1, 90, 128]) before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] feat_cache torch.Size([1, 16, 2, 90, 128]) before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [0, 0, 0, 0, 2, 0] after [0, 0, 0, 0, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [0, 0, 0, 0, 2, 0] after [0, 0, 0, 0, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] \u7b2c4\u5e27 x.shape: torch.Size([1, 16, 1, 90, 128]) before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] feat_cache torch.Size([1, 16, 2, 90, 128]) before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [0, 0, 0, 0, 2, 0] after [0, 0, 0, 0, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [0, 0, 0, 0, 2, 0] after [0, 0, 0, 0, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] 5 x.shape: torch.Size([1, 16, 1, 90, 128]) before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] feat_cache torch.Size([1, 16, 2, 90, 128]) before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [0, 0, 0, 0, 2, 0] after [0, 0, 0, 0, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [0, 0, 0, 0, 2, 0] after [0, 0, 0, 0, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] \u76ee\u524d\u53d1\u73b0 \u7b2c\u4e00\u5e27\u548c\u7b2c\u4e8c\u5e27\u7684\u884c\u4e3a\u4e0e\u540e\u9762\u90fd\u4e0d\u592a\u4e00\u6837 \u65b0\u7684\u7b56\u7565 \u00b6 \u5f97\u5230\u6240\u6709\u7684shape \u8d70\u52a8\u6001 \u7528 torchview \u5f97\u5230\u6240\u6709\u7684\u7ed3\u6784\u548cshape","title":"0328"},{"location":"daily/0328/#vae-3d-conv","text":"Wan-VAE \u5206\u5757\u56e0\u679c3D\u5377\u79ef from https://zhuanlan.zhihu.com/p/29268015945 class CausalConv3d ( nn . Conv3d ): \"\"\" Causal 3d convolusion. \"\"\" def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) self . _padding = ( self . padding [ 2 ], self . padding [ 2 ], self . padding [ 1 ], self . padding [ 1 ], 2 * self . padding [ 0 ], 0 ) self . padding = ( 0 , 0 , 0 ) def forward ( self , x , cache_x = None ): padding = list ( self . _padding ) if cache_x is not None and self . _padding [ 4 ] > 0 : cache_x = cache_x . to ( x . device ) x = torch . cat ([ cache_x , x ], dim = 2 ) padding [ 4 ] -= cache_x . shape [ 2 ] x = F . pad ( x , padding ) return super () . forward ( x ) (Pdb) p self.decoder WanDecoder3d( (nonlinearity): SiLU() (conv_in): WanCausalConv3d(16, 384, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (mid_block): WanMidBlock( (attentions): ModuleList( (0): WanAttentionBlock( (norm): WanRMS_norm() (to_qkv): Conv2d(384, 1152, kernel_size=(1, 1), stride=(1, 1)) (proj): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1)) ) ) (resnets): ModuleList( (0-1): 2 x WanResidualBlock( (nonlinearity): SiLU() (norm1): WanRMS_norm() (conv1): WanCausalConv3d(384, 384, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (norm2): WanRMS_norm() (dropout): Dropout(p=0.0, inplace=False) (conv2): WanCausalConv3d(384, 384, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (conv_shortcut): Identity() ) ) ) (up_blocks): ModuleList( (0): WanUpBlock( (resnets): ModuleList( (0-1): 2 x WanResidualBlock( (nonlinearity): SiLU() (norm1): WanRMS_norm() (conv1): WanCausalConv3d(384, 384, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (norm2): WanRMS_norm() (dropout): Dropout(p=0.0, inplace=False) (conv2): WanCausalConv3d(384, 384, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (conv_shortcut): Identity() ) ) (upsamplers): ModuleList( (0): WanResample( (resample): Sequential( (0): WanUpsample(scale_factor=(2.0, 2.0), mode='nearest-exact') (1): Conv2d(384, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) ) (time_conv): WanCausalConv3d(384, 768, kernel_size=(3, 1, 1), stride=(1, 1, 1)) ) ) ) (1): WanUpBlock( (resnets): ModuleList( (0): WanResidualBlock( (nonlinearity): SiLU() (norm1): WanRMS_norm() (conv1): WanCausalConv3d(192, 384, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (norm2): WanRMS_norm() (dropout): Dropout(p=0.0, inplace=False) (conv2): WanCausalConv3d(384, 384, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (conv_shortcut): WanCausalConv3d(192, 384, kernel_size=(1, 1, 1), stride=(1, 1, 1)) ) (1): WanResidualBlock( (nonlinearity): SiLU() (norm1): WanRMS_norm() (conv1): WanCausalConv3d(384, 384, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (norm2): WanRMS_norm() (dropout): Dropout(p=0.0, inplace=False) (conv2): WanCausalConv3d(384, 384, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (conv_shortcut): Identity() ) ) (upsamplers): ModuleList( (0): WanResample( (resample): Sequential( (0): WanUpsample(scale_factor=(2.0, 2.0), mode='nearest-exact') (1): Conv2d(384, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) ) (time_conv): WanCausalConv3d(384, 768, kernel_size=(3, 1, 1), stride=(1, 1, 1)) ) ) ) (2): WanUpBlock( (resnets): ModuleList( (0-1): 2 x WanResidualBlock( (nonlinearity): SiLU() (norm1): WanRMS_norm() (conv1): WanCausalConv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (norm2): WanRMS_norm() (dropout): Dropout(p=0.0, inplace=False) (conv2): WanCausalConv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (conv_shortcut): Identity() ) ) (upsamplers): ModuleList( (0): WanResample( (resample): Sequential( (0): WanUpsample(scale_factor=(2.0, 2.0), mode='nearest-exact') (1): Conv2d(192, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) ) ) ) ) (3): WanUpBlock( (resnets): ModuleList( (0-1): 2 x WanResidualBlock( (nonlinearity): SiLU() (norm1): WanRMS_norm() (conv1): WanCausalConv3d(96, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (norm2): WanRMS_norm() (dropout): Dropout(p=0.0, inplace=False) (conv2): WanCausalConv3d(96, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1)) (conv_shortcut): Identity() ) ) ) ) (norm_out): WanRMS_norm() (conv_out): WanCausalConv3d(96, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1)) ) 3D\u56e0\u679cVAE\u67b6\u6784 cache\u5377\u79ef\u8f93\u5165\uff0c\u6d41\u5f0f\u63a8\u7406\uff0c\u6bcf\u6b21\u63a8\u7406\u4e00\u6bb5\uff0c\u663e\u5b58\u5360\u7528\u663e\u8457\u51cf\u5c11 Wan-VAE \u53ef\u4ee5\u7f16\u7801\u548c\u89e3\u7801\u4e0d\u9650\u5236\u957f\u5ea6\u76841080P\u89c6\u9891\uff0c\u800c\u4e0d\u4f1a\u4e22\u5931\u5386\u53f2\u65f6\u95f4\u4fe1\u606f\uff0c\u4f7f\u5176\u7279\u522b\u9002\u5408\u89c6\u9891\u751f\u6210\u4efb\u52a1 class WanCausalConv3d ( nn . Conv3d ): r \"\"\" A custom 3D causal convolution layer with feature caching support. This layer extends the standard Conv3D layer by ensuring causality in the time dimension and handling feature caching for efficient inference. Args: in_channels (int): Number of channels in the input image out_channels (int): Number of channels produced by the convolution kernel_size (int or tuple): Size of the convolving kernel stride (int or tuple, optional): Stride of the convolution. Default: 1 padding (int or tuple, optional): Zero-padding added to all three sides of the input. Default: 0 \"\"\" def __init__ ( self , in_channels : int , out_channels : int , kernel_size : Union [ int , Tuple [ int , int , int ]], stride : Union [ int , Tuple [ int , int , int ]] = 1 , padding : Union [ int , Tuple [ int , int , int ]] = 0 , ) -> None : super () . __init__ ( in_channels = in_channels , out_channels = out_channels , kernel_size = kernel_size , stride = stride , padding = padding , ) # Set up causal padding self . _padding = ( self . padding [ 2 ], self . padding [ 2 ], self . padding [ 1 ], self . padding [ 1 ], 2 * self . padding [ 0 ], 0 ) self . padding = ( 0 , 0 , 0 ) def forward ( self , x , cache_x = None ): padding = list ( self . _padding ) if cache_x is not None and self . _padding [ 4 ] > 0 : cache_x = cache_x . to ( x . device ) x = torch . cat ([ cache_x , x ], dim = 2 ) padding [ 4 ] -= cache_x . shape [ 2 ] x = F . pad ( x , padding ) return super () . forward ( x ) class WanMidBlock ( nn . Module ): def __init__ ( self , dim : int , dropout : float = 0.0 , non_linearity : str = \"silu\" , num_layers : int = 1 ): super () . __init__ () self . dim = dim # Create the components resnets = [ WanResidualBlock ( dim , dim , dropout , non_linearity )] attentions = [] for _ in range ( num_layers ): attentions . append ( WanAttentionBlock ( dim )) resnets . append ( WanResidualBlock ( dim , dim , dropout , non_linearity )) self . attentions = nn . ModuleList ( attentions ) self . resnets = nn . ModuleList ( resnets ) self . gradient_checkpointing = False def forward ( self , x , feat_cache = None , feat_idx = [ 0 ]): # First residual block x = self . resnets [ 0 ]( x , feat_cache , feat_idx ) # Process through attention and residual blocks for attn , resnet in zip ( self . attentions , self . resnets [ 1 :]): if attn is not None : x = attn ( x ) x = resnet ( x , feat_cache , feat_idx ) return x class WanResidualBlock ( nn . Module ): r \"\"\" A custom residual block module. Args: in_dim (int): Number of input channels. out_dim (int): Number of output channels. dropout (float, optional): Dropout rate for the dropout layer. Default is 0.0. non_linearity (str, optional): Type of non-linearity to use. Default is \"silu\". \"\"\" def __init__ ( self , in_dim : int , out_dim : int , dropout : float = 0.0 , non_linearity : str = \"silu\" , ) -> None : super () . __init__ () self . in_dim = in_dim self . out_dim = out_dim self . nonlinearity = get_activation ( non_linearity ) # layers self . norm1 = WanRMS_norm ( in_dim , images = False ) self . conv1 = WanCausalConv3d ( in_dim , out_dim , 3 , padding = 1 ) self . norm2 = WanRMS_norm ( out_dim , images = False ) self . dropout = nn . Dropout ( dropout ) self . conv2 = WanCausalConv3d ( out_dim , out_dim , 3 , padding = 1 ) self . conv_shortcut = WanCausalConv3d ( in_dim , out_dim , 1 ) if in_dim != out_dim else nn . Identity () def forward ( self , x , feat_cache = None , feat_idx = [ 0 ]): # Apply shortcut connection h = self . conv_shortcut ( x ) # First normalization and activation x = self . norm1 ( x ) x = self . nonlinearity ( x ) if feat_cache is not None : idx = feat_idx [ 0 ] cache_x = x [:, :, - CACHE_T :, :, :] . clone () if cache_x . shape [ 2 ] < 2 and feat_cache [ idx ] is not None : cache_x = torch . cat ([ feat_cache [ idx ][:, :, - 1 , :, :] . unsqueeze ( 2 ) . to ( cache_x . device ), cache_x ], dim = 2 ) x = self . conv1 ( x , feat_cache [ idx ]) feat_cache [ idx ] = cache_x feat_idx [ 0 ] += 1 else : x = self . conv1 ( x ) # Second normalization and activation x = self . norm2 ( x ) x = self . nonlinearity ( x ) # Dropout x = self . dropout ( x ) if feat_cache is not None : idx = feat_idx [ 0 ] cache_x = x [:, :, - CACHE_T :, :, :] . clone () if cache_x . shape [ 2 ] < 2 and feat_cache [ idx ] is not None : cache_x = torch . cat ([ feat_cache [ idx ][:, :, - 1 , :, :] . unsqueeze ( 2 ) . to ( cache_x . device ), cache_x ], dim = 2 ) x = self . conv2 ( x , feat_cache [ idx ]) feat_cache [ idx ] = cache_x feat_idx [ 0 ] += 1 else : x = self . conv2 ( x ) # Add residual connection return x + h def _decode ( self , z : torch . Tensor , return_dict : bool = True ) -> Union [ DecoderOutput , torch . Tensor ]: self . clear_cache () iter_ = z . shape [ 2 ] x = self . post_quant_conv ( z ) breakpoint () for i in range ( iter_ ): self . _conv_idx = [ 0 ] if i == 0 : # \u9010\u5e27\u53bb\u505a\u7684\u5904\u7406 out = self . decoder ( x [:, :, i : i + 1 , :, :], feat_cache = self . _feat_map , feat_idx = self . _conv_idx ) else : out_ = self . decoder ( x [:, :, i : i + 1 , :, :], feat_cache = self . _feat_map , feat_idx = self . _conv_idx ) out = torch . cat ([ out , out_ ], 2 ) out = torch . clamp ( out , min =- 1.0 , max = 1.0 ) self . clear_cache () if not return_dict : return ( out ,) return DecoderOutput ( sample = out ) class WanDecoder3d ( nn . Module ): def __init__ ( self , dim = 128 , z_dim = 4 , dim_mult = [ 1 , 2 , 4 , 4 ], num_res_blocks = 2 , attn_scales = [], temperal_upsample = [ False , True , True ], dropout = 0.0 , non_linearity : str = \"silu\" , ): super () . __init__ () self . dim = dim self . z_dim = z_dim self . dim_mult = dim_mult self . num_res_blocks = num_res_blocks self . attn_scales = attn_scales self . temperal_upsample = temperal_upsample self . nonlinearity = get_activation ( non_linearity ) # dimensions dims = [ dim * u for u in [ dim_mult [ - 1 ]] + dim_mult [:: - 1 ]] scale = 1.0 / 2 ** ( len ( dim_mult ) - 2 ) # init block self . conv_in = WanCausalConv3d ( z_dim , dims [ 0 ], 3 , padding = 1 ) # middle blocks self . mid_block = WanMidBlock ( dims [ 0 ], dropout , non_linearity , num_layers = 1 ) # upsample blocks self . up_blocks = nn . ModuleList ([]) for i , ( in_dim , out_dim ) in enumerate ( zip ( dims [: - 1 ], dims [ 1 :])): # residual (+attention) blocks if i > 0 : in_dim = in_dim // 2 # Determine if we need upsampling upsample_mode = None if i != len ( dim_mult ) - 1 : upsample_mode = \"upsample3d\" if temperal_upsample [ i ] else \"upsample2d\" # Create and add the upsampling block up_block = WanUpBlock ( in_dim = in_dim , out_dim = out_dim , num_res_blocks = num_res_blocks , dropout = dropout , upsample_mode = upsample_mode , non_linearity = non_linearity , ) self . up_blocks . append ( up_block ) # Update scale for next iteration if upsample_mode is not None : scale *= 2.0 # output blocks self . norm_out = WanRMS_norm ( out_dim , images = False ) self . conv_out = WanCausalConv3d ( out_dim , 3 , 3 , padding = 1 ) self . gradient_checkpointing = False def forward ( self , x , feat_cache = None , feat_idx = [ 0 ]): ## conv1 if feat_cache is not None : idx = feat_idx [ 0 ] cache_x = x [:, :, - CACHE_T :, :, :] . clone () if cache_x . shape [ 2 ] < 2 and feat_cache [ idx ] is not None : # cache last frame of last two chunk cache_x = torch . cat ([ feat_cache [ idx ][:, :, - 1 , :, :] . unsqueeze ( 2 ) . to ( cache_x . device ), cache_x ], dim = 2 ) x = self . conv_in ( x , feat_cache [ idx ]) feat_cache [ idx ] = cache_x feat_idx [ 0 ] += 1 else : x = self . conv_in ( x ) ## middle x = self . mid_block ( x , feat_cache , feat_idx ) ## upsamples for up_block in self . up_blocks : x = up_block ( x , feat_cache , feat_idx ) ## head x = self . norm_out ( x ) x = self . nonlinearity ( x ) if feat_cache is not None : idx = feat_idx [ 0 ] cache_x = x [:, :, - CACHE_T :, :, :] . clone () if cache_x . shape [ 2 ] < 2 and feat_cache [ idx ] is not None : # cache last frame of last two chunk cache_x = torch . cat ([ feat_cache [ idx ][:, :, - 1 , :, :] . unsqueeze ( 2 ) . to ( cache_x . device ), cache_x ], dim = 2 ) x = self . conv_out ( x , feat_cache [ idx ]) feat_cache [ idx ] = cache_x feat_idx [ 0 ] += 1 else : x = self . conv_out ( x ) return x graph LR subgraph \"\u65f6\u95f4\u7ef4\u5ea6\" T1[t-2] --> T2[t-1] --> T3[t] end subgraph \"\u56e0\u679c\u5377\u79ef\" T1 --> O[\u8f93\u51fat] T2 --> O T3 --> O style O fill:#f96 end class WanUpBlock ( nn . Module ): def __init__ ( self , in_dim : int , out_dim : int , num_res_blocks : int , dropout : float = 0.0 , upsample_mode : Optional [ str ] = None , non_linearity : str = \"silu\" , ): super () . __init__ () self . in_dim = in_dim self . out_dim = out_dim # Create layers list resnets = [] # Add residual blocks and attention if needed current_dim = in_dim for _ in range ( num_res_blocks + 1 ): resnets . append ( WanResidualBlock ( current_dim , out_dim , dropout , non_linearity )) current_dim = out_dim self . resnets = nn . ModuleList ( resnets ) # Add upsampling layer if needed self . upsamplers = None if upsample_mode is not None : self . upsamplers = nn . ModuleList ([ WanResample ( out_dim , mode = upsample_mode )]) self . gradient_checkpointing = False def forward ( self , x , feat_cache = None , feat_idx = [ 0 ]): for resnet in self . resnets : if feat_cache is not None : x = resnet ( x , feat_cache , feat_idx ) else : x = resnet ( x ) if self . upsamplers is not None : if feat_cache is not None : x = self . upsamplers [ 0 ]( x , feat_cache , feat_idx ) else : x = self . upsamplers [ 0 ]( x ) return x \u73b0\u5728\u6700\u5927\u7684\u95ee\u9898\u5c31\u662f feat_cache \u8c8c\u4f3c\u6bcf\u4e00\u8f6e\u90fd\u4f1a\u6709\u4e00\u4e2acache\u8fc7\u7a0b\uff1f\u800c\u4e14\u5728\u4e00\u4e2a self.decoder \u5c31\u4f1a\u51e0\u4e4e\u6253\u6ee125\u4e2afeat_cache\u4f4d\u7f6e\u3002 \u8fd9\u91cc\u7684\u52a8\u6001\u5f88\u591a.\u5177\u4f53\u5185\u5bb9\u5305\u62ec. \u4ed6\u7684shape\u4e5f\u5f88\u5947\u602a. paper: https://files.alicdn.com/tpsservice/5c9de1c74de03972b7aa657e5a54756b.pdf \u6574\u4f53\u7ed3\u6784\u53c2\u8003\uff1a \u7b2c\u4e8c\u538b\u7f29\u5e27\u7684\u5185\u5bb9 x.shape: torch.Size([1, 16, 1, 90, 128]) before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] feat_cache torch.Size([1, 16, 2, 90, 128]) before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 1, 0] \u7b2c\u4e09\u538b\u7f29\u5e27 x.shape: torch.Size([1, 16, 1, 90, 128]) before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] feat_cache torch.Size([1, 16, 2, 90, 128]) before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [0, 0, 0, 0, 2, 0] after [0, 0, 0, 0, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [0, 0, 0, 0, 2, 0] after [0, 0, 0, 0, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] \u7b2c4\u5e27 x.shape: torch.Size([1, 16, 1, 90, 128]) before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] feat_cache torch.Size([1, 16, 2, 90, 128]) before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [0, 0, 0, 0, 2, 0] after [0, 0, 0, 0, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [0, 0, 0, 0, 2, 0] after [0, 0, 0, 0, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] 5 x.shape: torch.Size([1, 16, 1, 90, 128]) before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] feat_cache torch.Size([1, 16, 2, 90, 128]) before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [0, 0, 0, 0, 2, 0] after [0, 0, 0, 0, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [0, 0, 0, 0, 2, 0] after [0, 0, 0, 0, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] before [1, 1, 1, 1, 2, 0] after [1, 1, 1, 1, 0, 0] \u76ee\u524d\u53d1\u73b0 \u7b2c\u4e00\u5e27\u548c\u7b2c\u4e8c\u5e27\u7684\u884c\u4e3a\u4e0e\u540e\u9762\u90fd\u4e0d\u592a\u4e00\u6837","title":"vae-3d conv"},{"location":"daily/0328/#_1","text":"\u5f97\u5230\u6240\u6709\u7684shape \u8d70\u52a8\u6001 \u7528 torchview \u5f97\u5230\u6240\u6709\u7684\u7ed3\u6784\u548cshape","title":"\u65b0\u7684\u7b56\u7565"},{"location":"daily/0331/","text":"\u5feb\u624bai\u7f16\u8bd1\u5668\u76f8\u5173\u5185\u5bb9 \u00b6 \u77e5\u4e4e https://zhuanlan.zhihu.com/p/32229854140 \u611f\u89c9\u5185\u5bb9\u5f88\u591a \u5f88\u624e\u5b9e\u3002\u4ee5\u540e\u5b66\u7740\u70b9\u3002","title":"0331"},{"location":"daily/0331/#ai","text":"\u77e5\u4e4e https://zhuanlan.zhihu.com/p/32229854140 \u611f\u89c9\u5185\u5bb9\u5f88\u591a \u5f88\u624e\u5b9e\u3002\u4ee5\u540e\u5b66\u7740\u70b9\u3002","title":"\u5feb\u624bai\u7f16\u8bd1\u5668\u76f8\u5173\u5185\u5bb9"},{"location":"daily/0401/","text":"ncu \u00b6 ncu\u6bd4\u8f83\u6162 cuda\u5b89\u88c5\u4e1c\u897f\u8fd8\u662f\u633a\u591a\u7684 \u533a\u5757\u94fe \u00b6 \u533a\u5757\u94fe\u8981\u53bb\u89e3\u51b3\u7684\u95ee\u9898\u5f88\u4e13\u6ce8\uff0c\u89e3\u51b3\u65b9\u6cd5\u4e5f\u5f88\u66b4\u529b\uff0c\u4f46\u662f\u95ee\u9898\u89e3\u51b3\u4e86\u3002 package \u00b6 https://v2raya.org/ sudo apt install v2raya v2ray ## \u4e5f\u53ef\u4ee5\u4f7f\u7528 xray \u5305 algorithm \u5305 \u00b6 #include <algorithm> std :: stable_sort (); std :: find_if (); std :: find (); std :: binary_search (); std :: lower_bound (); std :: upper_bound (); std :: copy (); std :: copy_if (); std :: transform (); // \u652f\u6301\u539f\u5730\u4fee\u6539 std :: replace (); std :: replace_if (); std :: fill (); std :: fill_n (); std :: generate (); std :: generate_n (); std :: remove (); // \u79fb\u9664\u5bb9\u5668\u6216\u6570\u7ec4\u4e2d\u7b49\u4e8e\u67d0\u4e2a\u503c\u7684\u5143\u7d20\uff0c\u4f46\u4e0d\u6539\u53d8\u5bb9\u5668\u7684\u5927\u5c0f\uff0c\u9700\u8981\u8c03\u7528 erase \u6765\u771f\u6b63\u79fb\u9664\u5143\u7d20\u3002 std :: reverse (); std :: rotate (); std :: shuffle (); std :: sort (); std :: accumulate (); std :: inner_product (); std :: partial_sum (); std :: partition (); std :: merge (); std :: set_union (); set :: set_intersection (); set :: set_difference (); set :: set_symmetric_difference (); std :: min_element (); std :: make_heap (); std :: push_heap (); std :: pop_heap (); std :: sort_heap (); other \u00b6 \u5c31\u8fd9\u6837\u5427\u3002 c++\u7684\u8fd9\u4e9b\u6807\u51c6\u5e93\u8fd8\u662f\u5f97\u597d\u597d\u5b66\u3002 \u6ca1\u770b\u7684 \u00b6 https://github.com/rdyro/Pallas-Puzzles","title":"0401"},{"location":"daily/0401/#ncu","text":"ncu\u6bd4\u8f83\u6162 cuda\u5b89\u88c5\u4e1c\u897f\u8fd8\u662f\u633a\u591a\u7684","title":"ncu"},{"location":"daily/0401/#_1","text":"\u533a\u5757\u94fe\u8981\u53bb\u89e3\u51b3\u7684\u95ee\u9898\u5f88\u4e13\u6ce8\uff0c\u89e3\u51b3\u65b9\u6cd5\u4e5f\u5f88\u66b4\u529b\uff0c\u4f46\u662f\u95ee\u9898\u89e3\u51b3\u4e86\u3002","title":"\u533a\u5757\u94fe"},{"location":"daily/0401/#package","text":"https://v2raya.org/ sudo apt install v2raya v2ray ## \u4e5f\u53ef\u4ee5\u4f7f\u7528 xray \u5305","title":"package"},{"location":"daily/0401/#algorithm","text":"#include <algorithm> std :: stable_sort (); std :: find_if (); std :: find (); std :: binary_search (); std :: lower_bound (); std :: upper_bound (); std :: copy (); std :: copy_if (); std :: transform (); // \u652f\u6301\u539f\u5730\u4fee\u6539 std :: replace (); std :: replace_if (); std :: fill (); std :: fill_n (); std :: generate (); std :: generate_n (); std :: remove (); // \u79fb\u9664\u5bb9\u5668\u6216\u6570\u7ec4\u4e2d\u7b49\u4e8e\u67d0\u4e2a\u503c\u7684\u5143\u7d20\uff0c\u4f46\u4e0d\u6539\u53d8\u5bb9\u5668\u7684\u5927\u5c0f\uff0c\u9700\u8981\u8c03\u7528 erase \u6765\u771f\u6b63\u79fb\u9664\u5143\u7d20\u3002 std :: reverse (); std :: rotate (); std :: shuffle (); std :: sort (); std :: accumulate (); std :: inner_product (); std :: partial_sum (); std :: partition (); std :: merge (); std :: set_union (); set :: set_intersection (); set :: set_difference (); set :: set_symmetric_difference (); std :: min_element (); std :: make_heap (); std :: push_heap (); std :: pop_heap (); std :: sort_heap ();","title":"algorithm \u5305"},{"location":"daily/0401/#other","text":"\u5c31\u8fd9\u6837\u5427\u3002 c++\u7684\u8fd9\u4e9b\u6807\u51c6\u5e93\u8fd8\u662f\u5f97\u597d\u597d\u5b66\u3002","title":"other"},{"location":"daily/0401/#_2","text":"https://github.com/rdyro/Pallas-Puzzles","title":"\u6ca1\u770b\u7684"},{"location":"healthy/behavior/","text":"","title":"Behavior"},{"location":"search/search_engine/","text":"\u4ee5\u4e0b\u662f\u4e00\u4e9b\u8f7b\u91cf\u7ea7\u7684\u641c\u7d22\u5f15\u64ce\uff0c\u652f\u6301\u5b9a\u5236\u5316\uff0c\u9002\u7528\u4e8e\u4e0d\u540c\u9700\u6c42\uff1a 1. Whoosh \u2022 \u4e00\u4e2a\u7eaf Python \u5b9e\u73b0\u7684\u5168\u6587\u641c\u7d22\u5e93\uff0c\u9002\u5408\u5c0f\u578b\u9879\u76ee\u6216\u5d4c\u5165\u5f0f\u5e94\u7528\u3002\u5b83\u652f\u6301\u7d22\u5f15\u548c\u67e5\u8be2\u5b9a\u5236\uff0c\u4e14\u6613\u4e8e\u96c6\u6210\u5230 Python \u9879\u76ee\u4e2d\u3002 \u2022 \u5b9a\u5236\u5316\uff1a\u652f\u6301\u81ea\u5b9a\u4e49\u5206\u6790\u5668\u3001\u67e5\u8be2\u89e3\u6790\u5668\u548c\u6392\u5e8f\u3002 2. Elasticsearch \u2022 \u867d\u7136 Elasticsearch \u901a\u5e38\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u8f83\u4e3a\u5f3a\u5927\u7684\u641c\u7d22\u5f15\u64ce\uff0c\u4f46\u5b83\u4e5f\u53ef\u4ee5\u5728\u5c0f\u578b\u73af\u5883\u4e2d\u8f7b\u91cf\u8fd0\u884c\uff0c\u4e14\u6781\u5176\u53ef\u5b9a\u5236\u3002\u5b83\u662f\u57fa\u4e8e Apache Lucene \u7684\uff0c\u652f\u6301\u5206\u5e03\u5f0f\u641c\u7d22\u3002 \u2022 \u5b9a\u5236\u5316\uff1a\u63d0\u4f9b\u4e30\u5bcc\u7684 RESTful API\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5b9a\u4e49\u7d22\u5f15\u7ed3\u6784\u3001\u5206\u6790\u5668\u3001\u67e5\u8be2\u548c\u6392\u5e8f\u7b56\u7565\u3002 3. Apache Solr \u2022 \u53e6\u4e00\u4e2a\u57fa\u4e8e Apache Lucene \u7684\u5f3a\u5927\u641c\u7d22\u5f15\u64ce\uff0c\u5c3d\u7ba1\u5b83\u6bd4 Elasticsearch \u66f4\u4e3a\u91cd\u578b\uff0c\u4f46\u53ef\u4ee5\u8fdb\u884c\u8bb8\u591a\u5b9a\u5236\u5316\u914d\u7f6e\uff0c\u9002\u5408\u9700\u8981\u66f4\u9ad8\u7ea7\u529f\u80fd\u7684\u7528\u6237\u3002 \u2022 \u5b9a\u5236\u5316\uff1a\u652f\u6301\u63d2\u4ef6\u3001\u5b9a\u5236\u5316\u67e5\u8be2\u5904\u7406\u3001\u6587\u672c\u5206\u6790\u7b49\u3002 4. MeiliSearch \u2022 \u4e00\u4e2a\u5feb\u901f\u3001\u8f7b\u91cf\u7ea7\u7684\u641c\u7d22\u5f15\u64ce\uff0c\u8bbe\u8ba1\u7528\u4e8e\u7b80\u6613\u96c6\u6210\u548c\u9ad8\u6548\u641c\u7d22\u3002\u5b83\u63d0\u4f9b\u9ad8\u6027\u80fd\u7684\u641c\u7d22\u548c\u7b80\u5355\u7684\u914d\u7f6e\u754c\u9762\u3002 \u2022 \u5b9a\u5236\u5316\uff1a\u901a\u8fc7 REST API \u53ef\u4ee5\u5b9a\u5236\u7d22\u5f15\u3001\u641c\u7d22\u884c\u4e3a\u3001\u6392\u5e8f\u7b49\u3002 5. Typesense \u2022 \u662f\u4e00\u4e2a\u7b80\u6d01\u3001\u9ad8\u6548\u3001\u5f00\u6e90\u7684\u641c\u7d22\u5f15\u64ce\uff0c\u9002\u5408\u6784\u5efa\u73b0\u4ee3\u5e94\u7528\u7684\u641c\u7d22\u529f\u80fd\uff0c\u652f\u6301\u5feb\u901f\u641c\u7d22\u548c\u7075\u6d3b\u914d\u7f6e\u3002 \u2022 \u5b9a\u5236\u5316\uff1a\u63d0\u4f9b\u5f3a\u5927\u7684 REST API\uff0c\u53ef\u4ee5\u914d\u7f6e\u7d22\u5f15\u3001\u6392\u5e8f\u3001\u8fc7\u6ee4\u7b49\u3002 6. Xapian \u2022 \u4e00\u4e2a\u5f00\u6e90\u7684\u5168\u6587\u641c\u7d22\u5f15\u64ce\u5e93\uff0c\u5177\u6709\u826f\u597d\u7684\u6027\u80fd\u548c\u53ef\u5b9a\u5236\u6027\uff0c\u9002\u7528\u4e8e\u5d4c\u5165\u5f0f\u5e94\u7528\u3001Web \u5e94\u7528\u548c\u5176\u4ed6\u9700\u8981\u641c\u7d22\u529f\u80fd\u7684\u5e94\u7528\u3002 \u2022 \u5b9a\u5236\u5316\uff1a\u901a\u8fc7\u7f16\u7a0b\u63a5\u53e3\u53ef\u4ee5\u7075\u6d3b\u5730\u81ea\u5b9a\u4e49\u641c\u7d22\u884c\u4e3a\u3001\u67e5\u8be2\u89e3\u6790\u7b49\u3002 \u8fd9\u4e9b\u641c\u7d22\u5f15\u64ce\u5404\u6709\u7279\u70b9\uff0c\u9002\u5408\u4e0d\u540c\u7684\u5e94\u7528\u573a\u666f\u3002\u5982\u679c\u4f60\u7684\u9700\u6c42\u662f\u9ad8\u5ea6\u5b9a\u5236\u5316\u6216\u9700\u8981\u9ad8\u5ea6\u7075\u6d3b\u6027\uff0cElasticsearch \u548c Solr \u662f\u5f3a\u6709\u529b\u7684\u9009\u62e9\uff1b\u5982\u679c\u4f60\u66f4\u6ce8\u91cd\u8f7b\u91cf\u7ea7\u548c\u7b80\u5355\u914d\u7f6e\uff0cMeiliSearch \u548c Typesense \u662f\u4e0d\u9519\u7684\u9009\u62e9\u3002 \u4ee5\u4e0b\u662f\u8fd9\u4e9b\u641c\u7d22\u5f15\u64ce\u7684\u8bed\u8a00\u57fa\u7840\u53ca\u5176\u5185\u5b58\u6d88\u8017\u6982\u8ff0\uff1a Whoosh \u2022 \u7f16\u7a0b\u8bed\u8a00\uff1aPython \u2022 \u5185\u5b58\u6d88\u8017\uff1a\u7531\u4e8e\u662f\u7eaf Python \u5b9e\u73b0\uff0cWhoosh \u5bf9\u5185\u5b58\u7684\u6d88\u8017\u8f83\u4f4e\uff0c\u9002\u5408\u5c0f\u578b\u9879\u76ee\u548c\u5d4c\u5165\u5f0f\u5e94\u7528\u3002\u5b83\u7684\u5185\u5b58\u6d88\u8017\u4e0e\u6570\u636e\u91cf\u6210\u6b63\u6bd4\uff0c\u9002\u5408\u4e2d\u5c0f\u89c4\u6a21\u7684\u6570\u636e\u7d22\u5f15\u3002 Elasticsearch \u2022 \u7f16\u7a0b\u8bed\u8a00\uff1aJava\uff08\u4f7f\u7528 JVM\uff09 \u2022 \u5185\u5b58\u6d88\u8017\uff1aElasticsearch \u7531\u4e8e\u57fa\u4e8e Java \u548c JVM\uff0c\u5185\u5b58\u6d88\u8017\u8f83\u9ad8\uff0c\u5c24\u5176\u662f\u5728\u5904\u7406\u5927\u89c4\u6a21\u6570\u636e\u65f6\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cElasticsearch \u4f1a\u4f7f\u7528\u8f83\u5927\u7684\u5806\u5185\u5b58\uff08\u901a\u5e38\u8bbe\u7f6e\u4e3a JVM \u7684\u5806\u5927\u5c0f\uff09\uff0c\u56e0\u6b64\u9700\u8981\u8f83\u5927\u7684\u5185\u5b58\u8d44\u6e90\uff0c\u5c24\u5176\u662f\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u3002\u9002\u5408\u9700\u8981\u9ad8\u6027\u80fd\u548c\u6269\u5c55\u6027\u7684\u5e94\u7528\uff0c\u4f46\u5bf9\u4e8e\u8d44\u6e90\u6709\u9650\u7684\u5c0f\u578b\u73af\u5883\u6765\u8bf4\uff0c\u53ef\u80fd\u4f1a\u611f\u5230\u8f83\u91cd\u3002 Apache Solr \u2022 \u7f16\u7a0b\u8bed\u8a00\uff1aJava\uff08\u4f7f\u7528 JVM\uff09 \u2022 \u5185\u5b58\u6d88\u8017\uff1a\u548c Elasticsearch \u7c7b\u4f3c\uff0cSolr \u4e5f\u662f\u57fa\u4e8e Java \u548c JVM \u7684\uff0c\u5185\u5b58\u6d88\u8017\u8f83\u9ad8\u3002Solr \u5728\u5927\u89c4\u6a21\u6570\u636e\u548c\u9ad8\u5e76\u53d1\u73af\u5883\u4e0b\u8868\u73b0\u826f\u597d\uff0c\u4f46\u5728\u8d44\u6e90\u6709\u9650\u7684\u73af\u5883\u4e0b\u4e5f\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\u9002\u7528\u4e8e\u9700\u8981\u5f3a\u5927\u529f\u80fd\u548c\u6269\u5c55\u6027\u7684\u4f01\u4e1a\u7ea7\u5e94\u7528\u3002 MeiliSearch \u2022 \u7f16\u7a0b\u8bed\u8a00\uff1aRust \u2022 \u5185\u5b58\u6d88\u8017\uff1a\u7531\u4e8e\u4f7f\u7528\u4e86 Rust \u8bed\u8a00\uff0cMeiliSearch \u5728\u6027\u80fd\u548c\u5185\u5b58\u6d88\u8017\u4e0a\u8868\u73b0\u4f18\u5f02\u3002Rust \u63d0\u4f9b\u4e86\u4f4e\u5f00\u9500\u7684\u5185\u5b58\u7ba1\u7406\u673a\u5236\uff0c\u56e0\u6b64 MeiliSearch \u7684\u5185\u5b58\u6d88\u8017\u76f8\u5bf9\u8f83\u4f4e\uff0c\u9002\u5408\u8f7b\u91cf\u7ea7\u548c\u9ad8\u6027\u80fd\u7684\u5e94\u7528\uff0c\u5c24\u5176\u5728\u5904\u7406\u5927\u91cf\u6570\u636e\u65f6\uff0c\u5185\u5b58\u4f7f\u7528\u6548\u7387\u975e\u5e38\u597d\u3002 Typesense \u2022 \u7f16\u7a0b\u8bed\u8a00\uff1aC++ \u2022 \u5185\u5b58\u6d88\u8017\uff1aTypesense \u4f5c\u4e3a\u7528 C++ \u7f16\u5199\u7684\u641c\u7d22\u5f15\u64ce\uff0c\u5185\u5b58\u6d88\u8017\u8f83\u4f4e\uff0c\u6027\u80fd\u8f83\u597d\uff0c\u9002\u5408\u9700\u8981\u9ad8\u6548\u641c\u7d22\u7684\u5c0f\u578b\u5230\u4e2d\u578b\u5e94\u7528\u3002\u7531\u4e8e C++ \u63d0\u4f9b\u4e86\u76f4\u63a5\u7684\u5185\u5b58\u63a7\u5236\uff0cTypesense \u5728\u5185\u5b58\u6d88\u8017\u65b9\u9762\u53ef\u4ee5\u4f18\u5316\u5f97\u6bd4\u8f83\u597d\u3002 Xapian \u2022 \u7f16\u7a0b\u8bed\u8a00\uff1aC++ \u2022 \u5185\u5b58\u6d88\u8017\uff1aXapian \u4e5f\u662f\u7528 C++ \u7f16\u5199\uff0c\u56e0\u6b64\u5185\u5b58\u6d88\u8017\u901a\u5e38\u8f83\u4f4e\u3002\u5b83\u975e\u5e38\u9002\u5408\u5d4c\u5165\u5f0f\u7cfb\u7edf\u548c\u9700\u8981\u7d27\u51d1\u5185\u5b58\u7ba1\u7406\u7684\u5e94\u7528\u3002Xapian \u7684\u5185\u5b58\u6d88\u8017\u4e0e\u7d22\u5f15\u5927\u5c0f\u548c\u67e5\u8be2\u590d\u6742\u5ea6\u76f8\u5173\uff0c\u4f46\u901a\u5e38\u6bd4\u57fa\u4e8e Java \u7684\u89e3\u51b3\u65b9\u6848\uff08\u5982 Elasticsearch \u548c Solr\uff09\u6d88\u8017\u66f4\u5c11\u7684\u5185\u5b58\u3002 \u603b\u7ed3\uff1a \u2022 \u5185\u5b58\u6d88\u8017\u8f83\u4f4e\uff1aWhoosh\u3001MeiliSearch\u3001Typesense\u3001Xapian \u2022 \u5185\u5b58\u6d88\u8017\u8f83\u9ad8\uff1aElasticsearch\u3001Solr \u5982\u679c\u4f60\u7684\u9879\u76ee\u9700\u8981\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u3001\u9ad8\u6548\u7684\u641c\u7d22\u5f15\u64ce\uff0c\u5e76\u4e14\u5bf9\u5185\u5b58\u6d88\u8017\u6709\u4e25\u683c\u8981\u6c42\uff0cMeiliSearch \u548c Typesense \u4f1a\u662f\u4e0d\u9519\u7684\u9009\u62e9\u3002\u5982\u679c\u9879\u76ee\u89c4\u6a21\u8f83\u5927\uff0c\u4e14\u9700\u8981\u5f3a\u5927\u529f\u80fd\u3001\u5206\u5e03\u5f0f\u5904\u7406\u7b49\uff0cElasticsearch \u548c Solr \u662f\u66f4\u5408\u9002\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u5b83\u4eec\u7684\u5185\u5b58\u6d88\u8017\u8f83\u9ad8\u3002 \u4e0d\u540c\u7684\u641c\u7d22\u5f15\u64ce\u63d0\u4f9b\u4e86\u4e0d\u540c\u7684\u529f\u80fd\uff0c\u9002\u7528\u4e8e\u4e0d\u540c\u7684\u5e94\u7528\u573a\u666f\u3002\u4ee5\u4e0b\u662f\u4f60\u63d0\u5230\u7684\u5404\u4e2a\u641c\u7d22\u5f15\u64ce\u7684\u529f\u80fd\u6982\u8ff0\uff1a Whoosh \u2022 \u529f\u80fd\u6982\u8ff0\uff1a \u2022 \u5168\u6587\u641c\u7d22\uff1aWhoosh \u662f\u4e00\u4e2a\u7eaf Python \u5b9e\u73b0\u7684\u5168\u6587\u641c\u7d22\u5f15\u64ce\uff0c\u652f\u6301\u521b\u5efa\u548c\u641c\u7d22\u7d22\u5f15\uff0c\u9002\u5408\u5c0f\u578b\u5230\u4e2d\u578b\u7684\u641c\u7d22\u9700\u6c42\u3002 \u2022 \u652f\u6301\u591a\u79cd\u67e5\u8be2\u7c7b\u578b\uff1a\u652f\u6301\u5e03\u5c14\u67e5\u8be2\u3001\u77ed\u8bed\u67e5\u8be2\u3001\u524d\u7f00\u67e5\u8be2\u3001\u8303\u56f4\u67e5\u8be2\u7b49\u3002 \u2022 \u81ea\u5b9a\u4e49\u5206\u8bcd\u5668\uff1a\u9ed8\u8ba4\u4e0d\u652f\u6301\u4e2d\u6587\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u96c6\u6210\u5982 jieba \u7b49\u4e2d\u6587\u5206\u8bcd\u5de5\u5177\uff0c\u8fdb\u884c\u81ea\u5b9a\u4e49\u5206\u8bcd\u3002 \u2022 \u7d22\u5f15\u5b58\u50a8\uff1a\u7d22\u5f15\u5b58\u50a8\u53ef\u4ee5\u662f\u5185\u5b58\u6216\u78c1\u76d8\uff0c\u9002\u5408\u5d4c\u5165\u5f0f\u5e94\u7528\u3002 \u2022 \u652f\u6301\u9ad8\u4eae\u663e\u793a\uff1a\u5728\u641c\u7d22\u7ed3\u679c\u4e2d\u663e\u793a\u5339\u914d\u8bcd\uff0c\u5e76\u652f\u6301\u81ea\u5b9a\u4e49\u9ad8\u4eae\u663e\u793a\u683c\u5f0f\u3002 \u2022 \u7b80\u5355\u4e14\u53ef\u6269\u5c55\uff1a\u7531\u4e8e\u662f\u7eaf Python \u5b9e\u73b0\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5f88\u5bb9\u6613\u5b9a\u5236\u548c\u6269\u5c55\u529f\u80fd\u3002 \u2022 \u9002\u7528\u573a\u666f\uff1a\u9002\u5408\u5c0f\u578b\u5e94\u7528\u3001\u5d4c\u5165\u5f0f\u7cfb\u7edf\u6216\u8005\u9700\u8981\u5feb\u901f\u539f\u578b\u7684\u573a\u666f\uff0c\u7279\u522b\u662f Python \u73af\u5883\u4e0b\u7684\u5e94\u7528\u3002 \u2e3b Elasticsearch \u2022 \u529f\u80fd\u6982\u8ff0\uff1a \u2022 \u5206\u5e03\u5f0f\u67b6\u6784\uff1aElasticsearch \u662f\u4e00\u4e2a\u57fa\u4e8e\u5206\u5e03\u5f0f\u67b6\u6784\u7684\u5168\u6587\u641c\u7d22\u5f15\u64ce\uff0c\u53ef\u4ee5\u5728\u591a\u4e2a\u8282\u70b9\u4e0a\u5206\u6563\u6570\u636e\u548c\u8d1f\u8f7d\uff0c\u9002\u7528\u4e8e\u5927\u89c4\u6a21\u6570\u636e\u548c\u9ad8\u5e76\u53d1\u67e5\u8be2\u3002 \u2022 \u5168\u6587\u68c0\u7d22\uff1a\u652f\u6301\u9ad8\u6548\u7684\u5168\u6587\u68c0\u7d22\uff0c\u4f7f\u7528\u5012\u6392\u7d22\u5f15\u8fdb\u884c\u67e5\u8be2\u4f18\u5316\u3002 \u2022 \u591a\u79cd\u67e5\u8be2\u7c7b\u578b\uff1a\u652f\u6301\u5168\u6587\u68c0\u7d22\u3001\u8fc7\u6ee4\u3001\u805a\u5408\u3001\u5730\u7406\u4f4d\u7f6e\u67e5\u8be2\u3001\u8303\u56f4\u67e5\u8be2\u7b49\u3002 \u2022 \u591a\u8bed\u8a00\u652f\u6301\uff1a\u652f\u6301\u591a\u79cd\u8bed\u8a00\u7684\u5206\u8bcd\uff0c\u5305\u62ec\u4e2d\u6587\uff0c\u652f\u6301\u901a\u8fc7\u63d2\u4ef6\uff08\u5982 ik-analyzer\uff09\u4f18\u5316\u4e2d\u6587\u5206\u8bcd\u3002 \u2022 \u5b9e\u65f6\u7d22\u5f15\uff1a\u6570\u636e\u5728\u63d2\u5165\u540e\u53ef\u7acb\u5373\u8fdb\u884c\u641c\u7d22\uff0c\u9002\u7528\u4e8e\u5b9e\u65f6\u6570\u636e\u66f4\u65b0\u7684\u5e94\u7528\u573a\u666f\u3002 \u2022 \u805a\u5408\u529f\u80fd\uff1a\u63d0\u4f9b\u5f3a\u5927\u7684\u805a\u5408\u529f\u80fd\uff0c\u9002\u7528\u4e8e\u751f\u6210\u7edf\u8ba1\u4fe1\u606f\u3001\u5206\u6790\u8d8b\u52bf\u7b49\u3002 \u2022 \u96c6\u7fa4\u652f\u6301\uff1a\u652f\u6301\u5206\u5e03\u5f0f\u96c6\u7fa4\u6a21\u5f0f\uff0c\u9002\u5408\u5927\u89c4\u6a21\u3001\u9ad8\u5e76\u53d1\u73af\u5883\u3002 \u2022 \u9002\u7528\u573a\u666f\uff1a\u9002\u5408\u9700\u8981\u5904\u7406\u5927\u89c4\u6a21\u6570\u636e\u7684\u4f01\u4e1a\u7ea7\u5e94\u7528\uff0c\u652f\u6301\u9ad8\u5e76\u53d1\u3001\u5927\u6570\u636e\u91cf\u3001\u9ad8\u6027\u80fd\u7684\u641c\u7d22\u5f15\u64ce\u3002 \u2e3b Apache Solr \u2022 \u529f\u80fd\u6982\u8ff0\uff1a \u2022 \u5168\u6587\u68c0\u7d22\uff1aSolr \u662f\u4e00\u4e2a\u9ad8\u6548\u7684\u5f00\u6e90\u641c\u7d22\u5e73\u53f0\uff0c\u652f\u6301\u5012\u6392\u7d22\u5f15\uff0c\u9002\u7528\u4e8e\u5927\u89c4\u6a21\u6587\u672c\u6570\u636e\u68c0\u7d22\u3002 \u2022 \u5206\u5e03\u5f0f\u67b6\u6784\uff1aSolr \u4e5f\u652f\u6301\u96c6\u7fa4\u6a21\u5f0f\uff0c\u9002\u7528\u4e8e\u5927\u89c4\u6a21\u6570\u636e\u5b58\u50a8\u548c\u67e5\u8be2\uff0c\u652f\u6301\u81ea\u52a8\u5206\u7247\u548c\u8d1f\u8f7d\u5747\u8861\u3002 \u2022 \u652f\u6301\u591a\u79cd\u67e5\u8be2\u7c7b\u578b\uff1a\u652f\u6301\u5e03\u5c14\u67e5\u8be2\u3001\u77ed\u8bed\u67e5\u8be2\u3001\u8303\u56f4\u67e5\u8be2\u3001\u6a21\u7cca\u67e5\u8be2\u7b49\u3002 \u2022 \u9ad8\u4eae\u663e\u793a\uff1a\u652f\u6301\u641c\u7d22\u7ed3\u679c\u4e2d\u7684\u9ad8\u4eae\u663e\u793a\u3002 \u2022 \u81ea\u52a8\u5206\u8bcd\uff1a\u5185\u7f6e\u5bf9\u591a\u8bed\u8a00\u7684\u652f\u6301\uff0c\u5305\u62ec\u4e2d\u6587\uff0c\u652f\u6301\u4e2d\u6587\u5206\u8bcd\u63d2\u4ef6\uff08\u5982 IKAnalyzer\uff09\u3002 \u2022 \u6570\u636e\u5bfc\u5165\uff1a\u652f\u6301\u4ece\u5404\u79cd\u6570\u636e\u6e90\uff08\u5982\u6570\u636e\u5e93\u3001\u6587\u4ef6\u7b49\uff09\u5bfc\u5165\u6570\u636e\u5e76\u751f\u6210\u7d22\u5f15\u3002 \u2022 \u652f\u6301 Faceting \u548c\u805a\u5408\uff1a\u652f\u6301\u805a\u5408\u67e5\u8be2\uff0c\u53ef\u4ee5\u751f\u6210\u7edf\u8ba1\u6570\u636e\u3001\u5206\u7c7b\u6570\u636e\u7b49\u3002 \u2022 \u591a\u79cd\u63a5\u53e3\uff1a\u63d0\u4f9b RESTful API \u548c\u5176\u4ed6\u63a5\u53e3\uff0c\u65b9\u4fbf\u4e0e\u5176\u4ed6\u7cfb\u7edf\u96c6\u6210\u3002 \u2022 \u9002\u7528\u573a\u666f\uff1a\u9002\u5408\u5927\u89c4\u6a21\u7684\u4f01\u4e1a\u5e94\u7528\uff0c\u7279\u522b\u662f\u5728\u9700\u8981\u5206\u5e03\u5f0f\u3001\u9ad8\u5e76\u53d1\u67e5\u8be2\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406\u65f6\uff0cSolr \u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u9009\u62e9\u3002 \u2e3b MeiliSearch \u2022 \u529f\u80fd\u6982\u8ff0\uff1a \u2022 \u8f7b\u91cf\u7ea7\u548c\u9ad8\u6548\uff1aMeiliSearch \u662f\u4e00\u4e2a\u5feb\u901f\u4e14\u6613\u4e8e\u4f7f\u7528\u7684\u641c\u7d22\u5f15\u64ce\uff0c\u4e13\u6ce8\u4e8e\u63d0\u4f9b\u9ad8\u6027\u80fd\u7684\u5b9e\u65f6\u641c\u7d22\u4f53\u9a8c\u3002 \u2022 \u7b80\u5355\u7684 REST API\uff1a\u63d0\u4f9b\u7b80\u6d01\u6613\u7528\u7684 REST API\uff0c\u65b9\u4fbf\u4e0e\u5176\u4ed6\u7cfb\u7edf\u96c6\u6210\u3002 \u2022 \u5168\u6587\u641c\u7d22\uff1a\u652f\u6301\u5168\u6587\u68c0\u7d22\u548c\u6a21\u7cca\u641c\u7d22\uff08\u5305\u62ec\u81ea\u52a8\u62fc\u5199\u4fee\u6b63\uff09\u3002 \u2022 \u591a\u8bed\u8a00\u652f\u6301\uff1a\u652f\u6301\u591a\u79cd\u8bed\u8a00\u7684\u6587\u672c\u68c0\u7d22\uff0c\u5305\u62ec\u4e2d\u6587\uff0c\u4f7f\u7528 Unicode \u5206\u8bcd\u6765\u5904\u7406\u591a\u8bed\u8a00\u5185\u5bb9\u3002 \u2022 \u5b9e\u65f6\u7d22\u5f15\uff1a\u652f\u6301\u5b9e\u65f6\u66f4\u65b0\u548c\u641c\u7d22\uff0c\u9002\u5408\u52a8\u6001\u5185\u5bb9\u548c\u5feb\u901f\u53d8\u5316\u7684\u6570\u636e\u3002 \u2022 \u81ea\u52a8\u6392\u5e8f\u548c\u8fc7\u6ee4\uff1a\u652f\u6301\u81ea\u52a8\u7684\u6392\u5e8f\u548c\u8fc7\u6ee4\u529f\u80fd\uff0c\u63d0\u5347\u641c\u7d22\u7ed3\u679c\u7684\u7cbe\u786e\u5ea6\u3002 \u2022 \u6613\u4e8e\u90e8\u7f72\uff1a\u4f7f\u7528\u7b80\u5355\uff0c\u53ef\u4ee5\u901a\u8fc7 Docker \u7b49\u5bb9\u5668\u5316\u90e8\u7f72\uff0c\u975e\u5e38\u9002\u5408\u4e2d\u5c0f\u578b\u5e94\u7528\u3002 \u2022 \u9002\u7528\u573a\u666f\uff1a\u9002\u5408\u4e2d\u5c0f\u578b\u5e94\u7528\uff0c\u7279\u522b\u662f\u5728\u9700\u8981\u8f7b\u91cf\u3001\u9ad8\u6548\u3001\u6613\u4e8e\u96c6\u6210\u7684\u641c\u7d22\u5f15\u64ce\u65f6\u3002 \u2e3b Typesense \u2022 \u529f\u80fd\u6982\u8ff0\uff1a \u2022 \u5feb\u901f\u548c\u5b9e\u65f6\uff1aTypesense \u662f\u4e00\u4e2a\u5feb\u901f\u7684\u5f00\u6e90\u641c\u7d22\u5f15\u64ce\uff0c\u8bbe\u8ba1\u76ee\u6807\u662f\u63d0\u4f9b\u8fd1\u5b9e\u65f6\u7684\u641c\u7d22\u4f53\u9a8c\u3002 \u2022 \u6613\u4e8e\u96c6\u6210\uff1a\u63d0\u4f9b\u7b80\u6d01\u7684 REST API\uff0c\u65b9\u4fbf\u4e0e\u5404\u79cd\u5e94\u7528\u7a0b\u5e8f\u96c6\u6210\u3002 \u2022 \u81ea\u52a8\u62fc\u5199\u4fee\u6b63\uff1a\u652f\u6301\u81ea\u52a8\u62fc\u5199\u4fee\u6b63\u548c\u6a21\u7cca\u641c\u7d22\uff0c\u63d0\u5347\u641c\u7d22\u4f53\u9a8c\u3002 \u2022 \u652f\u6301\u591a\u8bed\u8a00\uff1a\u652f\u6301\u591a\u8bed\u8a00\u68c0\u7d22\uff0c\u5305\u62ec\u4e2d\u6587\u3002\u9ed8\u8ba4\u652f\u6301 Unicode \u5206\u8bcd\uff0c\u9002\u7528\u4e8e\u591a\u8bed\u8a00\u73af\u5883\u3002 \u2022 \u5206\u5e03\u5f0f\u652f\u6301\uff1a\u53ef\u4ee5\u5728\u591a\u4e2a\u8282\u70b9\u4e0a\u90e8\u7f72\uff0c\u652f\u6301\u9ad8\u53ef\u7528\u548c\u8d1f\u8f7d\u5747\u8861\u3002 \u2022 \u7b80\u6613\u90e8\u7f72\uff1a\u5177\u6709\u6613\u4e8e\u90e8\u7f72\u548c\u7ba1\u7406\u7684\u7279\u6027\uff0c\u53ef\u4ee5\u901a\u8fc7 Docker \u5bb9\u5668\u5316\u90e8\u7f72\u3002 \u2022 \u9002\u7528\u573a\u666f\uff1a\u9002\u7528\u4e8e\u9700\u8981\u5feb\u901f\u3001\u5b9e\u65f6\u641c\u7d22\u4f53\u9a8c\u7684\u4e2d\u5c0f\u578b\u5e94\u7528\uff0c\u5c24\u5176\u662f\u5f53\u4f60\u9700\u8981\u7b80\u6d01\u7684 API \u548c\u90e8\u7f72\u65b9\u5f0f\u65f6\uff0cTypesense \u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002 \u2e3b Xapian \u2022 \u529f\u80fd\u6982\u8ff0\uff1a \u2022 \u5168\u6587\u68c0\u7d22\uff1aXapian \u63d0\u4f9b\u9ad8\u6548\u7684\u5168\u6587\u641c\u7d22\u5f15\u64ce\uff0c\u9002\u5408\u5d4c\u5165\u5f0f\u5e94\u7528\u548c\u5c0f\u578b\u5230\u4e2d\u578b\u6570\u636e\u96c6\u3002 \u2022 \u7075\u6d3b\u7684 API\uff1aXapian \u63d0\u4f9b\u4e86 C++ \u548c Python \u7b49\u591a\u8bed\u8a00\u7684 API\uff0c\u53ef\u4ee5\u5d4c\u5165\u5230\u4e0d\u540c\u7684\u5e94\u7528\u4e2d\u3002 \u2022 \u652f\u6301\u591a\u79cd\u67e5\u8be2\u7c7b\u578b\uff1a\u652f\u6301\u5e03\u5c14\u67e5\u8be2\u3001\u77ed\u8bed\u67e5\u8be2\u3001\u8303\u56f4\u67e5\u8be2\u7b49\u591a\u79cd\u67e5\u8be2\u7c7b\u578b\u3002 \u2022 \u81ea\u5b9a\u4e49\u5206\u8bcd\u5668\uff1aXapian \u672c\u8eab\u6ca1\u6709\u5185\u7f6e\u4e2d\u6587\u5206\u8bcd\u5668\uff0c\u4f46\u53ef\u4ee5\u4e0e jieba \u7b49\u5916\u90e8\u5206\u8bcd\u5de5\u5177\u96c6\u6210\u6765\u5904\u7406\u4e2d\u6587\u5206\u8bcd\u3002 \u2022 \u9ad8\u6548\u7684\u67e5\u8be2\u5904\u7406\uff1a\u901a\u8fc7\u5012\u6392\u7d22\u5f15\uff0c\u9ad8\u6548\u652f\u6301\u5927\u6570\u636e\u91cf\u7684\u67e5\u8be2\u3002 \u2022 \u652f\u6301\u6392\u5e8f\u548c\u805a\u5408\uff1a\u652f\u6301\u5bf9\u67e5\u8be2\u7ed3\u679c\u8fdb\u884c\u6392\u5e8f\u3001\u805a\u5408\u548c\u7b5b\u9009\u3002 \u2022 \u9002\u7528\u573a\u666f\uff1a\u9002\u5408\u9700\u8981\u8f7b\u91cf\u7ea7\u3001\u7075\u6d3b\u5b9a\u5236\u7684\u641c\u7d22\u5f15\u64ce\uff0c\u5c24\u5176\u662f\u5bf9\u4e8e\u5d4c\u5165\u5f0f\u5e94\u7528\u3001\u5f00\u53d1\u8005\u5b9a\u5236\u5316\u9700\u6c42\u8f83\u9ad8\u7684\u573a\u666f\u3002 \u2e3b \u603b\u7ed3\uff1a \u2022 Whoosh\uff1a\u9002\u5408\u5c0f\u578b\u9879\u76ee\u3001Python \u9879\u76ee\uff0c\u8f7b\u91cf\u7ea7\uff0c\u652f\u6301\u81ea\u5b9a\u4e49\u5206\u8bcd\u3002 \u2022 Elasticsearch \u548c Solr\uff1a\u9002\u5408\u5927\u89c4\u6a21\u3001\u4f01\u4e1a\u7ea7\u5e94\u7528\uff0c\u63d0\u4f9b\u5206\u5e03\u5f0f\u652f\u6301\u548c\u5f3a\u5927\u7684\u67e5\u8be2\u529f\u80fd\uff0c\u9002\u7528\u4e8e\u9ad8\u5e76\u53d1\u548c\u5927\u6570\u636e\u91cf\u7684\u573a\u666f\u3002 \u2022 MeiliSearch \u548c Typesense\uff1a\u9002\u5408\u4e2d\u5c0f\u578b\u5e94\u7528\uff0c\u63d0\u4f9b\u5feb\u901f\u3001\u9ad8\u6548\u7684\u641c\u7d22\u4f53\u9a8c\uff0c\u6613\u4e8e\u96c6\u6210\u3002 \u2022 Xapian\uff1a\u9002\u5408\u9700\u8981\u8f7b\u91cf\u7ea7\u3001\u7075\u6d3b\u5b9a\u5236\u7684\u641c\u7d22\u5f15\u64ce\uff0c\u9002\u7528\u4e8e\u5d4c\u5165\u5f0f\u548c\u5f00\u53d1\u8005\u5b9a\u5236\u5316\u9700\u6c42\u3002","title":"Search engine"},{"location":"search/spelling_correction/","text":"\u81ea\u52a8\u62fc\u5199\u4fee\u6b63\uff08Spelling Correction \u6216 Auto-correction\uff09\u901a\u5e38\u662f\u901a\u8fc7\u4e00\u7cfb\u5217\u7b97\u6cd5\u6765\u5b9e\u73b0\u7684\uff0c\u76ee\u7684\u662f\u81ea\u52a8\u4fee\u590d\u7528\u6237\u8f93\u5165\u7684\u62fc\u5199\u9519\u8bef\u3002\u4e0d\u540c\u7684\u641c\u7d22\u5f15\u64ce\u548c\u5de5\u5177\u91c7\u7528\u4e86\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5e38\u89c1\u7684\u5b9e\u73b0\u65b9\u5f0f\uff1a \u57fa\u4e8e\u7f16\u8f91\u8ddd\u79bb\uff08Levenshtein \u8ddd\u79bb\uff09 \u2022 \u7b97\u6cd5\u6982\u8ff0\uff1aLevenshtein \u8ddd\u79bb\u662f\u4e00\u79cd\u5ea6\u91cf\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\u7684\u7b97\u6cd5\uff0c\u8ba1\u7b97\u51fa\u4ece\u4e00\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u6240\u9700\u7684\u6700\u5c0f\u64cd\u4f5c\u6570\uff08\u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\uff09\u3002\u8fd9\u4e2a\u8ddd\u79bb\u53ef\u4ee5\u7528\u6765\u8bc6\u522b\u62fc\u5199\u9519\u8bef\uff0c\u5e76\u627e\u51fa\u6700\u53ef\u80fd\u7684\u6b63\u786e\u5355\u8bcd\u3002 \u2022 \u6b65\u9aa4\uff1a \u8ba1\u7b97\u8ddd\u79bb\uff1a\u5bf9\u7528\u6237\u8f93\u5165\u7684\u62fc\u5199\u9519\u8bef\u4e0e\u5b57\u5178\u4e2d\u7684\u6bcf\u4e2a\u5355\u8bcd\u8ba1\u7b97 Levenshtein \u8ddd\u79bb\u3002 \u9009\u62e9\u6700\u5c0f\u8ddd\u79bb\u7684\u5355\u8bcd\uff1a\u9009\u62e9\u4e0e\u7528\u6237\u8f93\u5165\u62fc\u5199\u9519\u8bef\u6700\u63a5\u8fd1\u7684\u5b57\u5178\u5355\u8bcd\u4f5c\u4e3a\u4fee\u6b63\u7ed3\u679c\u3002 \u2022 \u4f18\u70b9\uff1a\u80fd\u591f\u5904\u7406\u5e38\u89c1\u7684\u62fc\u5199\u9519\u8bef\uff0c\u5982\u952e\u5165\u9519\u8bef\u3001\u91cd\u590d\u5b57\u7b26\u7b49\u3002 \u2022 \u7f3a\u70b9\uff1a\u5bf9\u4e8e\u8f83\u957f\u7684\u6587\u672c\u548c\u5927\u5b57\u5178\uff0c\u8ba1\u7b97\u6548\u7387\u8f83\u4f4e\u3002 \u5e94\u7528\u5b9e\u4f8b\uff1a \u2022 Elasticsearch \u548c Typesense \u4f7f\u7528\u7c7b\u4f3c\u7684\u6280\u672f\uff0c\u57fa\u4e8e\u7f16\u8f91\u8ddd\u79bb\u6765\u5b9e\u73b0\u62fc\u5199\u4fee\u6b63\uff0c\u5c24\u5176\u662f\u5728\u6a21\u7cca\u67e5\u8be2\u65f6\u3002 \u57fa\u4e8e n-gram \u6a21\u578b \u2022 \u7b97\u6cd5\u6982\u8ff0\uff1an-gram \u6a21\u578b\u662f\u4e00\u79cd\u7edf\u8ba1\u8bed\u8a00\u6a21\u578b\uff0c\u901a\u8fc7\u5c06\u8bcd\u6c47\u6216\u5b57\u7b26\u5206\u89e3\u6210\u8fde\u7eed\u7684 n \u4e2a\u5b57\u6bcd\u7ec4\u5408\uff0c\u5b66\u4e60\u8bed\u8a00\u4e2d\u7684\u5e38\u89c1\u6a21\u5f0f\u3002\u5b83\u901a\u8fc7\u8ba1\u7b97\u8f93\u5165\u6587\u672c\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u6765\u5224\u65ad\u53ef\u80fd\u7684\u62fc\u5199\u4fee\u6b63\u3002 \u2022 \u6b65\u9aa4\uff1a \u751f\u6210 n-grams\uff1a\u5c06\u6bcf\u4e2a\u8bcd\u6216\u5b57\u7b26\u5206\u89e3\u4e3a n-gram\uff08\u4f8b\u5982\uff0c\u5c06 \u201chello\u201d \u8f6c\u6362\u4e3a \u201che\u201d, \u201cel\u201d, \u201cll\u201d, \u201clo\u201d\uff09\u3002 \u8ba1\u7b97\u6982\u7387\uff1a\u6839\u636e\u4e0a\u4e0b\u6587\uff0c\u8ba1\u7b97\u7ed9\u5b9a\u7684 n-gram \u51fa\u73b0\u7684\u6982\u7387\u3002 \u5019\u9009\u4fee\u6b63\uff1a\u6839\u636e\u4e0a\u4e0b\u6587\u7684 n-gram \u6982\u7387\uff0c\u627e\u51fa\u62fc\u5199\u9519\u8bef\u7684\u53ef\u80fd\u4fee\u6b63\u3002 \u2022 \u4f18\u70b9\uff1a\u80fd\u591f\u6839\u636e\u4e0a\u4e0b\u6587\u4fe1\u606f\u66f4\u667a\u80fd\u5730\u8fdb\u884c\u62fc\u5199\u4fee\u6b63\u3002 \u2022 \u7f3a\u70b9\uff1a\u9700\u8981\u5927\u91cf\u7684\u8bad\u7ec3\u6570\u636e\u6765\u6784\u5efa\u6709\u6548\u7684\u6a21\u578b\uff0c\u5e76\u4e14 n-gram \u7684\u5927\u5c0f\uff08n\uff09\u9700\u8981\u8c03\u8282\u4ee5\u5e73\u8861\u6027\u80fd\u548c\u8ba1\u7b97\u5f00\u9500\u3002 \u5e94\u7528\u5b9e\u4f8b\uff1a \u2022 MeiliSearch \u548c Typesense \u4f1a\u5229\u7528\u67d0\u4e9b n-gram \u6280\u672f\u6765\u6539\u5584\u6a21\u7cca\u641c\u7d22\u548c\u62fc\u5199\u4fee\u6b63\uff0c\u5c24\u5176\u662f\u5728\u8bed\u8a00\u6a21\u578b\u4e2d\u3002 \u57fa\u4e8e\u5019\u9009\u8bcd\u7684\u542f\u53d1\u5f0f\u65b9\u6cd5 \u2022 \u7b97\u6cd5\u6982\u8ff0\uff1a\u8fd9\u79cd\u65b9\u6cd5\u901a\u8fc7\u8bc6\u522b\u62fc\u5199\u9519\u8bef\uff0c\u5e76\u4ece\u5b57\u5178\u4e2d\u751f\u6210\u53ef\u80fd\u7684\u4fee\u6b63\u5019\u9009\u8bcd\uff0c\u901a\u5e38\u4f7f\u7528\u4e00\u4e9b\u542f\u53d1\u5f0f\u89c4\u5219\uff08\u5982\u5e38\u89c1\u62fc\u5199\u9519\u8bef\u6a21\u5f0f\u3001\u952e\u76d8\u76f8\u90bb\u5b57\u6bcd\u7b49\uff09\u3002 \u2022 \u6b65\u9aa4\uff1a \u751f\u6210\u5019\u9009\u8bcd\uff1a\u6839\u636e\u7528\u6237\u8f93\u5165\u7684\u9519\u8bef\u8bcd\uff0c\u751f\u6210\u4e00\u7ec4\u5019\u9009\u4fee\u6b63\u8bcd\u3002\u4f8b\u5982\uff0c\u901a\u8fc7\u66ff\u6362\u3001\u5220\u9664\u6216\u63d2\u5165\u5b57\u7b26\uff0c\u6216\u8005\u57fa\u4e8e\u5e38\u89c1\u62fc\u5199\u9519\u8bef\uff08\u5982\u201cteh\u201d \u2192 \u201cthe\u201d\uff09\u3002 \u8bc4\u4f30\u5019\u9009\u8bcd\u7684\u76f8\u5173\u6027\uff1a\u4f7f\u7528\u5b57\u5178\u9891\u7387\u3001\u4e0a\u4e0b\u6587\u3001\u7f16\u8f91\u8ddd\u79bb\u7b49\u65b9\u5f0f\u8bc4\u4f30\u6bcf\u4e2a\u5019\u9009\u8bcd\u7684\u53ef\u80fd\u6027\u3002 \u9009\u62e9\u6700\u4f73\u5019\u9009\uff1a\u9009\u51fa\u6700\u7b26\u5408\u4e0a\u4e0b\u6587\u548c\u5e38\u89c1\u9519\u8bef\u6a21\u5f0f\u7684\u5019\u9009\u8bcd\u3002 \u2022 \u4f18\u70b9\uff1a\u901f\u5ea6\u8f83\u5feb\uff0c\u4e0d\u9700\u8981\u5927\u91cf\u7684\u8ba1\u7b97\u8d44\u6e90\u3002 \u2022 \u7f3a\u70b9\uff1a\u53ef\u80fd\u4ea7\u751f\u4e0d\u592a\u7cbe\u786e\u7684\u4fee\u6b63\uff0c\u5c24\u5176\u662f\u5bf9\u4e8e\u975e\u6807\u51c6\u62fc\u5199\u6216\u591a\u4e49\u8bcd\u3002 \u5e94\u7528\u5b9e\u4f8b\uff1a \u2022 Xapian \u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\u6765\u4fee\u6b63\u62fc\u5199\u9519\u8bef\uff0c\u4f8b\u5982\u901a\u8fc7\u5efa\u7acb\u4e00\u4e2a\u5019\u9009\u8bcd\u751f\u6210\u5668\uff0c\u7ed3\u5408\u5e38\u89c1\u62fc\u5199\u9519\u8bef\u89c4\u5219\u6765\u8fdb\u884c\u4fee\u6b63\u3002 \u57fa\u4e8e\u6982\u7387\u6a21\u578b\u7684\u62fc\u5199\u4fee\u6b63 \u2022 \u7b97\u6cd5\u6982\u8ff0\uff1a\u8fd9\u7c7b\u65b9\u6cd5\u4f7f\u7528\u57fa\u4e8e\u8bed\u8a00\u7684\u6982\u7387\u6a21\u578b\uff08\u5982 Bayesian \u6a21\u578b\uff09\u6765\u5224\u65ad\u54ea\u4e2a\u4fee\u6b63\u6700\u6709\u53ef\u80fd\u3002\u8be5\u6a21\u578b\u4f1a\u6839\u636e\u51fa\u73b0\u7684\u6982\u7387\u4ece\u5019\u9009\u4fee\u6b63\u4e2d\u9009\u51fa\u6700\u4f73\u7684\u62fc\u5199\u4fee\u6b63\u3002 \u2022 \u6b65\u9aa4\uff1a \u8bad\u7ec3\u6982\u7387\u6a21\u578b\uff1a\u4f7f\u7528\u5927\u91cf\u7684\u6587\u672c\u6570\u636e\u8bad\u7ec3\u6a21\u578b\uff0c\u5b66\u4e60\u6bcf\u4e2a\u5355\u8bcd\u5728\u8bed\u8a00\u4e2d\u7684\u6982\u7387\u3002 \u751f\u6210\u5019\u9009\u4fee\u6b63\uff1a\u4e3a\u62fc\u5199\u9519\u8bef\u751f\u6210\u5019\u9009\u4fee\u6b63\uff0c\u5e76\u8ba1\u7b97\u6bcf\u4e2a\u5019\u9009\u7684\u6982\u7387\u3002 \u9009\u62e9\u6700\u4f73\u5019\u9009\uff1a\u9009\u62e9\u5177\u6709\u6700\u9ad8\u6982\u7387\u7684\u5019\u9009\u4f5c\u4e3a\u62fc\u5199\u4fee\u6b63\u3002 \u2022 \u4f18\u70b9\uff1a\u80fd\u591f\u66f4\u667a\u80fd\u5730\u6839\u636e\u4e0a\u4e0b\u6587\u9009\u62e9\u62fc\u5199\u4fee\u6b63\u3002 \u2022 \u7f3a\u70b9\uff1a\u9700\u8981\u5927\u91cf\u7684\u8bad\u7ec3\u6570\u636e\uff0c\u5e76\u4e14\u8ba1\u7b97\u5f00\u9500\u8f83\u5927\u3002 \u5e94\u7528\u5b9e\u4f8b\uff1a \u2022 Elasticsearch \u7b49\u641c\u7d22\u5f15\u64ce\u4f7f\u7528\u6982\u7387\u6a21\u578b\uff08\u5982 BM25 \u7b97\u6cd5\uff09\u6765\u63d0\u9ad8\u6a21\u7cca\u641c\u7d22\u7684\u8d28\u91cf\uff0c\u4ece\u800c\u4f18\u5316\u62fc\u5199\u4fee\u6b63\u548c\u76f8\u5173\u6027\u6392\u540d\u3002 \u57fa\u4e8e\u8bcd\u5178\u7684\u62fc\u5199\u4fee\u6b63 \u2022 \u7b97\u6cd5\u6982\u8ff0\uff1a\u8fd9\u662f\u4e00\u79cd\u6700\u7b80\u5355\u7684\u62fc\u5199\u4fee\u6b63\u65b9\u6cd5\uff0c\u901a\u8fc7\u4e00\u4e2a\u5305\u542b\u6b63\u786e\u5355\u8bcd\u7684\u5b57\u5178\uff08\u5982\u4f20\u7edf\u7684\u62fc\u5199\u8bcd\u5178\uff09\u6765\u67e5\u627e\u62fc\u5199\u9519\u8bef\u7684\u4fee\u6b63\u3002\u5b83\u901a\u8fc7\u5b57\u5178\u7684\u5b58\u5728\u6027\u6765\u786e\u5b9a\u62fc\u5199\u662f\u5426\u6b63\u786e\uff0c\u5e76\u63d0\u4f9b\u4fee\u6b63\u5efa\u8bae\u3002 \u2022 \u6b65\u9aa4\uff1a \u67e5\u627e\u5b57\u5178\uff1a\u68c0\u67e5\u7528\u6237\u8f93\u5165\u7684\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\u3002 \u67e5\u627e\u8fd1\u4f3c\u5339\u914d\uff1a\u5982\u679c\u7528\u6237\u8f93\u5165\u7684\u5355\u8bcd\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u67e5\u627e\u4e0e\u8be5\u5355\u8bcd\u7f16\u8f91\u8ddd\u79bb\u6700\u5c0f\u7684\u8bcd\u6761\u3002 \u63d0\u4f9b\u4fee\u6b63\u5efa\u8bae\uff1a\u5982\u679c\u627e\u5230\u62fc\u5199\u9519\u8bef\uff0c\u63d0\u4f9b\u4fee\u6b63\u5efa\u8bae\u3002 \u2022 \u4f18\u70b9\uff1a\u5b9e\u73b0\u7b80\u5355\u4e14\u5feb\u901f\uff0c\u9002\u7528\u4e8e\u8f83\u5c0f\u7684\u8bcd\u5178\u548c\u57fa\u7840\u62fc\u5199\u4fee\u6b63\u9700\u6c42\u3002 \u2022 \u7f3a\u70b9\uff1a\u65e0\u6cd5\u5904\u7406\u590d\u6742\u7684\u62fc\u5199\u9519\u8bef\u6216\u6ca1\u6709\u5728\u8bcd\u5178\u4e2d\u7684\u65b0\u8bcd\u3002 \u5e94\u7528\u5b9e\u4f8b\uff1a \u2022 Xapian \u548c\u5176\u4ed6\u641c\u7d22\u5f15\u64ce\u901a\u5e38\u4f1a\u4f9d\u8d56\u5185\u7f6e\u5b57\u5178\u8fdb\u884c\u62fc\u5199\u4fee\u6b63\uff0c\u4f46\u5e38\u5e38\u7ed3\u5408\u5176\u4ed6\u65b9\u6cd5\u6765\u589e\u5f3a\u51c6\u786e\u6027\u3002 \u2e3b \u603b\u7ed3 \u4e0d\u540c\u641c\u7d22\u5f15\u64ce\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5b9e\u73b0\u62fc\u5199\u4fee\u6b63\uff1a \u2022 \u7f16\u8f91\u8ddd\u79bb\uff1a\u57fa\u4e8e Levenshtein \u8ddd\u79bb\u8ba1\u7b97\u62fc\u5199\u8bef\u5dee\uff0c\u5e38\u7528\u4e8e\u5feb\u901f\u4fee\u6b63\u62fc\u5199\u9519\u8bef\u3002 \u2022 n-gram \u6a21\u578b\uff1a\u901a\u8fc7\u5206\u89e3\u8bcd\u6c47\u4e3a n-gram\uff0c\u5229\u7528\u4e0a\u4e0b\u6587\u4fe1\u606f\u8fdb\u884c\u4fee\u6b63\u3002 \u2022 \u5019\u9009\u8bcd\u751f\u6210\u548c\u542f\u53d1\u5f0f\u89c4\u5219\uff1a\u751f\u6210\u4e00\u7cfb\u5217\u62fc\u5199\u5019\u9009\uff0c\u57fa\u4e8e\u5e38\u89c1\u9519\u8bef\u6a21\u5f0f\u8fdb\u884c\u4fee\u6b63\u3002 \u2022 \u6982\u7387\u6a21\u578b\uff1a\u57fa\u4e8e\u8bed\u8a00\u6a21\u578b\u9884\u6d4b\u6700\u53ef\u80fd\u7684\u62fc\u5199\u4fee\u6b63\uff0c\u901a\u5e38\u7ed3\u5408\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002 \u2022 \u8bcd\u5178\u67e5\u627e\uff1a\u901a\u8fc7\u68c0\u67e5\u5b57\u5178\u4e2d\u662f\u5426\u6709\u62fc\u5199\u9519\u8bef\uff0c\u627e\u5230\u6700\u4f73\u5339\u914d\u7684\u5355\u8bcd\u3002 \u641c\u7d22\u5f15\u64ce\u5e38\u5e38\u7ed3\u5408\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u901a\u8fc7\u542f\u53d1\u5f0f\u7b97\u6cd5\u3001\u6a21\u7cca\u67e5\u8be2\u3001\u4e0a\u4e0b\u6587\u5206\u6790\u7b49\u6280\u672f\u6765\u5b9e\u73b0\u9ad8\u6548\u3001\u7cbe\u786e\u7684\u62fc\u5199\u4fee\u6b63\u3002","title":"Spelling correction"},{"location":"search/theone_search_design/","text":"\u7b80\u5316\u7248\u9ad8\u6548\u5b58\u50a8\u65b9\u6848\uff1a\u5e73\u8861\u529f\u80fd\u4e0e\u590d\u6742\u5ea6 \u00b6 \u786e\u5b9e\u4e4b\u524d\u7684\u65b9\u6848\u8003\u8651\u5f97\u8f83\u4e3a\u5168\u9762\u4f46\u4e5f\u76f8\u5bf9\u590d\u6742\u3002\u4e0b\u9762\u6211\u63d0\u4f9b\u4e00\u4e2a\u66f4\u7b80\u6d01\u7684\u5b9e\u73b0\u65b9\u6848\uff0c\u4fdd\u7559\u6838\u5fc3\u529f\u80fd\u7684\u540c\u65f6\u5927\u5e45\u964d\u4f4e\u5b9e\u73b0\u590d\u6742\u5ea6\u3002 \u7b80\u5316\u540e\u67b6\u6784\u8bbe\u8ba1 \u00b6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u5e94\u7528\u5c42 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Xapian \u2502 # \u4e3b\u5b58\u50a8 \u2502 \u2022 \u5168\u6587\u5185\u5bb9 \u2502 \u2502 \u2022 \u57fa\u672c\u5143\u6570\u636e \u2502 \u2502 \u2022 MinHash\u7b7e\u540d \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 SQLite \u2502 # \u8f85\u52a9\u5b58\u50a8 \u2502 \u2022 \u7cfb\u7edf\u914d\u7f6e \u2502 \u2502 \u2022 \u5c11\u91cf\u5173\u7cfb\u6570\u636e \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u5173\u952e\u7b80\u5316\u70b9 \u00b6 \u53bb\u9664LevelDB \uff1a\u5c06MinHash\u76f4\u63a5\u5b58\u50a8\u5728Xapian\u7684value slot\u4e2d \u51cf\u5c11\u6570\u636e\u5197\u4f59 \uff1a\u53ea\u4fdd\u7559\u5fc5\u8981\u7684\u5143\u6570\u636e\u526f\u672c \u7b80\u5316\u67e5\u8be2\u6d41\u7a0b \uff1a\u5408\u5e76\u67e5\u91cd\u548c\u68c0\u7d22\u7684\u903b\u8f91\u8def\u5f84 \u5177\u4f53\u5b9e\u73b0\u65b9\u6848 \u00b6 1. \u6570\u636e\u7ed3\u6784\u8bbe\u8ba1 \u00b6 Xapian\u5b58\u50a8 \uff08\u4e3b\u5b58\u50a8\uff09\uff1a - \u6587\u6863\u5185\u5bb9\uff08\u53ef\u68c0\u7d22\uff09 - \u6587\u6863\u6807\u9898\uff08\u53ef\u68c0\u7d22\uff0c\u66f4\u9ad8\u6743\u91cd\uff09 - MinHash\u7b7e\u540d\uff08\u5b58\u50a8\u5728value slot\uff09 - \u57fa\u672c\u5143\u6570\u636e\uff08\u521b\u5efa\u65f6\u95f4\u3001\u4f5c\u8005\u7b49\uff09 SQLite\u5b58\u50a8 \uff08\u4ec5\u7528\u4e8e\uff09\uff1a - \u7528\u6237\u914d\u7f6e - \u7cfb\u7edf\u72b6\u6001 - \u9700\u8981\u590d\u6742\u67e5\u8be2\u7684\u5173\u7cfb\u6570\u636e 2. \u6838\u5fc3\u4ee3\u7801\u5b9e\u73b0 \u00b6 \u6587\u6863\u7d22\u5f15 \u00b6 void indexDocument ( const Document & doc ) { // 1. \u751f\u6210MinHash vector < uint64_t > minhash = generateMinHash ( doc . content ); // 2. \u521b\u5efaXapian\u6587\u6863 Xapian :: Document xdoc ; xdoc . set_data ( doc . id ); // \u53ea\u5b58\u50a8ID // \u6dfb\u52a0\u53ef\u68c0\u7d22\u5185\u5bb9 Xapian :: TermGenerator termgen ; termgen . set_document ( xdoc ); termgen . index_text ( doc . title , 1 , \"S\" ); // \u6807\u9898\u66f4\u9ad8\u6743\u91cd termgen . index_text ( doc . content ); // \u5b58\u50a8\u5143\u6570\u636e\u4e3aterm\uff08\u4fbf\u4e8e\u8fc7\u6ee4\uff09 xdoc . add_term ( \"type_\" + doc . type ); xdoc . add_term ( \"author_\" + doc . author ); // \u5b58\u50a8MinHash\uff08\u538b\u7f29\u540e\u653e\u5165value slot\uff09 xdoc . add_value ( MINHASH_SLOT , compressMinHash ( minhash )); // 3. \u63d0\u4ea4\u5230\u6570\u636e\u5e93 db . replace_document ( doc . id , xdoc ); } \u6587\u6863\u67e5\u91cd \u00b6 vector < DuplicateResult > findDuplicates ( string content ) { // 1. \u751f\u6210\u67e5\u8be2MinHash auto query_hash = generateMinHash ( content ); // 2. \u904d\u5386\u6570\u636e\u5e93\u8ba1\u7b97\u76f8\u4f3c\u5ea6\uff08\u5b9e\u9645\u5e94\u7528\u5e94\u4f18\u5316\u6b64\u6b65\u9aa4\uff09 vector < DuplicateResult > results ; Xapian :: PostingIterator it ; for ( it = db . postlist_begin ( \"\" ); it != db . postlist_end ( \"\" ); ++ it ) { Xapian :: Document doc = db . get_document ( * it ); string stored_hash = doc . get_value ( MINHASH_SLOT ); double similarity = compareHashes ( query_hash , decompressMinHash ( stored_hash ) ); if ( similarity > THRESHOLD ) { results . push_back ({ doc . get_data (), // \u5b58\u50a8\u7684doc.id doc . get_value ( TITLE_SLOT ), similarity }); } } // 3. \u6309\u76f8\u4f3c\u5ea6\u6392\u5e8f sort ( results . begin (), results . end (), []( auto & a , auto & b ) { return a . similarity > b . similarity ; }); return results ; } \u6df7\u5408\u67e5\u8be2 \u00b6 vector < SearchResult > search ( const Query & query ) { if ( query . mode == SIMILARITY_SEARCH ) { return findDuplicates ( query . content ); } // \u666e\u901a\u5168\u6587\u68c0\u7d22 Xapian :: Enquire enquire ( db ); Xapian :: Query xquery = parseQuery ( query ); enquire . set_query ( xquery ); vector < SearchResult > results ; Xapian :: MSet matches = enquire . get_mset ( 0 , 20 ); for ( auto it = matches . begin (); it != matches . end (); ++ it ) { Xapian :: Document doc = it . get_document (); results . push_back ({ doc . get_data (), doc . get_value ( TITLE_SLOT ), it . get_percent () / 100.0 }); } return results ; } 3. \u6027\u80fd\u4f18\u5316\u7b56\u7565 \u00b6 MinHash\u5b58\u50a8\u4f18\u5316 \uff1a string compressMinHash ( const vector < uint64_t >& hashes ) { // \u4f7f\u7528\u7b80\u5355\u7684\u5dee\u503c\u7f16\u7801 stringstream ss ; uint64_t last = 0 ; for ( auto h : hashes ) { ss << encodeVarint ( h - last ); last = h ; } return ss . str (); } \u67e5\u91cd\u4f18\u5316 \uff08\u66ff\u4ee3\u5168\u91cf\u626b\u63cf\uff09\uff1a vector < DuplicateResult > optimizedFindDuplicates ( string content ) { auto query_hash = generateMinHash ( content ); // 1. \u63d0\u53d6\u5173\u952eband\u4f5c\u4e3a\u8fc7\u6ee4\u6761\u4ef6 vector < string > query_terms ; for ( int i = 0 ; i < 3 ; i ++ ) { // \u4f7f\u7528\u524d3\u4e2aband query_terms . push_back ( fmt :: format ( \"band{}:{}\" , i , query_hash . bands [ i ])); } // 2. \u6784\u5efaXapian\u67e5\u8be2 Xapian :: Query query ( Xapian :: Query :: OP_OR , query_terms . begin (), query_terms . end ()); // \u5176\u4f59\u903b\u8f91\u76f8\u540c... } \u7f13\u5b58\u70ed\u70b9\u6570\u636e \uff1a class DocumentCache { public : string getTitle ( Xapian :: docid id ) { if ( auto it = title_cache . find ( id ); it != title_cache . end ()) { return it -> second ; } auto doc = db . get_document ( id ); string title = doc . get_value ( TITLE_SLOT ); title_cache [ id ] = title ; return title ; } private : unordered_map < Xapian :: docid , string > title_cache ; Xapian :: Database & db ; }; \u65b9\u6848\u4f18\u52bf \u00b6 \u5b9e\u73b0\u7b80\u5355 \uff1a \u4e3b\u8981\u903b\u8f91\u90fd\u5728Xapian\u4e2d\u5b9e\u73b0 SQLite\u4ec5\u7528\u4e8e\u8f85\u52a9\u5b58\u50a8 \u4ee3\u7801\u91cf\u51cf\u5c1150%\u4ee5\u4e0a \u7ef4\u62a4\u65b9\u4fbf \uff1a \u53ea\u6709\u4e24\u4e2a\u5b58\u50a8\u5f15\u64ce\u9700\u8981\u7ba1\u7406 \u5907\u4efd\u548c\u6062\u590d\u6d41\u7a0b\u7b80\u5355 \u8d44\u6e90\u9700\u6c42\u4f4e \uff1a \u4e0d\u9700\u8981\u7ef4\u62a4LevelDB \u5185\u5b58\u5360\u7528\u66f4\u5c0f \u8db3\u591f\u5e94\u5bf9 \uff1a \u4e07\u7ea7\u6587\u6863\u89c4\u6a21 \u4e2d\u7b49\u67e5\u8be2\u9891\u7387 \u57fa\u672c\u67e5\u91cd\u9700\u6c42 \u9002\u7528\u573a\u666f\u63a8\u8350 \u00b6 \u8fd9\u4e2a\u7b80\u5316\u65b9\u6848\u7279\u522b\u9002\u5408\u4ee5\u4e0b\u60c5\u51b5\uff1a - \u6587\u6863\u6570\u91cf\u572810\u4e07\u4ee5\u5185 - \u6bcf\u5929\u66f4\u65b0\u4e0d\u8d85\u8fc71000\u6b21 - \u4e0d\u9700\u8981\u5206\u5e03\u5f0f\u90e8\u7f72 - \u5f00\u53d1\u8d44\u6e90\u6709\u9650\u7684\u5c0f\u578b\u9879\u76ee \u5982\u679c\u540e\u671f\u9700\u8981\u6269\u5c55\uff0c\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u65b9\u9762\u589e\u5f3a\uff1a 1. \u5c06MinHash\u8fc1\u79fb\u5230Redis\u7b49\u5185\u5b58\u6570\u636e\u5e93 2. \u5bf9Xapian\u6570\u636e\u5e93\u8fdb\u884c\u5206\u7247 3. \u6dfb\u52a0\u67e5\u8be2\u7ed3\u679c\u7f13\u5b58\u5c42 \u8fd9\u6837\u5728\u4fdd\u6301\u7cfb\u7edf\u7b80\u5355\u6027\u7684\u540c\u65f6\uff0c\u4e5f\u4e3a\u672a\u6765\u53ef\u80fd\u7684\u6269\u5c55\u7559\u4e0b\u4e86\u7a7a\u95f4\u3002","title":"\u7b80\u5316\u7248\u9ad8\u6548\u5b58\u50a8\u65b9\u6848\uff1a\u5e73\u8861\u529f\u80fd\u4e0e\u590d\u6742\u5ea6"},{"location":"search/theone_search_design/#_1","text":"\u786e\u5b9e\u4e4b\u524d\u7684\u65b9\u6848\u8003\u8651\u5f97\u8f83\u4e3a\u5168\u9762\u4f46\u4e5f\u76f8\u5bf9\u590d\u6742\u3002\u4e0b\u9762\u6211\u63d0\u4f9b\u4e00\u4e2a\u66f4\u7b80\u6d01\u7684\u5b9e\u73b0\u65b9\u6848\uff0c\u4fdd\u7559\u6838\u5fc3\u529f\u80fd\u7684\u540c\u65f6\u5927\u5e45\u964d\u4f4e\u5b9e\u73b0\u590d\u6742\u5ea6\u3002","title":"\u7b80\u5316\u7248\u9ad8\u6548\u5b58\u50a8\u65b9\u6848\uff1a\u5e73\u8861\u529f\u80fd\u4e0e\u590d\u6742\u5ea6"},{"location":"search/theone_search_design/#_2","text":"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u5e94\u7528\u5c42 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Xapian \u2502 # \u4e3b\u5b58\u50a8 \u2502 \u2022 \u5168\u6587\u5185\u5bb9 \u2502 \u2502 \u2022 \u57fa\u672c\u5143\u6570\u636e \u2502 \u2502 \u2022 MinHash\u7b7e\u540d \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 SQLite \u2502 # \u8f85\u52a9\u5b58\u50a8 \u2502 \u2022 \u7cfb\u7edf\u914d\u7f6e \u2502 \u2502 \u2022 \u5c11\u91cf\u5173\u7cfb\u6570\u636e \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"\u7b80\u5316\u540e\u67b6\u6784\u8bbe\u8ba1"},{"location":"search/theone_search_design/#_3","text":"\u53bb\u9664LevelDB \uff1a\u5c06MinHash\u76f4\u63a5\u5b58\u50a8\u5728Xapian\u7684value slot\u4e2d \u51cf\u5c11\u6570\u636e\u5197\u4f59 \uff1a\u53ea\u4fdd\u7559\u5fc5\u8981\u7684\u5143\u6570\u636e\u526f\u672c \u7b80\u5316\u67e5\u8be2\u6d41\u7a0b \uff1a\u5408\u5e76\u67e5\u91cd\u548c\u68c0\u7d22\u7684\u903b\u8f91\u8def\u5f84","title":"\u5173\u952e\u7b80\u5316\u70b9"},{"location":"search/theone_search_design/#_4","text":"","title":"\u5177\u4f53\u5b9e\u73b0\u65b9\u6848"},{"location":"search/theone_search_design/#1","text":"Xapian\u5b58\u50a8 \uff08\u4e3b\u5b58\u50a8\uff09\uff1a - \u6587\u6863\u5185\u5bb9\uff08\u53ef\u68c0\u7d22\uff09 - \u6587\u6863\u6807\u9898\uff08\u53ef\u68c0\u7d22\uff0c\u66f4\u9ad8\u6743\u91cd\uff09 - MinHash\u7b7e\u540d\uff08\u5b58\u50a8\u5728value slot\uff09 - \u57fa\u672c\u5143\u6570\u636e\uff08\u521b\u5efa\u65f6\u95f4\u3001\u4f5c\u8005\u7b49\uff09 SQLite\u5b58\u50a8 \uff08\u4ec5\u7528\u4e8e\uff09\uff1a - \u7528\u6237\u914d\u7f6e - \u7cfb\u7edf\u72b6\u6001 - \u9700\u8981\u590d\u6742\u67e5\u8be2\u7684\u5173\u7cfb\u6570\u636e","title":"1. \u6570\u636e\u7ed3\u6784\u8bbe\u8ba1"},{"location":"search/theone_search_design/#2","text":"","title":"2. \u6838\u5fc3\u4ee3\u7801\u5b9e\u73b0"},{"location":"search/theone_search_design/#_5","text":"void indexDocument ( const Document & doc ) { // 1. \u751f\u6210MinHash vector < uint64_t > minhash = generateMinHash ( doc . content ); // 2. \u521b\u5efaXapian\u6587\u6863 Xapian :: Document xdoc ; xdoc . set_data ( doc . id ); // \u53ea\u5b58\u50a8ID // \u6dfb\u52a0\u53ef\u68c0\u7d22\u5185\u5bb9 Xapian :: TermGenerator termgen ; termgen . set_document ( xdoc ); termgen . index_text ( doc . title , 1 , \"S\" ); // \u6807\u9898\u66f4\u9ad8\u6743\u91cd termgen . index_text ( doc . content ); // \u5b58\u50a8\u5143\u6570\u636e\u4e3aterm\uff08\u4fbf\u4e8e\u8fc7\u6ee4\uff09 xdoc . add_term ( \"type_\" + doc . type ); xdoc . add_term ( \"author_\" + doc . author ); // \u5b58\u50a8MinHash\uff08\u538b\u7f29\u540e\u653e\u5165value slot\uff09 xdoc . add_value ( MINHASH_SLOT , compressMinHash ( minhash )); // 3. \u63d0\u4ea4\u5230\u6570\u636e\u5e93 db . replace_document ( doc . id , xdoc ); }","title":"\u6587\u6863\u7d22\u5f15"},{"location":"search/theone_search_design/#_6","text":"vector < DuplicateResult > findDuplicates ( string content ) { // 1. \u751f\u6210\u67e5\u8be2MinHash auto query_hash = generateMinHash ( content ); // 2. \u904d\u5386\u6570\u636e\u5e93\u8ba1\u7b97\u76f8\u4f3c\u5ea6\uff08\u5b9e\u9645\u5e94\u7528\u5e94\u4f18\u5316\u6b64\u6b65\u9aa4\uff09 vector < DuplicateResult > results ; Xapian :: PostingIterator it ; for ( it = db . postlist_begin ( \"\" ); it != db . postlist_end ( \"\" ); ++ it ) { Xapian :: Document doc = db . get_document ( * it ); string stored_hash = doc . get_value ( MINHASH_SLOT ); double similarity = compareHashes ( query_hash , decompressMinHash ( stored_hash ) ); if ( similarity > THRESHOLD ) { results . push_back ({ doc . get_data (), // \u5b58\u50a8\u7684doc.id doc . get_value ( TITLE_SLOT ), similarity }); } } // 3. \u6309\u76f8\u4f3c\u5ea6\u6392\u5e8f sort ( results . begin (), results . end (), []( auto & a , auto & b ) { return a . similarity > b . similarity ; }); return results ; }","title":"\u6587\u6863\u67e5\u91cd"},{"location":"search/theone_search_design/#_7","text":"vector < SearchResult > search ( const Query & query ) { if ( query . mode == SIMILARITY_SEARCH ) { return findDuplicates ( query . content ); } // \u666e\u901a\u5168\u6587\u68c0\u7d22 Xapian :: Enquire enquire ( db ); Xapian :: Query xquery = parseQuery ( query ); enquire . set_query ( xquery ); vector < SearchResult > results ; Xapian :: MSet matches = enquire . get_mset ( 0 , 20 ); for ( auto it = matches . begin (); it != matches . end (); ++ it ) { Xapian :: Document doc = it . get_document (); results . push_back ({ doc . get_data (), doc . get_value ( TITLE_SLOT ), it . get_percent () / 100.0 }); } return results ; }","title":"\u6df7\u5408\u67e5\u8be2"},{"location":"search/theone_search_design/#3","text":"MinHash\u5b58\u50a8\u4f18\u5316 \uff1a string compressMinHash ( const vector < uint64_t >& hashes ) { // \u4f7f\u7528\u7b80\u5355\u7684\u5dee\u503c\u7f16\u7801 stringstream ss ; uint64_t last = 0 ; for ( auto h : hashes ) { ss << encodeVarint ( h - last ); last = h ; } return ss . str (); } \u67e5\u91cd\u4f18\u5316 \uff08\u66ff\u4ee3\u5168\u91cf\u626b\u63cf\uff09\uff1a vector < DuplicateResult > optimizedFindDuplicates ( string content ) { auto query_hash = generateMinHash ( content ); // 1. \u63d0\u53d6\u5173\u952eband\u4f5c\u4e3a\u8fc7\u6ee4\u6761\u4ef6 vector < string > query_terms ; for ( int i = 0 ; i < 3 ; i ++ ) { // \u4f7f\u7528\u524d3\u4e2aband query_terms . push_back ( fmt :: format ( \"band{}:{}\" , i , query_hash . bands [ i ])); } // 2. \u6784\u5efaXapian\u67e5\u8be2 Xapian :: Query query ( Xapian :: Query :: OP_OR , query_terms . begin (), query_terms . end ()); // \u5176\u4f59\u903b\u8f91\u76f8\u540c... } \u7f13\u5b58\u70ed\u70b9\u6570\u636e \uff1a class DocumentCache { public : string getTitle ( Xapian :: docid id ) { if ( auto it = title_cache . find ( id ); it != title_cache . end ()) { return it -> second ; } auto doc = db . get_document ( id ); string title = doc . get_value ( TITLE_SLOT ); title_cache [ id ] = title ; return title ; } private : unordered_map < Xapian :: docid , string > title_cache ; Xapian :: Database & db ; };","title":"3. \u6027\u80fd\u4f18\u5316\u7b56\u7565"},{"location":"search/theone_search_design/#_8","text":"\u5b9e\u73b0\u7b80\u5355 \uff1a \u4e3b\u8981\u903b\u8f91\u90fd\u5728Xapian\u4e2d\u5b9e\u73b0 SQLite\u4ec5\u7528\u4e8e\u8f85\u52a9\u5b58\u50a8 \u4ee3\u7801\u91cf\u51cf\u5c1150%\u4ee5\u4e0a \u7ef4\u62a4\u65b9\u4fbf \uff1a \u53ea\u6709\u4e24\u4e2a\u5b58\u50a8\u5f15\u64ce\u9700\u8981\u7ba1\u7406 \u5907\u4efd\u548c\u6062\u590d\u6d41\u7a0b\u7b80\u5355 \u8d44\u6e90\u9700\u6c42\u4f4e \uff1a \u4e0d\u9700\u8981\u7ef4\u62a4LevelDB \u5185\u5b58\u5360\u7528\u66f4\u5c0f \u8db3\u591f\u5e94\u5bf9 \uff1a \u4e07\u7ea7\u6587\u6863\u89c4\u6a21 \u4e2d\u7b49\u67e5\u8be2\u9891\u7387 \u57fa\u672c\u67e5\u91cd\u9700\u6c42","title":"\u65b9\u6848\u4f18\u52bf"},{"location":"search/theone_search_design/#_9","text":"\u8fd9\u4e2a\u7b80\u5316\u65b9\u6848\u7279\u522b\u9002\u5408\u4ee5\u4e0b\u60c5\u51b5\uff1a - \u6587\u6863\u6570\u91cf\u572810\u4e07\u4ee5\u5185 - \u6bcf\u5929\u66f4\u65b0\u4e0d\u8d85\u8fc71000\u6b21 - \u4e0d\u9700\u8981\u5206\u5e03\u5f0f\u90e8\u7f72 - \u5f00\u53d1\u8d44\u6e90\u6709\u9650\u7684\u5c0f\u578b\u9879\u76ee \u5982\u679c\u540e\u671f\u9700\u8981\u6269\u5c55\uff0c\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u65b9\u9762\u589e\u5f3a\uff1a 1. \u5c06MinHash\u8fc1\u79fb\u5230Redis\u7b49\u5185\u5b58\u6570\u636e\u5e93 2. \u5bf9Xapian\u6570\u636e\u5e93\u8fdb\u884c\u5206\u7247 3. \u6dfb\u52a0\u67e5\u8be2\u7ed3\u679c\u7f13\u5b58\u5c42 \u8fd9\u6837\u5728\u4fdd\u6301\u7cfb\u7edf\u7b80\u5355\u6027\u7684\u540c\u65f6\uff0c\u4e5f\u4e3a\u672a\u6765\u53ef\u80fd\u7684\u6269\u5c55\u7559\u4e0b\u4e86\u7a7a\u95f4\u3002","title":"\u9002\u7528\u573a\u666f\u63a8\u8350"},{"location":"search/theone_search_design_impl/","text":"\u5e38\u9a7b\u670d\u52a1\u6a21\u5f0f\u5b9e\u73b0 (Python\u7248\u672c) \u00b6 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528Python\u5b9e\u73b0\u7684\u5e38\u9a7b\u670d\u52a1\u65b9\u6848\uff0c\u7ed3\u5408\u4e86SQLite\u3001Xapian\u548cFlask web\u6846\u67b6\u3002\u8fd9\u4e2a\u65b9\u6848\u9002\u5408\u4e2d\u5c0f\u89c4\u6a21\u7684\u6587\u6863\u68c0\u7d22\u548c\u67e5\u91cd\u7cfb\u7edf\u3002 \u6838\u5fc3\u670d\u52a1\u67b6\u6784 \u00b6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Document Service \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2022 Flask HTTP API \u63a5\u53e3 \u2502 \u2502 \u2022 SQLite \u8fde\u63a5\u6c60 \u2502 \u2502 \u2022 Xapian \u6570\u636e\u5e93\u8fde\u63a5 \u2502 \u2502 \u2022 MinHash \u67e5\u91cd\u529f\u80fd \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u5b8c\u6574\u5b9e\u73b0\u4ee3\u7801 \u00b6 1. \u670d\u52a1\u4e3b\u7a0b\u5e8f ( document_service.py ) \u00b6 import sqlite3 from flask import Flask , request , jsonify from xapian import Database , Document , TermGenerator , QueryParser import mmh3 from dataclasses import dataclass from typing import List , Dict from concurrent.futures import ThreadPoolExecutor import threading import time # \u914d\u7f6e\u5e38\u91cf SQLITE_DB_PATH = \"metadata.db\" XAPIAN_DB_PATH = \"xapian_index\" MINHASH_PERMUTATIONS = 128 # MinHash\u7b7e\u540d\u957f\u5ea6 app = Flask ( __name__ ) # \u6570\u636e\u5e93\u8fde\u63a5\u6c60 class ConnectionPool : def __init__ ( self , max_connections = 5 ): self . max_connections = max_connections self . _pool = [] self . _lock = threading . Lock () def get_conn ( self ): with self . _lock : if self . _pool : return self . _pool . pop () if len ( self . _pool ) < self . max_connections : return sqlite3 . connect ( SQLITE_DB_PATH ) raise Exception ( \"Connection pool exhausted\" ) def return_conn ( self , conn ): with self . _lock : self . _pool . append ( conn ) sqlite_pool = ConnectionPool () xapian_db = Database ( XAPIAN_DB_PATH ) # MinHash \u5de5\u5177\u51fd\u6570 def generate_minhash ( text : str , num_perm = MINHASH_PERMUTATIONS ) -> List [ int ]: shingles = set () words = text . split () for i in range ( len ( words ) - 2 ): shingles . add ( \" \" . join ( words [ i : i + 3 ])) minhash = [ float ( 'inf' )] * num_perm for shingle in shingles : for i in range ( num_perm ): hash_val = mmh3 . hash ( f \" { i }{ shingle } \" , signed = False ) if hash_val < minhash [ i ]: minhash [ i ] = hash_val return minhash # API\u7aef\u70b9 @app . route ( '/search' , methods = [ 'GET' ]) def search (): query = request . args . get ( 'q' , '' ) page = int ( request . args . get ( 'page' , 1 )) page_size = int ( request . args . get ( 'page_size' , 10 )) # 1. \u4f7f\u7528Xapian\u8fdb\u884c\u5168\u6587\u68c0\u7d22 query_parser = QueryParser () query_parser . set_stemming ( True ) xapian_query = query_parser . parse_query ( query ) enquire = xapian_db . enquire ( xapian_query ) matches = enquire . get_mset (( page - 1 ) * page_size , page_size ) # 2. \u4eceSQLite\u83b7\u53d6\u5143\u6570\u636e conn = sqlite_pool . get_conn () try : cursor = conn . cursor () doc_ids = [ str ( match . docid ) for match in matches ] placeholders = ',' . join ([ '?' ] * len ( doc_ids )) cursor . execute ( f \"\"\" SELECT id, title, file_path, created_time FROM documents WHERE id IN ( { placeholders } ) \"\"\" , doc_ids ) meta_map = { row [ 0 ]: row [ 1 :] for row in cursor . fetchall ()} # 3. \u5408\u5e76\u7ed3\u679c results = [] for match in matches : doc_id = str ( match . docid ) if doc_id in meta_map : title , path , created = meta_map [ doc_id ] results . append ({ 'id' : doc_id , 'title' : title , 'path' : path , 'score' : match . percent / 100 , 'created' : created }) return jsonify ({ 'results' : results }) finally : sqlite_pool . return_conn ( conn ) @app . route ( '/find_similar' , methods = [ 'POST' ]) def find_similar (): content = request . json . get ( 'content' , '' ) threshold = float ( request . json . get ( 'threshold' , 0.8 )) # 1. \u751f\u6210\u67e5\u8be2MinHash query_minhash = generate_minhash ( content ) # 2. \u904d\u5386Xapian\u6570\u636e\u5e93\u6bd4\u8f83\u76f8\u4f3c\u5ea6 results = [] for doc in xapian_db : stored_minhash = [ int ( x ) for x in doc . get_value ( 0 ) . split ( ',' )] # \u8ba1\u7b97Jaccard\u76f8\u4f3c\u5ea6\u4f30\u8ba1 matches = sum ( 1 for a , b in zip ( query_minhash , stored_minhash ) if a == b ) similarity = matches / MINHASH_PERMUTATIONS if similarity >= threshold : doc_id = doc . get_data () conn = sqlite_pool . get_conn () try : cursor = conn . cursor () cursor . execute ( \"\"\" SELECT title, file_path FROM documents WHERE id = ? \"\"\" , ( doc_id ,)) row = cursor . fetchone () if row : results . append ({ 'id' : doc_id , 'title' : row [ 0 ], 'path' : row [ 1 ], 'similarity' : similarity }) finally : sqlite_pool . return_conn ( conn ) # \u6309\u76f8\u4f3c\u5ea6\u6392\u5e8f results . sort ( key = lambda x : x [ 'similarity' ], reverse = True ) return jsonify ({ 'results' : results }) # \u521d\u59cb\u5316\u51fd\u6570 def initialize_databases (): # \u521d\u59cb\u5316SQLite conn = sqlite3 . connect ( SQLITE_DB_PATH ) try : conn . executescript ( \"\"\" CREATE TABLE IF NOT EXISTS documents ( id TEXT PRIMARY KEY, title TEXT, file_path TEXT UNIQUE, file_type TEXT, created_time INTEGER, updated_time INTEGER ); CREATE INDEX IF NOT EXISTS idx_documents_type ON documents(file_type); CREATE INDEX IF NOT EXISTS idx_documents_time ON documents(created_time); \"\"\" ) conn . commit () finally : conn . close () # \u786e\u4fddXapian\u6570\u636e\u5e93\u5b58\u5728 try : Database ( XAPIAN_DB_PATH ) except : # \u5982\u679c\u4e0d\u5b58\u5728\u5219\u521b\u5efa db = Database ( XAPIAN_DB_PATH , Database . CREATE_OR_OPEN ) db . close () # \u540e\u53f0\u7d22\u5f15\u4efb\u52a1 def background_indexer (): while True : # \u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u5b9a\u671f\u7d22\u5f15\u65b0\u6587\u6863\u7684\u903b\u8f91 time . sleep ( 60 * 5 ) # \u6bcf5\u5206\u949f\u68c0\u67e5\u4e00\u6b21 if __name__ == '__main__' : initialize_databases () # \u542f\u52a8\u540e\u53f0\u7d22\u5f15\u7ebf\u7a0b indexer_thread = threading . Thread ( target = background_indexer , daemon = True ) indexer_thread . start () # \u542f\u52a8Flask\u670d\u52a1 app . run ( host = '0.0.0.0' , port = 5000 , threaded = True ) 2. \u5ba2\u6237\u7aef\u8c03\u7528\u793a\u4f8b \u00b6 import requests # \u641c\u7d22\u6587\u6863 response = requests . get ( 'http://localhost:5000/search' , params = { 'q' : '\u4eba\u5de5\u667a\u80fd' , 'page' : 1 , 'page_size' : 10 }) print ( response . json ()) # \u67e5\u627e\u76f8\u4f3c\u6587\u6863 response = requests . post ( 'http://localhost:5000/find_similar' , json = { 'content' : '\u8fd9\u91cc\u662f\u6587\u6863\u7684\u5b8c\u6574\u5185\u5bb9...' , 'threshold' : 0.7 }) print ( response . json ()) \u5173\u952e\u7279\u6027 \u00b6 \u670d\u52a1\u5316\u67b6\u6784 \uff1a \u57fa\u4e8eFlask\u7684HTTP API\u670d\u52a1 \u652f\u6301\u591a\u7ebf\u7a0b\u5e76\u53d1\u8bf7\u6c42 \u5e38\u9a7b\u5185\u5b58\u8fd0\u884c \u6570\u636e\u5e93\u7ba1\u7406 \uff1a SQLite\u8fde\u63a5\u6c60\u7ba1\u7406 Xapian\u6301\u4e45\u5316\u8fde\u63a5 \u81ea\u52a8\u521d\u59cb\u5316\u6570\u636e\u5e93 \u6838\u5fc3\u529f\u80fd \uff1a \u5168\u6587\u68c0\u7d22 (Xapian) \u6587\u6863\u67e5\u91cd (MinHash) \u5206\u9875\u7ed3\u679c\u8fd4\u56de \u6269\u5c55\u80fd\u529b \uff1a \u540e\u53f0\u81ea\u52a8\u7d22\u5f15\u7ebf\u7a0b \u51c6\u5907\u6dfb\u52a0\u65b0\u6587\u6863\u7684\u63a5\u53e3 \u90e8\u7f72\u5efa\u8bae \u00b6 \u751f\u4ea7\u73af\u5883\u90e8\u7f72 \uff1a # \u4f7f\u7528Gunicorn\u4f5c\u4e3aWSGI\u670d\u52a1\u5668 gunicorn -w 4 -b 0 .0.0.0:5000 document_service:app \u76d1\u63a7\u548c\u8fd0\u7ef4 \uff1a \u6dfb\u52a0 /health \u7aef\u70b9\u7528\u4e8e\u5065\u5eb7\u68c0\u67e5 \u4f7f\u7528Supervisor\u7ba1\u7406\u8fdb\u7a0b \u8bb0\u5f55\u67e5\u8be2\u65e5\u5fd7 \u6027\u80fd\u4f18\u5316 \uff1a \u5bf9\u9ad8\u9891\u67e5\u8be2\u6dfb\u52a0\u7f13\u5b58 \u8003\u8651\u5bf9Xapian\u6570\u636e\u5e93\u5206\u7247 \u5bf9MinHash\u6bd4\u8f83\u4f7f\u7528\u66f4\u9ad8\u6548\u7684\u6570\u636e\u7ed3\u6784 \u8fd9\u4e2a\u5b9e\u73b0\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u670d\u52a1\u6846\u67b6\uff0c\u60a8\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u9700\u6c42\u8fdb\u4e00\u6b65\u6269\u5c55\u529f\u80fd\uff0c\u5982\u6dfb\u52a0\u7528\u6237\u8ba4\u8bc1\u3001\u66f4\u590d\u6742\u7684\u67e5\u8be2\u53c2\u6570\u3001\u6216\u8005\u96c6\u6210\u5176\u4ed6\u5b58\u50a8\u540e\u7aef\u3002","title":"\u5e38\u9a7b\u670d\u52a1\u6a21\u5f0f\u5b9e\u73b0 (Python\u7248\u672c)"},{"location":"search/theone_search_design_impl/#python","text":"\u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528Python\u5b9e\u73b0\u7684\u5e38\u9a7b\u670d\u52a1\u65b9\u6848\uff0c\u7ed3\u5408\u4e86SQLite\u3001Xapian\u548cFlask web\u6846\u67b6\u3002\u8fd9\u4e2a\u65b9\u6848\u9002\u5408\u4e2d\u5c0f\u89c4\u6a21\u7684\u6587\u6863\u68c0\u7d22\u548c\u67e5\u91cd\u7cfb\u7edf\u3002","title":"\u5e38\u9a7b\u670d\u52a1\u6a21\u5f0f\u5b9e\u73b0 (Python\u7248\u672c)"},{"location":"search/theone_search_design_impl/#_1","text":"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Document Service \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2022 Flask HTTP API \u63a5\u53e3 \u2502 \u2502 \u2022 SQLite \u8fde\u63a5\u6c60 \u2502 \u2502 \u2022 Xapian \u6570\u636e\u5e93\u8fde\u63a5 \u2502 \u2502 \u2022 MinHash \u67e5\u91cd\u529f\u80fd \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"\u6838\u5fc3\u670d\u52a1\u67b6\u6784"},{"location":"search/theone_search_design_impl/#_2","text":"","title":"\u5b8c\u6574\u5b9e\u73b0\u4ee3\u7801"},{"location":"search/theone_search_design_impl/#1-document_servicepy","text":"import sqlite3 from flask import Flask , request , jsonify from xapian import Database , Document , TermGenerator , QueryParser import mmh3 from dataclasses import dataclass from typing import List , Dict from concurrent.futures import ThreadPoolExecutor import threading import time # \u914d\u7f6e\u5e38\u91cf SQLITE_DB_PATH = \"metadata.db\" XAPIAN_DB_PATH = \"xapian_index\" MINHASH_PERMUTATIONS = 128 # MinHash\u7b7e\u540d\u957f\u5ea6 app = Flask ( __name__ ) # \u6570\u636e\u5e93\u8fde\u63a5\u6c60 class ConnectionPool : def __init__ ( self , max_connections = 5 ): self . max_connections = max_connections self . _pool = [] self . _lock = threading . Lock () def get_conn ( self ): with self . _lock : if self . _pool : return self . _pool . pop () if len ( self . _pool ) < self . max_connections : return sqlite3 . connect ( SQLITE_DB_PATH ) raise Exception ( \"Connection pool exhausted\" ) def return_conn ( self , conn ): with self . _lock : self . _pool . append ( conn ) sqlite_pool = ConnectionPool () xapian_db = Database ( XAPIAN_DB_PATH ) # MinHash \u5de5\u5177\u51fd\u6570 def generate_minhash ( text : str , num_perm = MINHASH_PERMUTATIONS ) -> List [ int ]: shingles = set () words = text . split () for i in range ( len ( words ) - 2 ): shingles . add ( \" \" . join ( words [ i : i + 3 ])) minhash = [ float ( 'inf' )] * num_perm for shingle in shingles : for i in range ( num_perm ): hash_val = mmh3 . hash ( f \" { i }{ shingle } \" , signed = False ) if hash_val < minhash [ i ]: minhash [ i ] = hash_val return minhash # API\u7aef\u70b9 @app . route ( '/search' , methods = [ 'GET' ]) def search (): query = request . args . get ( 'q' , '' ) page = int ( request . args . get ( 'page' , 1 )) page_size = int ( request . args . get ( 'page_size' , 10 )) # 1. \u4f7f\u7528Xapian\u8fdb\u884c\u5168\u6587\u68c0\u7d22 query_parser = QueryParser () query_parser . set_stemming ( True ) xapian_query = query_parser . parse_query ( query ) enquire = xapian_db . enquire ( xapian_query ) matches = enquire . get_mset (( page - 1 ) * page_size , page_size ) # 2. \u4eceSQLite\u83b7\u53d6\u5143\u6570\u636e conn = sqlite_pool . get_conn () try : cursor = conn . cursor () doc_ids = [ str ( match . docid ) for match in matches ] placeholders = ',' . join ([ '?' ] * len ( doc_ids )) cursor . execute ( f \"\"\" SELECT id, title, file_path, created_time FROM documents WHERE id IN ( { placeholders } ) \"\"\" , doc_ids ) meta_map = { row [ 0 ]: row [ 1 :] for row in cursor . fetchall ()} # 3. \u5408\u5e76\u7ed3\u679c results = [] for match in matches : doc_id = str ( match . docid ) if doc_id in meta_map : title , path , created = meta_map [ doc_id ] results . append ({ 'id' : doc_id , 'title' : title , 'path' : path , 'score' : match . percent / 100 , 'created' : created }) return jsonify ({ 'results' : results }) finally : sqlite_pool . return_conn ( conn ) @app . route ( '/find_similar' , methods = [ 'POST' ]) def find_similar (): content = request . json . get ( 'content' , '' ) threshold = float ( request . json . get ( 'threshold' , 0.8 )) # 1. \u751f\u6210\u67e5\u8be2MinHash query_minhash = generate_minhash ( content ) # 2. \u904d\u5386Xapian\u6570\u636e\u5e93\u6bd4\u8f83\u76f8\u4f3c\u5ea6 results = [] for doc in xapian_db : stored_minhash = [ int ( x ) for x in doc . get_value ( 0 ) . split ( ',' )] # \u8ba1\u7b97Jaccard\u76f8\u4f3c\u5ea6\u4f30\u8ba1 matches = sum ( 1 for a , b in zip ( query_minhash , stored_minhash ) if a == b ) similarity = matches / MINHASH_PERMUTATIONS if similarity >= threshold : doc_id = doc . get_data () conn = sqlite_pool . get_conn () try : cursor = conn . cursor () cursor . execute ( \"\"\" SELECT title, file_path FROM documents WHERE id = ? \"\"\" , ( doc_id ,)) row = cursor . fetchone () if row : results . append ({ 'id' : doc_id , 'title' : row [ 0 ], 'path' : row [ 1 ], 'similarity' : similarity }) finally : sqlite_pool . return_conn ( conn ) # \u6309\u76f8\u4f3c\u5ea6\u6392\u5e8f results . sort ( key = lambda x : x [ 'similarity' ], reverse = True ) return jsonify ({ 'results' : results }) # \u521d\u59cb\u5316\u51fd\u6570 def initialize_databases (): # \u521d\u59cb\u5316SQLite conn = sqlite3 . connect ( SQLITE_DB_PATH ) try : conn . executescript ( \"\"\" CREATE TABLE IF NOT EXISTS documents ( id TEXT PRIMARY KEY, title TEXT, file_path TEXT UNIQUE, file_type TEXT, created_time INTEGER, updated_time INTEGER ); CREATE INDEX IF NOT EXISTS idx_documents_type ON documents(file_type); CREATE INDEX IF NOT EXISTS idx_documents_time ON documents(created_time); \"\"\" ) conn . commit () finally : conn . close () # \u786e\u4fddXapian\u6570\u636e\u5e93\u5b58\u5728 try : Database ( XAPIAN_DB_PATH ) except : # \u5982\u679c\u4e0d\u5b58\u5728\u5219\u521b\u5efa db = Database ( XAPIAN_DB_PATH , Database . CREATE_OR_OPEN ) db . close () # \u540e\u53f0\u7d22\u5f15\u4efb\u52a1 def background_indexer (): while True : # \u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u5b9a\u671f\u7d22\u5f15\u65b0\u6587\u6863\u7684\u903b\u8f91 time . sleep ( 60 * 5 ) # \u6bcf5\u5206\u949f\u68c0\u67e5\u4e00\u6b21 if __name__ == '__main__' : initialize_databases () # \u542f\u52a8\u540e\u53f0\u7d22\u5f15\u7ebf\u7a0b indexer_thread = threading . Thread ( target = background_indexer , daemon = True ) indexer_thread . start () # \u542f\u52a8Flask\u670d\u52a1 app . run ( host = '0.0.0.0' , port = 5000 , threaded = True )","title":"1. \u670d\u52a1\u4e3b\u7a0b\u5e8f (document_service.py)"},{"location":"search/theone_search_design_impl/#2","text":"import requests # \u641c\u7d22\u6587\u6863 response = requests . get ( 'http://localhost:5000/search' , params = { 'q' : '\u4eba\u5de5\u667a\u80fd' , 'page' : 1 , 'page_size' : 10 }) print ( response . json ()) # \u67e5\u627e\u76f8\u4f3c\u6587\u6863 response = requests . post ( 'http://localhost:5000/find_similar' , json = { 'content' : '\u8fd9\u91cc\u662f\u6587\u6863\u7684\u5b8c\u6574\u5185\u5bb9...' , 'threshold' : 0.7 }) print ( response . json ())","title":"2. \u5ba2\u6237\u7aef\u8c03\u7528\u793a\u4f8b"},{"location":"search/theone_search_design_impl/#_3","text":"\u670d\u52a1\u5316\u67b6\u6784 \uff1a \u57fa\u4e8eFlask\u7684HTTP API\u670d\u52a1 \u652f\u6301\u591a\u7ebf\u7a0b\u5e76\u53d1\u8bf7\u6c42 \u5e38\u9a7b\u5185\u5b58\u8fd0\u884c \u6570\u636e\u5e93\u7ba1\u7406 \uff1a SQLite\u8fde\u63a5\u6c60\u7ba1\u7406 Xapian\u6301\u4e45\u5316\u8fde\u63a5 \u81ea\u52a8\u521d\u59cb\u5316\u6570\u636e\u5e93 \u6838\u5fc3\u529f\u80fd \uff1a \u5168\u6587\u68c0\u7d22 (Xapian) \u6587\u6863\u67e5\u91cd (MinHash) \u5206\u9875\u7ed3\u679c\u8fd4\u56de \u6269\u5c55\u80fd\u529b \uff1a \u540e\u53f0\u81ea\u52a8\u7d22\u5f15\u7ebf\u7a0b \u51c6\u5907\u6dfb\u52a0\u65b0\u6587\u6863\u7684\u63a5\u53e3","title":"\u5173\u952e\u7279\u6027"},{"location":"search/theone_search_design_impl/#_4","text":"\u751f\u4ea7\u73af\u5883\u90e8\u7f72 \uff1a # \u4f7f\u7528Gunicorn\u4f5c\u4e3aWSGI\u670d\u52a1\u5668 gunicorn -w 4 -b 0 .0.0.0:5000 document_service:app \u76d1\u63a7\u548c\u8fd0\u7ef4 \uff1a \u6dfb\u52a0 /health \u7aef\u70b9\u7528\u4e8e\u5065\u5eb7\u68c0\u67e5 \u4f7f\u7528Supervisor\u7ba1\u7406\u8fdb\u7a0b \u8bb0\u5f55\u67e5\u8be2\u65e5\u5fd7 \u6027\u80fd\u4f18\u5316 \uff1a \u5bf9\u9ad8\u9891\u67e5\u8be2\u6dfb\u52a0\u7f13\u5b58 \u8003\u8651\u5bf9Xapian\u6570\u636e\u5e93\u5206\u7247 \u5bf9MinHash\u6bd4\u8f83\u4f7f\u7528\u66f4\u9ad8\u6548\u7684\u6570\u636e\u7ed3\u6784 \u8fd9\u4e2a\u5b9e\u73b0\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u670d\u52a1\u6846\u67b6\uff0c\u60a8\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u9700\u6c42\u8fdb\u4e00\u6b65\u6269\u5c55\u529f\u80fd\uff0c\u5982\u6dfb\u52a0\u7528\u6237\u8ba4\u8bc1\u3001\u66f4\u590d\u6742\u7684\u67e5\u8be2\u53c2\u6570\u3001\u6216\u8005\u96c6\u6210\u5176\u4ed6\u5b58\u50a8\u540e\u7aef\u3002","title":"\u90e8\u7f72\u5efa\u8bae"},{"location":"train/unsloth/","text":"\u6211\u611f\u89c9\u5f97\u5148\u770b\u770b\u6027\u80fd\uff0c\u7136\u540e\u518d\u60f3\u7740\u4ee5\u540e\u4f18\u5316\u3002 from unsloth import FastLanguageModel model , tokenizer = FastLanguageModel . from_pretrained ( model_name = \"unsloth/mistral-7b-bnb-4bit\" , # Supports Llama, Mistral - replace this! max_seq_length = 2048 , # Supports RoPE Scaling internally, so choose any! load_in_4bit = True , )","title":"Unsloth"}]}